<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [BLE_p2pServer\BLE_p2pServer_uuid_2408.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image BLE_p2pServer\BLE_p2pServer_uuid_2408.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Fri Sep  5 23:25:34 2025
<BR><P>
<H3>Maximum Stack Usage =       1728 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
BleStack_Process_BG &rArr; BleStack_Process &rArr; GATT_Process &rArr; GATT_Reset_To_Closed_State &rArr; GATT_Store_Server_Database &rArr; SMP_Save_GATT_Data &rArr; SDB_Write_Gatt_Data &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[7e8]">CPUcontextSave</a>
 <LI><a href="#[7e9]">backup_system_register</a>
 <LI><a href="#[7ea]">restore_system_register</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">SecureFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SecureFault_Handler</a><BR>
 <LI><a href="#[4d]">ADC4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d]">ADC4_IRQHandler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[5d4]">evnt_schdlr_unrgstr_evnt</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[631]">evnt_schdlr_hndl_next_evnt</a><BR>
 <LI><a href="#[5db]">evnt_schdlr_evnt_updtd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[631]">evnt_schdlr_hndl_next_evnt</a><BR>
 <LI><a href="#[6b4]">llhwc_cmn_set_temperature_value</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[631]">evnt_schdlr_hndl_next_evnt</a><BR>
 <LI><a href="#[639]">evnt_schdlr_exec</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[631]">evnt_schdlr_hndl_next_evnt</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[70e]">llcp_pkt_received</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[70e]">llcp_pkt_received</a><BR>
 <LI><a href="#[16d]">exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16d]">exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7f]">ACI_GATT_INDICATION_EVENT</a> from api.o(.text.ACI_GATT_INDICATION_EVENT) referenced from host_srv_events.o(.text.EVT_GATT_Indication)
 <LI><a href="#[80]">ACI_GATT_NOTIFICATION_EVENT</a> from api.o(.text.ACI_GATT_NOTIFICATION_EVENT) referenced from host_srv_events.o(.text.EVT_GATT_Notification)
 <LI><a href="#[4d]">ADC4_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[46]">AES_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[9c]">AMM_BackgroundProcess</a> from advanced_memory_manager.o(.text.AMM_BackgroundProcess) referenced 2 times from app_entry.o(.text.MX_APPE_Init)
 <LI><a href="#[5c]">AMM_WrapperAllocate</a> from app_entry.o(.text.AMM_WrapperAllocate) referenced 2 times from app_entry.o(.text.AMM_RegisterBasicMemoryManager)
 <LI><a href="#[5d]">AMM_WrapperFree</a> from app_entry.o(.text.AMM_WrapperFree) referenced 2 times from app_entry.o(.text.AMM_RegisterBasicMemoryManager)
 <LI><a href="#[5b]">AMM_WrapperInit</a> from app_entry.o(.text.AMM_WrapperInit) referenced 2 times from app_entry.o(.text.AMM_RegisterBasicMemoryManager)
 <LI><a href="#[61]">Adv_Cancel</a> from app_ble.o(.text.Adv_Cancel) referenced 2 times from app_ble.o(.text.APP_BLE_Init)
 <LI><a href="#[62]">Adv_Cancel_Req</a> from app_ble.o(.text.Adv_Cancel_Req) referenced 2 times from app_ble.o(.text.APP_BLE_Init)
 <LI><a href="#[68]">B1_EXTI_Callback</a> from stm32wbaxx_nucleo.o(.text.B1_EXTI_Callback) referenced from stm32wbaxx_nucleo.o(.text.BSP_PB_Init)
 <LI><a href="#[69]">B2_EXTI_Callback</a> from stm32wbaxx_nucleo.o(.text.B2_EXTI_Callback) referenced from stm32wbaxx_nucleo.o(.text.BSP_PB_Init)
 <LI><a href="#[6a]">B3_EXTI_Callback</a> from stm32wbaxx_nucleo.o(.text.B3_EXTI_Callback) referenced from stm32wbaxx_nucleo.o(.text.BSP_PB_Init)
 <LI><a href="#[5e]">BLE_NvmCallback</a> from app_ble.o(.text.BLE_NvmCallback) referenced 2 times from app_ble.o(.text.APP_BLE_HostNvmStore)
 <LI><a href="#[5e]">BLE_NvmCallback</a> from app_ble.o(.text.BLE_NvmCallback) referenced 2 times from app_ble.o(.text.BLE_NvmCallback)
 <LI><a href="#[65]">BLE_ResumeFlowProcessCallback</a> from app_ble.o(.text.BLE_ResumeFlowProcessCallback) referenced 2 times from app_ble.o(.text.BLECB_Indication)
 <LI><a href="#[66]">BLE_TIMER_Background</a> from ble_timer.o(.text.BLE_TIMER_Background) referenced 2 times from ble_timer.o(.text.BLE_TIMER_Init)
 <LI><a href="#[67]">BLE_TIMER_Callback</a> from ble_timer.o(.text.BLE_TIMER_Callback) referenced 2 times from ble_timer.o(.text.BLE_TIMER_Start)
 <LI><a href="#[9f]">BPKA_BG_Process</a> from bpka.o(.text.BPKA_BG_Process) referenced 2 times from app_entry.o(.text.MX_APPE_Init)
 <LI><a href="#[5f]">BleStack_Process_BG</a> from app_ble.o(.text.BleStack_Process_BG) referenced 2 times from app_ble.o(.text.APP_BLE_Init)
 <LI><a href="#[60]">Ble_UserEvtRx</a> from app_ble.o(.text.Ble_UserEvtRx) referenced 2 times from app_ble.o(.text.APP_BLE_Init)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32wbaxx_it.o(.text.BusFault_Handler) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[64]">Button_TriggerActions</a> from app_bsp.o(.text.Button_TriggerActions) referenced 2 times from app_bsp.o(.text.APP_BSP_ButtonInit)
 <LI><a href="#[6c]">CAL_Cs_calib_resp_code_SendNotification</a> from cal_app.o(.text.CAL_Cs_calib_resp_code_SendNotification) referenced 2 times from cal_app.o(.text.CAL_APP_Init)
 <LI><a href="#[6b]">CAL_Cs_calib_status_SendNotification</a> from cal_app.o(.text.CAL_Cs_calib_status_SendNotification) referenced 2 times from cal_app.o(.text.CAL_APP_Init)
 <LI><a href="#[6d]">CAL_EventHandler</a> from cal.o(.text.CAL_EventHandler) referenced 2 times from cal.o(.text.CAL_Init)
 <LI><a href="#[41]">COMP_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[6e]">CSP_ER_BLE_EventHandler</a> from csp_er_ble.o(.text.CSP_ER_BLE_EventHandler) referenced 2 times from csp_er_ble.o(.text.CSP_ER_BLE_Init)
 <LI><a href="#[75]">CS_Cs_diag_error_SendNotification</a> from cs_app.o(.text.CS_Cs_diag_error_SendNotification) referenced 2 times from cs_app.o(.text.CS_APP_Init)
 <LI><a href="#[76]">CS_Cs_diag_warn_SendNotification</a> from cs_app.o(.text.CS_Cs_diag_warn_SendNotification) referenced 2 times from cs_app.o(.text.CS_APP_Init)
 <LI><a href="#[6f]">CS_Cs_flowtemp_SendNotification</a> from cs_app.o(.text.CS_Cs_flowtemp_SendNotification) referenced 2 times from cs_app.o(.text.CS_APP_Init)
 <LI><a href="#[77]">CS_Cs_inlet_pres_pd1_SendNotification</a> from cs_app.o(.text.CS_Cs_inlet_pres_pd1_SendNotification) referenced 2 times from cs_app.o(.text.CS_APP_Init)
 <LI><a href="#[7b]">CS_Cs_lvdt_amp_SendNotification</a> from cs_app.o(.text.CS_Cs_lvdt_amp_SendNotification) referenced 2 times from cs_app.o(.text.CS_APP_Init)
 <LI><a href="#[74]">CS_Cs_mod_com_error_SendNotification</a> from cs_app.o(.text.CS_Cs_mod_com_error_SendNotification) referenced 2 times from cs_app.o(.text.CS_APP_Init)
 <LI><a href="#[79]">CS_Cs_opening_per_SendNotification</a> from cs_app.o(.text.CS_Cs_opening_per_SendNotification) referenced 2 times from cs_app.o(.text.CS_APP_Init)
 <LI><a href="#[7a]">CS_Cs_operation_mode_SendNotification</a> from cs_app.o(.text.CS_Cs_operation_mode_SendNotification) referenced 2 times from cs_app.o(.text.CS_APP_Init)
 <LI><a href="#[78]">CS_Cs_outlet_pres_pd2_SendNotification</a> from cs_app.o(.text.CS_Cs_outlet_pres_pd2_SendNotification) referenced 2 times from cs_app.o(.text.CS_APP_Init)
 <LI><a href="#[71]">CS_Cs_p1t1_SendNotification</a> from cs_app.o(.text.CS_Cs_p1t1_SendNotification) referenced 2 times from cs_app.o(.text.CS_APP_Init)
 <LI><a href="#[70]">CS_Cs_p2t2_SendNotification</a> from cs_app.o(.text.CS_Cs_p2t2_SendNotification) referenced 2 times from cs_app.o(.text.CS_APP_Init)
 <LI><a href="#[73]">CS_Cs_unit_p1t1_SendNotification</a> from cs_app.o(.text.CS_Cs_unit_p1t1_SendNotification) referenced 2 times from cs_app.o(.text.CS_APP_Init)
 <LI><a href="#[72]">CS_Cs_unit_p2t2_SendNotification</a> from cs_app.o(.text.CS_Cs_unit_p2t2_SendNotification) referenced 2 times from cs_app.o(.text.CS_APP_Init)
 <LI><a href="#[7c]">CS_EventHandler</a> from cs.o(.text.CS_EventHandler) referenced 2 times from cs.o(.text.CS_Init)
 <LI><a href="#[7d]">CUPS_ER_BLE_Cups_setpoint_p2_rw_SendNotification</a> from cups_er_ble_app.o(.text.CUPS_ER_BLE_Cups_setpoint_p2_rw_SendNotification) referenced 2 times from cups_er_ble_app.o(.text.CUPS_ER_BLE_APP_Init)
 <LI><a href="#[7e]">CUPS_ER_BLE_EventHandler</a> from cups_er_ble.o(.text.CUPS_ER_BLE_EventHandler) referenced 2 times from cups_er_ble.o(.text.CUPS_ER_BLE_Init)
 <LI><a href="#[9]">DebugMon_Handler</a> from stm32wbaxx_it.o(.text.DebugMon_Handler) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[17]">EXTI0_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[21]">EXTI10_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[22]">EXTI11_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[23]">EXTI12_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[24]">EXTI13_IRQHandler</a> from stm32wbaxx_it.o(.text.EXTI13_IRQHandler) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[25]">EXTI14_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[26]">EXTI15_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[18]">EXTI1_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[19]">EXTI2_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[1a]">EXTI3_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[1b]">EXTI4_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[1c]">EXTI5_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[1d]">EXTI6_IRQHandler</a> from stm32wbaxx_it.o(.text.EXTI6_IRQHandler) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[1e]">EXTI7_IRQHandler</a> from stm32wbaxx_it.o(.text.EXTI7_IRQHandler) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[1f]">EXTI8_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[20]">EXTI9_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[13]">FLASH_S_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[9e]">FM_BackgroundProcess</a> from flash_manager.o(.text.FM_BackgroundProcess) referenced 2 times from app_entry.o(.text.MX_APPE_Init)
 <LI><a href="#[81]">FM_WindowAllowed_Callback</a> from flash_manager.o(.text.FM_WindowAllowed_Callback) referenced 4 times from flash_manager.o(.text.FM_BackgroundProcess)
 <LI><a href="#[48]">FPU_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[84]">GATT_Flush_Acl_List</a> from gatt.o(.text.GATT_Flush_Acl_List) referenced from gatt.o(.text.GATT_Reset_Bearer)
 <LI><a href="#[85]">GATT_Stop_Timer</a> from gatt.o(.text.GATT_Stop_Timer) referenced from gatt.o(.text.GATT_Reset_Bearer)
 <LI><a href="#[82]">GATT_Store</a> from gatt_server_sdb.o(.text.GATT_Store) referenced from gatt_server_sdb.o(.text.GATT_Compute_Database_Hash)
 <LI><a href="#[82]">GATT_Store</a> from gatt_server_sdb.o(.text.GATT_Store) referenced from gatt_server_sdb.o(.text.GATT_Store_Server_Database)
 <LI><a href="#[29]">GPDMA1_Channel0_IRQHandler</a> from stm32wbaxx_it.o(.text.GPDMA1_Channel0_IRQHandler) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[2a]">GPDMA1_Channel1_IRQHandler</a> from stm32wbaxx_it.o(.text.GPDMA1_Channel1_IRQHandler) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[2b]">GPDMA1_Channel2_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[2c]">GPDMA1_Channel3_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[2d]">GPDMA1_Channel4_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[2e]">GPDMA1_Channel5_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[2f]">GPDMA1_Channel6_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[30]">GPDMA1_Channel7_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[14]">GTZC_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[92]">HAL_UARTEx_RxEventCallback</a> from stm32wbaxx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[90]">HAL_UARTEx_RxFifoFullCallback</a> from stm32wbaxx_hal_uart_ex.o(.text.HAL_UARTEx_RxFifoFullCallback) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[91]">HAL_UARTEx_TxFifoEmptyCallback</a> from stm32wbaxx_hal_uart_ex.o(.text.HAL_UARTEx_TxFifoEmptyCallback) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[8d]">HAL_UART_AbortCpltCallback</a> from stm32wbaxx_hal_uart.o(.text.HAL_UART_AbortCpltCallback) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[8f]">HAL_UART_AbortReceiveCpltCallback</a> from stm32wbaxx_hal_uart.o(.text.HAL_UART_AbortReceiveCpltCallback) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[8e]">HAL_UART_AbortTransmitCpltCallback</a> from stm32wbaxx_hal_uart.o(.text.HAL_UART_AbortTransmitCpltCallback) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[8c]">HAL_UART_ErrorCallback</a> from stm32wbaxx_hal_uart.o(.text.HAL_UART_ErrorCallback) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[86]">HAL_UART_MspDeInit</a> from stm32wbaxx_hal_msp.o(.text.HAL_UART_MspDeInit) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_DeInit)
 <LI><a href="#[93]">HAL_UART_MspInit</a> from stm32wbaxx_hal_msp.o(.text.HAL_UART_MspInit) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[8b]">HAL_UART_RxCpltCallback</a> from stm32wbaxx_hal_uart.o(.text.HAL_UART_RxCpltCallback) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[8a]">HAL_UART_RxHalfCpltCallback</a> from stm32wbaxx_hal_uart.o(.text.HAL_UART_RxHalfCpltCallback) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[89]">HAL_UART_TxCpltCallback</a> from stm32wbaxx_hal_uart.o(.text.HAL_UART_TxCpltCallback) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[88]">HAL_UART_TxHalfCpltCallback</a> from stm32wbaxx_hal_uart.o(.text.HAL_UART_TxHalfCpltCallback) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[49]">HASH_IRQHandler</a> from stm32wbaxx_it.o(.text.HASH_IRQHandler) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[50]">HSEM_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[51]">HSEM_S_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[9d]">HW_RNG_Process</a> from hw_rng.o(.text.HW_RNG_Process) referenced 2 times from app_entry.o(.text.MX_APPE_Init)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32wbaxx_it.o(.text.HardFault_Handler) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[38]">I2C1_ER_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[37]">I2C1_EV_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[43]">I2C3_ER_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[42]">I2C3_EV_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[4c]">ICACHE_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[27]">IWDG_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[111]">LECTRL_AutPayloadTimeoutEvent</a> from le_ctrl_events.o(.text.LECTRL_AutPayloadTimeoutEvent) referenced from le_ctrl_events.o(.rodata.hci_event_table)
 <LI><a href="#[10f]">LECTRL_DataBufferOverflowEvent</a> from le_ctrl_events.o(.text.LECTRL_DataBufferOverflowEvent) referenced from le_ctrl_events.o(.rodata.hci_event_table)
 <LI><a href="#[10a]">LECTRL_DisconnectionComplete</a> from le_ctrl_events.o(.text.LECTRL_DisconnectionComplete) referenced from le_ctrl_events.o(.rodata.hci_event_table)
 <LI><a href="#[10b]">LECTRL_EncryptionChangeEvent</a> from le_ctrl_events.o(.text.LECTRL_EncryptionChangeEvent) referenced from le_ctrl_events.o(.rodata.hci_event_table)
 <LI><a href="#[110]">LECTRL_EncryptionKeyRefreshCompleteEvent</a> from le_ctrl_events.o(.text.LECTRL_EncryptionKeyRefreshCompleteEvent) referenced from le_ctrl_events.o(.rodata.hci_event_table)
 <LI><a href="#[10d]">LECTRL_HwErrorEvent</a> from le_ctrl_events.o(.text.LECTRL_HwErrorEvent) referenced from le_ctrl_events.o(.rodata.hci_event_table)
 <LI><a href="#[113]">LECTRL_LeAdvertisingReportEvent</a> from le_ctrl_events.o(.text.LECTRL_LeAdvertisingReportEvent) referenced from le_ctrl_events.o(.rodata.hci_subevent_table)
 <LI><a href="#[11c]">LECTRL_LeChannelSelectionAlgorithmEvent</a> from le_ctrl_events.o(.text.LECTRL_LeChannelSelectionAlgorithmEvent) referenced from le_ctrl_events.o(.rodata.hci_subevent_table)
 <LI><a href="#[112]">LECTRL_LeConnectionCompleteEvent</a> from le_ctrl_events.o(.text.LECTRL_LeConnectionCompleteEvent) referenced from le_ctrl_events.o(.rodata.hci_subevent_table)
 <LI><a href="#[114]">LECTRL_LeConnectionUpdateCompleteEvent</a> from le_ctrl_events.o(.text.LECTRL_LeConnectionUpdateCompleteEvent) referenced from le_ctrl_events.o(.rodata.hci_subevent_table)
 <LI><a href="#[118]">LECTRL_LeDataLengthChangeEvent</a> from le_ctrl_events.o(.text.LECTRL_LeDataLengthChangeEvent) referenced from le_ctrl_events.o(.rodata.hci_subevent_table)
 <LI><a href="#[11a]">LECTRL_LeDirectedAdvertisingReportEvent</a> from le_ctrl_events.o(.text.LECTRL_LeDirectedAdvertisingReportEvent) referenced from le_ctrl_events.o(.rodata.hci_subevent_table)
 <LI><a href="#[119]">LECTRL_LeEnhancedConnectionCompleteEvent</a> from le_ctrl_events.o(.text.LECTRL_LeEnhancedConnectionCompleteEvent) referenced from le_ctrl_events.o(.rodata.hci_subevent_table)
 <LI><a href="#[116]">LECTRL_LeLongTermKeyRequestEvent</a> from le_ctrl_events.o(.text.LECTRL_LeLongTermKeyRequestEvent) referenced from le_ctrl_events.o(.rodata.hci_subevent_table)
 <LI><a href="#[11b]">LECTRL_LePhyUpdateCompleteEvent</a> from le_ctrl_events.o(.text.LECTRL_LePhyUpdateCompleteEvent) referenced from le_ctrl_events.o(.rodata.hci_subevent_table)
 <LI><a href="#[115]">LECTRL_LeReadRemoteUsedFeaturesCompleteEvent</a> from le_ctrl_events.o(.text.LECTRL_LeReadRemoteUsedFeaturesCompleteEvent) referenced from le_ctrl_events.o(.rodata.hci_subevent_table)
 <LI><a href="#[117]">LECTRL_LeRemoteConnParamReqEvent</a> from le_ctrl_events.o(.text.LECTRL_LeRemoteConnParamReqEvent) referenced from le_ctrl_events.o(.rodata.hci_subevent_table)
 <LI><a href="#[10e]">LECTRL_NumberOfCompletedPacketsEvent</a> from le_ctrl_events.o(.text.LECTRL_NumberOfCompletedPacketsEvent) referenced from le_ctrl_events.o(.rodata.hci_event_table)
 <LI><a href="#[10c]">LECTRL_ReadRemoteVersionInformationComplete</a> from le_ctrl_events.o(.text.LECTRL_ReadRemoteVersionInformationComplete) referenced from le_ctrl_events.o(.rodata.hci_event_table)
 <LI><a href="#[9b]">LECTRL_UpperLayerCallback</a> from le_ctrl_events.o(.text.LECTRL_UpperLayerCallback) referenced from le_ctrl.o(.text.LECTRL_LL_Init)
 <LI><a href="#[3d]">LPTIM1_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[3e]">LPTIM2_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[3c]">LPUART1_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32wbaxx_it.o(.text.MemManage_Handler) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[83]">Mem_Assign</a> from stack_utils.o(.text.Mem_Assign) referenced from gatt_server.o(.text.GATT_Db_MemAlloc)
 <LI><a href="#[a4]">Memcpy_Rev</a> from stack_utils.o(.text.Memcpy_Rev) referenced from sm_algo.o(.text.SMA_SC_Gen_g2_NumComp_Val)
 <LI><a href="#[2]">NMI_Handler</a> from stm32wbaxx_it.o(.text.NMI_Handler) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[a0]">P2P_SERVER_EventHandler</a> from p2p_server.o(.text.P2P_SERVER_EventHandler) referenced 2 times from p2p_server.o(.text.P2P_SERVER_Init)
 <LI><a href="#[4a]">PKA_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[d]">PVD_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from stm32wbaxx_it.o(.text.PendSV_Handler) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[4e]">RADIO_IRQHandler</a> from stm32wbaxx_it.o(.text.RADIO_IRQHandler) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[11]">RAMCFG_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[53]">RCC_AUDIOSYNC_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[15]">RCC_IRQHandler</a> from stm32wbaxx_it.o(.text.RCC_IRQHandler) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[16]">RCC_S_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[a2]">RFTS_Timeout_Callback</a> from rf_timing_synchro.o(.text.RFTS_Timeout_Callback) referenced 2 times from rf_timing_synchro.o(.text.RFTS_ReqWindow)
 <LI><a href="#[47]">RNG_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler</a> from stm32wbaxx_it.o(.text.RTC_IRQHandler) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[f]">RTC_S_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from stm32wbaxx_resethandler_mdk-arm.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[28]">SAES_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[44]">SAI1_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[a3]">SMA_Cmac</a> from sm_algo.o(.text.SMA_Cmac) referenced from sm_algo.o(.text.SMA_SC_Gen_f5_Keys)
 <LI><a href="#[a5]">SNVMA_FlashManagerCallback</a> from simple_nvm_arbiter.o(.text.SNVMA_FlashManagerCallback) referenced 2 times from simple_nvm_arbiter.o(.text.SNVMA_Init)
 <LI><a href="#[39]">SPI1_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[4b]">SPI3_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from stm32wbaxx_it.o(.text.SVC_Handler) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[7]">SecureFault_Handler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[63]">Switch_OFF_GPIO</a> from app_ble.o(.text.Switch_OFF_GPIO) referenced 2 times from app_ble.o(.text.APP_BLE_Init)
 <LI><a href="#[b]">SysTick_Handler</a> from stm32wbaxx_it.o(.text.SysTick_Handler) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[54]">SystemInit</a> from system_stm32wbaxx.o(.text.SystemInit) referenced 2 times from startup_stm32wba55xx.o(.text)
 <LI><a href="#[10]">TAMP_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[ca]">TEMPMEAS_RequestTemperatureMeasurement</a> from temp_measurement.o(.text.TEMPMEAS_RequestTemperatureMeasurement) referenced 2 times from ll_sys_if.o(.text.ll_sys_config_params)
 <LI><a href="#[3f]">TIM16_IRQHandler</a> from stm32wbaxx_it.o(.text.TIM16_IRQHandler) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[40]">TIM17_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[31]">TIM1_BRK_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[34]">TIM1_CC_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[33]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[32]">TIM1_UP_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[35]">TIM2_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[36]">TIM3_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[e9]">TIMER_IF_Convert_Tick2ms</a> from timer_if.o(.text.TIMER_IF_Convert_Tick2ms) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[e8]">TIMER_IF_Convert_ms2Tick</a> from timer_if.o(.text.TIMER_IF_Convert_ms2Tick) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[e7]">TIMER_IF_GetMinimumTimeout</a> from timer_if.o(.text.TIMER_IF_GetMinimumTimeout) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[e4]">TIMER_IF_GetTimerContext</a> from timer_if.o(.text.TIMER_IF_GetTimerContext) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[e5]">TIMER_IF_GetTimerElapsedTime</a> from timer_if.o(.text.TIMER_IF_GetTimerElapsedTime) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[e6]">TIMER_IF_GetTimerValue</a> from timer_if.o(.text.TIMER_IF_GetTimerValue) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[e0]">TIMER_IF_Init</a> from timer_if.o(.text.TIMER_IF_Init) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[e3]">TIMER_IF_SetTimerContext</a> from timer_if.o(.text.TIMER_IF_SetTimerContext) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[e1]">TIMER_IF_StartTimer</a> from timer_if.o(.text.TIMER_IF_StartTimer) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[e2]">TIMER_IF_StopTimer</a> from timer_if.o(.text.TIMER_IF_StopTimer) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[b0]">TRACE_TxCpltCallback</a> from stm32_adv_trace.o(.text.TRACE_TxCpltCallback) referenced 2 times from stm32_adv_trace.o(.text.UTIL_ADV_TRACE_Init)
 <LI><a href="#[45]">TSC_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[a9]">TS_EventHandler</a> from ts.o(.text.TS_EventHandler) referenced 2 times from ts.o(.text.TS_Init)
 <LI><a href="#[a8]">TS_Ts_test_resp_code_SendNotification</a> from ts_app.o(.text.TS_Ts_test_resp_code_SendNotification) referenced 2 times from ts_app.o(.text.TS_APP_Init)
 <LI><a href="#[a7]">TS_Ts_test_status_SendNotification</a> from ts_app.o(.text.TS_Ts_test_status_SendNotification) referenced 2 times from ts_app.o(.text.TS_APP_Init)
 <LI><a href="#[87]">UART_DMAAbortOnError</a> from stm32wbaxx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[96]">UART_DMAError</a> from stm32wbaxx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[94]">UART_DMATransmitCplt</a> from stm32wbaxx_hal_uart.o(.text.UART_DMATransmitCplt) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[95]">UART_DMATxHalfCplt</a> from stm32wbaxx_hal_uart.o(.text.UART_DMATxHalfCplt) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[eb]">UART_DeInit</a> from adv_trace_usart_if.o(.text.UART_DeInit) referenced from adv_trace_usart_if.o(.rodata.UTIL_TraceDriver)
 <LI><a href="#[ea]">UART_Init</a> from adv_trace_usart_if.o(.text.UART_Init) referenced from adv_trace_usart_if.o(.rodata.UTIL_TraceDriver)
 <LI><a href="#[ab]">UART_RxISR_16BIT</a> from stm32wbaxx_hal_uart.o(.text.UART_RxISR_16BIT) referenced 2 times from stm32wbaxx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN)
 <LI><a href="#[ab]">UART_RxISR_16BIT</a> from stm32wbaxx_hal_uart.o(.text.UART_RxISR_16BIT) referenced 2 times from stm32wbaxx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[af]">UART_RxISR_16BIT_FIFOEN</a> from stm32wbaxx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN) referenced 2 times from stm32wbaxx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[ac]">UART_RxISR_8BIT</a> from stm32wbaxx_hal_uart.o(.text.UART_RxISR_8BIT) referenced 2 times from stm32wbaxx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN)
 <LI><a href="#[ac]">UART_RxISR_8BIT</a> from stm32wbaxx_hal_uart.o(.text.UART_RxISR_8BIT) referenced 4 times from stm32wbaxx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[ae]">UART_RxISR_8BIT_FIFOEN</a> from stm32wbaxx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN) referenced 4 times from stm32wbaxx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[a6]">UART_Rx_Callback</a> from serial_cmd_interpreter.o(.text.UART_Rx_Callback) referenced 2 times from serial_cmd_interpreter.o(.text.Serial_CMD_Interpreter_Init)
 <LI><a href="#[ec]">UART_StartRx</a> from adv_trace_usart_if.o(.text.UART_StartRx) referenced from adv_trace_usart_if.o(.rodata.UTIL_TraceDriver)
 <LI><a href="#[ed]">UART_TransmitDMA</a> from adv_trace_usart_if.o(.text.UART_TransmitDMA) referenced from adv_trace_usart_if.o(.rodata.UTIL_TraceDriver)
 <LI><a href="#[9a]">UART_TxISR_16BIT</a> from stm32wbaxx_hal_uart.o(.text.UART_TxISR_16BIT) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_Transmit_IT)
 <LI><a href="#[99]">UART_TxISR_16BIT_FIFOEN</a> from stm32wbaxx_hal_uart.o(.text.UART_TxISR_16BIT_FIFOEN) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_Transmit_IT)
 <LI><a href="#[98]">UART_TxISR_8BIT</a> from stm32wbaxx_hal_uart.o(.text.UART_TxISR_8BIT) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_Transmit_IT)
 <LI><a href="#[97]">UART_TxISR_8BIT_FIFOEN</a> from stm32wbaxx_hal_uart.o(.text.UART_TxISR_8BIT_FIFOEN) referenced 2 times from stm32wbaxx_hal_uart.o(.text.HAL_UART_Transmit_IT)
 <LI><a href="#[3a]">USART1_IRQHandler</a> from stm32wbaxx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[3b]">USART2_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[bf]">US_TO_SLP_TMR_PROTECTED</a> from llhwc_cmn.o(.text.US_TO_SLP_TMR_PROTECTED) referenced from evnt_schdlr.o(.text.evnt_schdlr_rgstr_evnt)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32wbaxx_it.o(.text.UsageFault_Handler) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[ad]">UsartIf_RxCpltCallback</a> from adv_trace_usart_if.o(.text.UsartIf_RxCpltCallback) referenced 2 times from adv_trace_usart_if.o(.text.UART_StartRx)
 <LI><a href="#[aa]">UsartIf_TxCpltCallback</a> from adv_trace_usart_if.o(.text.UsartIf_TxCpltCallback) referenced 2 times from adv_trace_usart_if.o(.text.UART_Init)
 <LI><a href="#[4f]">WKUP_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[52]">WKUP_S_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[c]">WWDG_IRQHandler</a> from startup_stm32wba55xx.o(.text) referenced from startup_stm32wba55xx.o(RESET)
 <LI><a href="#[55]">__main</a> from __main.o(!!!main) referenced 2 times from startup_stm32wba55xx.o(.text)
 <LI><a href="#[59]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[58]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[56]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[57]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[124]">add_evnt</a> from multi_role_greedy.o(.text.add_evnt) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
 <LI><a href="#[5a]">ble_memcpy</a> from mem_utils.o(.text.ble_memcpy) referenced from acl.o(.text.ACL_Append)
 <LI><a href="#[5a]">ble_memcpy</a> from mem_utils.o(.text.ble_memcpy) referenced from gatt_server.o(.text.GATT_Add_Char_Core)
 <LI><a href="#[5a]">ble_memcpy</a> from mem_utils.o(.text.ble_memcpy) referenced from api.o(.text.HCI_LE_ENHANCED_CONNECTION_COMPLETE_EVENT)
 <LI><a href="#[5a]">ble_memcpy</a> from mem_utils.o(.text.ble_memcpy) referenced from le_ctrl.o(.text.LECTRL_Reset)
 <LI><a href="#[5a]">ble_memcpy</a> from mem_utils.o(.text.ble_memcpy) referenced from sm_algo.o(.text.SMA_Compute_Confirm_Value)
 <LI><a href="#[5a]">ble_memcpy</a> from mem_utils.o(.text.ble_memcpy) referenced from smp.o(.text.SMP_Connection_Complete_Handler)
 <LI><a href="#[5a]">ble_memcpy</a> from mem_utils.o(.text.ble_memcpy) referenced from smp_pair.o(.text.SMP_Pairing_Process)
 <LI><a href="#[5a]">ble_memcpy</a> from mem_utils.o(.text.ble_memcpy) referenced from hci.o(.text.hci_le_read_rmt_used_page_0_features_cmplt_evnt)
 <LI><a href="#[5a]">ble_memcpy</a> from mem_utils.o(.text.ble_memcpy) referenced from hci.o(.text.hci_read_rmt_ver_info_cmplt_evnt)
 <LI><a href="#[5a]">ble_memcpy</a> from mem_utils.o(.text.ble_memcpy) referenced from prvcy_mngr.o(.text.prvcy_mngr_add_rmv_clr_fw_reslvng_list)
 <LI><a href="#[b3]">bsp_assert</a> from bsp.o(.text.bsp_assert) referenced from conn_mngr.o(.text.conn_mngr_disconnect)
 <LI><a href="#[b3]">bsp_assert</a> from bsp.o(.text.bsp_assert) referenced from multi_role_greedy.o(.text.evnt_on_air)
 <LI><a href="#[b3]">bsp_assert</a> from bsp.o(.text.bsp_assert) referenced from multi_role_greedy.o(.text.hndl_missed_evnt)
 <LI><a href="#[b3]">bsp_assert</a> from bsp.o(.text.bsp_assert) referenced from llhwc_cmn.o(.text.llhwc_cmn_evnt_notify)
 <LI><a href="#[b3]">bsp_assert</a> from bsp.o(.text.bsp_assert) referenced from mem_manager.o(.text.mem_pool_init)
 <LI><a href="#[b3]">bsp_assert</a> from bsp.o(.text.bsp_assert) referenced from pdu_trnsprt_hndlr.o(.text.pdu_trnsprt_hndlr_parse_data_cntrl)
 <LI><a href="#[131]">calc_win_offset</a> from multi_role_greedy.o(.text.calc_win_offset) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
 <LI><a href="#[12b]">calculate_max_pkts_to_send</a> from multi_role_greedy.o(.text.calculate_max_pkts_to_send) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
 <LI><a href="#[b5]">conn_mngr_check_conn_id</a> from conn_mngr.o(.text.conn_mngr_check_conn_id) referenced from conn_mngr.o(.text.conn_mngr_disconnect)
 <LI><a href="#[b5]">conn_mngr_check_conn_id</a> from conn_mngr.o(.text.conn_mngr_check_conn_id) referenced from evnt_schdlr.o(.text.evnt_schdlr_hndl_next_evnt)
 <LI><a href="#[b9]">conn_mngr_error_cbk</a> from conn_mngr.o(.text.conn_mngr_error_cbk) referenced from conn_mngr.o(.text.conn_mngr_start_connection)
 <LI><a href="#[b8]">conn_mngr_pkt_transmited_received_cbk</a> from conn_mngr.o(.text.conn_mngr_pkt_transmited_received_cbk) referenced from conn_mngr.o(.text.conn_mngr_start_connection)
 <LI><a href="#[b2]">conn_mngr_post_timer_evnt_clbk</a> from conn_mngr.o(.text.conn_mngr_post_timer_evnt_clbk) referenced from conn_mngr.o(.text.conn_mngr_alloc_handle)
 <LI><a href="#[b6]">conn_mngr_process_evnt_clbk</a> from conn_mngr.o(.text.conn_mngr_process_evnt_clbk) referenced from conn_mngr.o(.text.conn_mngr_init)
 <LI><a href="#[b7]">conn_mngr_updt_conn_param_evnt_clbk</a> from conn_mngr.o(.text.conn_mngr_updt_conn_param_evnt_clbk) referenced from conn_mngr.o(.text.conn_mngr_init)
 <LI><a href="#[130]">conn_param_req</a> from multi_role_greedy.o(.text.conn_param_req) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
 <LI><a href="#[c6]">emngr_handle_init</a> from event_manager.o(.text.emngr_handle_init) referenced from hci.o(.text.hci_init_events_queues)
 <LI><a href="#[a1]">event_started_callback</a> from rf_timing_synchro.o(.text.event_started_callback) referenced 2 times from rf_timing_synchro.o(.text.RFTS_ReqWindow)
 <LI><a href="#[127]">events_count</a> from multi_role_greedy.o(.text.events_count) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
 <LI><a href="#[128]">events_when_idle_count</a> from multi_role_greedy.o(.text.events_when_idle_count) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
 <LI><a href="#[122]">evnt_on_air</a> from multi_role_greedy.o(.text.evnt_on_air) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
 <LI><a href="#[be]">evnt_schdlr_config_schdling_time</a> from evnt_schdlr.o(.text.evnt_schdlr_config_schdling_time) referenced from evnt_schdlr.o(.text.evnt_schdlr_init)
 <LI><a href="#[c4]">evnt_schdlr_get_nxt_event_chnl</a> from evnt_schdlr.o(.text.evnt_schdlr_get_nxt_event_chnl) referenced from evnt_schdlr.o(.text.evnt_schdlr_rgstr_prdc_clbr_evnt)
 <LI><a href="#[bd]">evnt_schdlr_hndl_near_evnts</a> from evnt_schdlr.o(.text.evnt_schdlr_hndl_near_evnts) referenced from evnt_schdlr.o(.text.evnt_schdlr_init)
 <LI><a href="#[bb]">evnt_schdlr_hw_evnt_cmplt</a> from evnt_schdlr.o(.text.evnt_schdlr_hw_evnt_cmplt) referenced from evnt_schdlr.o(.text.evnt_schdlr_init)
 <LI><a href="#[c3]">evnt_schdlr_phy_clbr_done_clbk</a> from evnt_schdlr.o(.text.evnt_schdlr_phy_clbr_done_clbk) referenced from evnt_schdlr.o(.text.evnt_schdlr_rgstr_prdc_clbr_evnt)
 <LI><a href="#[c1]">evnt_schdlr_prdc_clbr_abortd</a> from evnt_schdlr.o(.text.evnt_schdlr_prdc_clbr_abortd) referenced from evnt_schdlr.o(.text.evnt_schdlr_rgstr_prdc_clbr_evnt)
 <LI><a href="#[bc]">evnt_schdlr_prdc_clbr_evnt_clbk</a> from evnt_schdlr.o(.text.evnt_schdlr_prdc_clbr_evnt_clbk) referenced from evnt_schdlr.o(.text.evnt_schdlr_init)
 <LI><a href="#[c2]">evnt_schdlr_prdc_clbr_strtd</a> from evnt_schdlr.o(.text.evnt_schdlr_prdc_clbr_strtd) referenced from evnt_schdlr.o(.text.evnt_schdlr_rgstr_prdc_clbr_evnt)
 <LI><a href="#[c0]">evnt_schdlr_timer_callback</a> from evnt_schdlr.o(.text.evnt_schdlr_timer_callback) referenced from evnt_schdlr.o(.text.evnt_schdlr_rgstr_evnt)
 <LI><a href="#[12c]">extend_gnrc_evnt_durn_chk</a> from multi_role_greedy.o(.text.extend_gnrc_evnt_durn_chk) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
 <LI><a href="#[121]">get_clbr_when_idle_evnt</a> from multi_role_greedy.o(.text.get_clbr_when_idle_evnt) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
 <LI><a href="#[11f]">get_nxt_evnt</a> from multi_role_greedy.o(.text.get_nxt_evnt) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
 <LI><a href="#[120]">get_nxt_when_idle_evnt</a> from multi_role_greedy.o(.text.get_nxt_when_idle_evnt) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
 <LI><a href="#[104]">hci_authn_pyld_tout_exprd_evnt</a> from hci.o(.text.hci_authn_pyld_tout_exprd_evnt) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[f3]">hci_construct_hw_err_evnt</a> from hci.o(.text.hci_construct_hw_err_evnt) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[0]">hci_default_ll_queue_full</a> from hci.o(.text.hci_default_ll_queue_full) referenced 2 times from hci.o(.data.hci_ll_queue_full_cbk)
 <LI><a href="#[f5]">hci_disconn_cmplt_evnt</a> from hci.o(.text.hci_disconn_cmplt_evnt) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[102]">hci_encrpt_chng_evnt</a> from hci.o(.text.hci_encrpt_chng_evnt) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[103]">hci_encrpt_key_rfrsh_cmplt_evnt</a> from hci.o(.text.hci_encrpt_key_rfrsh_cmplt_evnt) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[109]">hci_end_of_activity_evnt</a> from hci.o(.text.hci_end_of_activity_evnt) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[106]">hci_le_chnl_sel_algo_evnt</a> from hci.o(.text.hci_le_chnl_sel_algo_evnt) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[fe]">hci_le_conn_update_cmplt_event</a> from hci.o(.text.hci_le_conn_update_cmplt_event) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[f9]">hci_le_data_buff_ovrflw_event</a> from hci.o(.text.hci_le_data_buff_ovrflw_event) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[100]">hci_le_data_length_chg_event</a> from hci.o(.text.hci_le_data_length_chg_event) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[108]">hci_le_energy_dctn_cmplt_evnt</a> from hci.o(.text.hci_le_energy_dctn_cmplt_evnt) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[f6]">hci_le_enhanced_conn_cmplt_evnt</a> from hci.o(.text.hci_le_enhanced_conn_cmplt_evnt) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[105]">hci_le_long_trm_key_rqst_evnt</a> from hci.o(.text.hci_le_long_trm_key_rqst_evnt) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[101]">hci_le_phy_update_complete_event</a> from hci.o(.text.hci_le_phy_update_complete_event) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[f8]">hci_le_read_rmt_used_page_0_features_cmplt_evnt</a> from hci.o(.text.hci_le_read_rmt_used_page_0_features_cmplt_evnt) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[ff]">hci_le_rem_conn_param_req_event</a> from hci.o(.text.hci_le_rem_conn_param_req_event) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[f4]">hci_le_req_peer_sca_cpmlt_evnt</a> from hci.o(.text.hci_le_req_peer_sca_cpmlt_evnt) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[107]">hci_le_update_clock_accuracy_cmp_evnt</a> from hci.o(.text.hci_le_update_clock_accuracy_cmp_evnt) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[fb]">hci_num_of_cmpltd_pckts_cmplt_evnt</a> from hci.o(.text.hci_num_of_cmpltd_pckts_cmplt_evnt) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[c5]">hci_post_event_cbk</a> from hci.o(.text.hci_post_event_cbk) referenced from hci.o(.text.hci_init_events_queues)
 <LI><a href="#[c7]">hci_queue_send_pckt</a> from hci.o(.text.hci_queue_send_pckt) referenced from ll_intf.o(.text.ll_intf_init)
 <LI><a href="#[f7]">hci_read_rmt_ver_info_cmplt_evnt</a> from hci.o(.text.hci_read_rmt_ver_info_cmplt_evnt) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[fa]">hci_send_acl_data_from_cntrlr_to_host</a> from hci.o(.text.hci_send_acl_data_from_cntrlr_to_host) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[fc]">hci_send_le_adv_report_pkt</a> from hci.o(.text.hci_send_le_adv_report_pkt) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[fd]">hci_send_le_dir_adv_report_pkt</a> from hci.o(.text.hci_send_le_dir_adv_report_pkt) referenced from hci.o(.rodata.hci_dis_tbl)
 <LI><a href="#[123]">hndl_missed_evnt</a> from multi_role_greedy.o(.text.hndl_missed_evnt) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
 <LI><a href="#[d0]">ll_cmn_hg_isr</a> from llhwc_cmn.o(.text.ll_cmn_hg_isr) referenced from llhwc_cmn.o(.text.llhwc_cmn_init)
 <LI><a href="#[d1]">ll_cmn_lw_isr</a> from llhwc_cmn.o(.text.ll_cmn_lw_isr) referenced from llhwc_cmn.o(.text.llhwc_cmn_init)
 <LI><a href="#[ce]">ll_isr</a> from llhwc_cmn.o(.text.ll_isr) referenced from llhwc_cmn.o(.text.llhwc_cmn_init)
 <LI><a href="#[cf]">ll_lw_prio_isr</a> from llhwc_cmn.o(.text.ll_lw_prio_isr) referenced from llhwc_cmn.o(.text.llhwc_cmn_init)
 <LI><a href="#[c8]">ll_sys_bg_process</a> from ll_sys_intf.o(.text.ll_sys_bg_process) referenced 2 times from ll_sys_if.o(.text.ll_sys_bg_process_init)
 <LI><a href="#[cb]">ll_sys_dp_slp_wakeup_evt_clbk</a> from ll_sys_dp_slp.o(.text.ll_sys_dp_slp_wakeup_evt_clbk) referenced 2 times from ll_sys_dp_slp.o(.text.ll_sys_dp_slp_init)
 <LI><a href="#[c9]">ll_sys_event_missed_cb</a> from ll_sys_startup.o(.text.ll_sys_event_missed_cb) referenced 2 times from ll_sys_startup.o(.text.ll_sys_ble_cntrl_init)
 <LI><a href="#[cd]">llcp_mngr_termination_recevied_clbk</a> from llcp_mngr.o(.text.llcp_mngr_termination_recevied_clbk) referenced from llcp_mngr.o(.text.llcp_disconnect_received)
 <LI><a href="#[cc]">llcp_post_timer_evnt_clbk</a> from llcp_mngr.o(.text.llcp_post_timer_evnt_clbk) referenced from llcp_mngr.o(.text.llcp_cntrl_pkt_init)
 <LI><a href="#[cc]">llcp_post_timer_evnt_clbk</a> from llcp_mngr.o(.text.llcp_post_timer_evnt_clbk) referenced from llcp_mngr.o(.text.llcp_instant_ctrl_init)
 <LI><a href="#[cc]">llcp_post_timer_evnt_clbk</a> from llcp_mngr.o(.text.llcp_post_timer_evnt_clbk) referenced from llcp_mngr.o(.text.llcp_pkt_received)
 <LI><a href="#[ee]">llhwc_adv_done</a> from llhwc.o(.text.llhwc_adv_done) referenced 4 times from llhwc.o(.rodata.callbacks)
 <LI><a href="#[d6]">llhwc_ble_wait_for_evnt_on_air</a> from llhwc.o(.text.llhwc_ble_wait_for_evnt_on_air) referenced from llhwc.o(.text.llhwc_init)
 <LI><a href="#[d3]">llhwc_cmn_rco_clbr_timer_cbk</a> from llhwc_cmn.o(.text.llhwc_cmn_rco_clbr_timer_cbk) referenced from llhwc_cmn.o(.text.llhwc_cmn_start_stop_runtime_rco_clbr)
 <LI><a href="#[d2]">llhwc_cmn_set_os_timer_activity</a> from llhwc_cmn.o(.text.llhwc_cmn_set_os_timer_activity) referenced from llhwc_cmn.o(.text.llhwc_cmn_initial_rco_clbr)
 <LI><a href="#[f1]">llhwc_conn_evnt_done</a> from llhwc.o(.text.llhwc_conn_evnt_done) referenced 2 times from llhwc.o(.rodata.callbacks)
 <LI><a href="#[f2]">llhwc_dtm_done</a> from llhwc.o(.text.llhwc_dtm_done) referenced 4 times from llhwc.o(.rodata.callbacks)
 <LI><a href="#[d4]">llhwc_hg_isr</a> from llhwc.o(.text.llhwc_hg_isr) referenced from llhwc.o(.text.llhwc_init)
 <LI><a href="#[f0]">llhwc_init_done</a> from llhwc.o(.text.llhwc_init_done) referenced 2 times from llhwc.o(.rodata.callbacks)
 <LI><a href="#[db]">llhwc_lst_clr</a> from llhwc.o(.text.llhwc_lst_clr) referenced from llhwc.o(.text.llhwc_reset)
 <LI><a href="#[d5]">llhwc_lw_isr</a> from llhwc.o(.text.llhwc_lw_isr) referenced from llhwc.o(.text.llhwc_init)
 <LI><a href="#[d8]">llhwc_phy_get_phy_seq_cfg_time_spi_bus</a> from llhwc_phy.o(.text.llhwc_phy_get_phy_seq_cfg_time_spi_bus) referenced from llhwc_phy.o(.text.llhwc_phy_get_prdc_clbr_cfg_time)
 <LI><a href="#[d8]">llhwc_phy_get_phy_seq_cfg_time_spi_bus</a> from llhwc_phy.o(.text.llhwc_phy_get_phy_seq_cfg_time_spi_bus) referenced from llhwc_phy.o(.text.llhwc_phy_set_cfg_time)
 <LI><a href="#[d9]">llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences</a> from llhwc_phy.o(.text.llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences) referenced from llhwc_phy.o(.text.llhwc_phy_patch_tx_power_mode_phy_reg)
 <LI><a href="#[da]">llhwc_phy_run_phy_sequence</a> from llhwc_phy.o(.text.llhwc_phy_run_phy_sequence) referenced from llhwc_phy.o(.text.llhwc_phy_run_pre_post_phy_clbr)
 <LI><a href="#[da]">llhwc_phy_run_phy_sequence</a> from llhwc_phy.o(.text.llhwc_phy_run_phy_sequence) referenced from llhwc_phy.o(.text.llhwc_phy_strt_stp)
 <LI><a href="#[d7]">llhwc_recover_from_dp_slp</a> from llhwc.o(.text.llhwc_recover_from_dp_slp) referenced from llhwc.o(.text.llhwc_init)
 <LI><a href="#[ef]">llhwc_scan_done</a> from llhwc.o(.text.llhwc_scan_done) referenced 2 times from llhwc.o(.rodata.callbacks)
 <LI><a href="#[b1]">mem_pool_init</a> from mem_manager.o(.text.mem_pool_init) referenced from ble_mem_cfg.o(.text.ble_mem_shared_reset)
 <LI><a href="#[b1]">mem_pool_init</a> from mem_manager.o(.text.mem_pool_init) referenced from mem_cfg.o(.text.ll_mem_init)
 <LI><a href="#[11d]">multi_init</a> from multi_role_greedy.o(.text.multi_init) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
 <LI><a href="#[11e]">multi_reset</a> from multi_role_greedy.o(.text.multi_reset) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
 <LI><a href="#[dc]">non_conn_mngr_adv_cbk</a> from non_conn_mngr.o(.text.non_conn_mngr_adv_cbk) referenced from non_conn_mngr.o(.text.non_conn_mngr_adv_enable)
 <LI><a href="#[b4]">non_conn_mngr_remove_conditional_event</a> from non_conn_mngr.o(.text.non_conn_mngr_remove_conditional_event) referenced from conn_mngr.o(.text.conn_mngr_disconnect)
 <LI><a href="#[b4]">non_conn_mngr_remove_conditional_event</a> from non_conn_mngr.o(.text.non_conn_mngr_remove_conditional_event) referenced from ll_intf.o(.text.ll_intf_clear_event)
 <LI><a href="#[b4]">non_conn_mngr_remove_conditional_event</a> from non_conn_mngr.o(.text.non_conn_mngr_remove_conditional_event) referenced from non_conn_mngr.o(.text.non_conn_mngr_scan_enable)
 <LI><a href="#[dd]">non_conn_mngr_scan_cbk</a> from non_conn_mngr.o(.text.non_conn_mngr_scan_cbk) referenced from non_conn_mngr.o(.text.non_conn_mngr_scan_enable)
 <LI><a href="#[12f]">optm_conn_param</a> from multi_role_greedy.o(.text.optm_conn_param) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
 <LI><a href="#[de]">osTimerHandler</a> from ll_sw_timer.o(.text.osTimerHandler) referenced from ll_sw_timer.o(.text.os_timer_init)
 <LI><a href="#[df]">prvcy_post_timer_evnt_clbk</a> from prvcy_mngr.o(.text.prvcy_post_timer_evnt_clbk) referenced from prvcy_mngr.o(.text.prvcy_mngr_add_rmv_clr_fw_reslvng_list)
 <LI><a href="#[ba]">queue_search_node</a> from ll_queue.o(.text.queue_search_node) referenced from event_manager.o(.text.emngr_del_event)
 <LI><a href="#[12d]">resume_scan</a> from multi_role_greedy.o(.text.resume_scan) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
 <LI><a href="#[125]">rmv_evnt</a> from multi_role_greedy.o(.text.rmv_evnt) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
 <LI><a href="#[129]">schdlr_nxt_cycle</a> from multi_role_greedy.o(.text.schdlr_nxt_cycle) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
 <LI><a href="#[126]">update_slot_durations</a> from multi_role_greedy.o(.text.update_slot_durations) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
 <LI><a href="#[12a]">updt_conn_evnt_durn</a> from multi_role_greedy.o(.text.updt_conn_evnt_durn) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
 <LI><a href="#[12e]">updt_radio_period</a> from multi_role_greedy.o(.text.updt_radio_period) referenced from multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[55]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_stm32wba55xx.o(.text)
<LI> stm32wbaxx_resethandler_mdk-arm.o(.text)
</UL>
<P><STRONG><a name="[13b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[13d]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[7c8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[7c9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[7ca]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[7cb]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[7cc]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[13e]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[177]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[140]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[142]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[144]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[145]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[146]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[7cd]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[148]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[14a]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[14b]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[14c]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[14e]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[150]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[152]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[153]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[154]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[156]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[7ce]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[158]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[15a]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[15c]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[15e]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[7cf]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[16a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[160]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[7d0]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[162]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[7d1]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[7d2]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[7d3]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[7d4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[7d5]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[164]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[7d6]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[7d7]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[165]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[7d8]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[7d9]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[7da]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[7db]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[7dc]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[7dd]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[7de]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[7df]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[7e0]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[7e1]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[7e2]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[7e3]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[7e4]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[13c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[7e5]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[167]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[169]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[7e6]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[16b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_APPE_Init &rArr; APP_BLE_Init &rArr; CAL_APP_Init &rArr; CAL_Init &rArr; aci_gatt_add_char &rArr; ACI_GATT_ADD_CHAR &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7e7]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[7]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>ADC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>FLASH_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>GPDMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>GPDMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>GPDMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>GPDMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>GPDMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>GPDMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>GTZC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>HSEM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>HSEM_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>ICACHE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>PKA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RAMCFG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>RCC_AUDIOSYNC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RCC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SAES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>WKUP_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[194]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_stm32wba55xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbaxx_resethandler_mdk-arm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Reset_Handler &rArr; is_boot_from_standby
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_boot_from_standby
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[7e8]"></a>CPUcontextSave</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32wbaxx_resethandler_mdk-arm.o(.text), UNUSED)

<P><STRONG><a name="[7e9]"></a>backup_system_register</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32wbaxx_resethandler_mdk-arm.o(.text), UNUSED)

<P><STRONG><a name="[7ea]"></a>restore_system_register</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32wbaxx_resethandler_mdk-arm.o(.text), UNUSED)

<P><STRONG><a name="[57a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Convert_ms2Tick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US_TO_SLP_TMR_PROTECTED
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_set
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_rco_isr
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_update_rco_timer
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_hw_rco_compnstn_enable
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_get_actual_sw_set_point
</UL>

<P><STRONG><a name="[7eb]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>vsnprintf</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>

<P><STRONG><a name="[171]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_Notification
</UL>

<P><STRONG><a name="[149]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[175]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[233]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Compare
</UL>

<P><STRONG><a name="[2e8]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_Cups_setpoint_p2_rw_SendNotification
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_Notification
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_Notification
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_opening_per_ReadUpdate
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_outlet_pres_pd2_ReadUpdate
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_inlet_pres_pd1_ReadUpdate
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p1t1_ReadUpdate
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p2t2_ReadUpdate
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_flowtemp_ReadUpdate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_opening_per_SendNotification
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_outlet_pres_pd2_SendNotification
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_inlet_pres_pd1_SendNotification
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p1t1_SendNotification
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p2t2_SendNotification
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_flowtemp_SendNotification
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Notification
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_Notification
</UL>

<P><STRONG><a name="[2e9]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_Notification
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_Notification
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_Restore
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Notification
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_Notification
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_GetRNG
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Get
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Add
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Core
</UL>

<P><STRONG><a name="[178]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[7ec]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[443]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Add
</UL>

<P><STRONG><a name="[7ed]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[7ee]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[7ef]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_set_8
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_param_req
</UL>

<P><STRONG><a name="[641]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[7f0]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2e6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_Cups_setpoint_p2_rw_SendNotification
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_Notification
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_Notification
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_opening_per_ReadUpdate
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_outlet_pres_pd2_ReadUpdate
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_inlet_pres_pd1_ReadUpdate
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p1t1_ReadUpdate
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p2t2_ReadUpdate
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_flowtemp_ReadUpdate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_opening_per_SendNotification
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_outlet_pres_pd2_SendNotification
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_inlet_pres_pd1_SendNotification
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p1t1_SendNotification
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p2t2_SendNotification
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_flowtemp_SendNotification
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Notification
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_Notification
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Rx_Callback
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StartTimer
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_process_evnt_clbk
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f5_Keys
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Update_Char_Value_Core
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Legacy_Start
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_init
</UL>

<P><STRONG><a name="[563]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_Init
</UL>

<P><STRONG><a name="[7f1]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[254]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BSP_SerialCmdExecute
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[7f2]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7f3]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7f4]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[180]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[172]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[173]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[17e]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[174]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[13f]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[170]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[57]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[181]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[151]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[184]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[14d]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[155]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[185]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[14f]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[157]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[141]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[7f5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[7f6]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[7f7]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[18b]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[18e]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[18f]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[159]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[15b]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[190]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[15d]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[15f]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[191]"></a>_c32rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c32rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[182]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c32rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[168]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[192]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c32rtomb
</UL>

<P><STRONG><a name="[163]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[18d]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[187]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7f8]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7f9]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>ACI_ATT_EXCHANGE_MTU_RESP_EVENT</STRONG> (Thumb, 28 bytes, Stack size 272 bytes, api.o(.text.ACI_ATT_EXCHANGE_MTU_RESP_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ACI_ATT_EXCHANGE_MTU_RESP_EVENT &rArr; OUTLINED_FUNCTION_28 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_28
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_40
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_att_exchange_mtu_resp
</UL>

<P><STRONG><a name="[199]"></a>ACI_GAP_ADDR_NOT_RESOLVED_EVENT</STRONG> (Thumb, 28 bytes, Stack size 272 bytes, api.o(.text.ACI_GAP_ADDR_NOT_RESOLVED_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ACI_GAP_ADDR_NOT_RESOLVED_EVENT &rArr; OUTLINED_FUNCTION_34 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_34
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_29
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_addr_not_resolved
</UL>

<P><STRONG><a name="[19d]"></a>ACI_GAP_ALLOW_REBOND</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, smp_pair.o(.text.ACI_GAP_ALLOW_REBOND))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ACI_GAP_ALLOW_REBOND
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Get_Remote_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_allow_rebond
</UL>

<P><STRONG><a name="[19f]"></a>ACI_GAP_AUTHORIZATION_REQ_EVENT</STRONG> (Thumb, 28 bytes, Stack size 272 bytes, api.o(.text.ACI_GAP_AUTHORIZATION_REQ_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ACI_GAP_AUTHORIZATION_REQ_EVENT &rArr; OUTLINED_FUNCTION_34 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_34
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_29
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_authorization_req
</UL>

<P><STRONG><a name="[1a0]"></a>ACI_GAP_BOND_LOST_EVENT</STRONG> (Thumb, 28 bytes, Stack size 272 bytes, api.o(.text.ACI_GAP_BOND_LOST_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ACI_GAP_BOND_LOST_EVENT &rArr; OUTLINED_FUNCTION_34 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_34
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_29
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_bond_lost
</UL>

<P><STRONG><a name="[1a1]"></a>ACI_GAP_CONFIGURE_FILTER_ACCEPT_LIST</STRONG> (Thumb, 56 bytes, Stack size 96 bytes, gap_priv.o(.text.ACI_GAP_CONFIGURE_FILTER_ACCEPT_LIST))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ACI_GAP_CONFIGURE_FILTER_ACCEPT_LIST &rArr; HCI_LE_CLEAR_FILTER_ACCEPT_LIST &rArr; ll_intf_le_clear_white_list &rArr; non_conn_mngr_add_rmv_clr_device_white_list &rArr; llhwc_lst_search &rArr; llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Sec_Record
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ADD_DEVICE_TO_FILTER_ACCEPT_LIST
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_CLEAR_FILTER_ACCEPT_LIST
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_configure_filter_accept_list
</UL>

<P><STRONG><a name="[1a5]"></a>ACI_GAP_DELETE_AD_TYPE</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, gap_adv.o(.text.ACI_GAP_DELETE_AD_TYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ACI_GAP_DELETE_AD_TYPE &rArr; GAP_Adv_Legacy_SetData &rArr; HCI_LE_SET_ADVERTISING_DATA &rArr; ll_intf_le_set_adv_data &rArr; non_conn_mngr_set_adv_data &rArr; prvcy_mngr_RPA_Regeneration &rArr; prvcy_mngr_addr_gen &rArr; llhwc_128_encrypt &rArr; llhwc_cmn_crypto &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Legacy_SetData
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_delete_ad_type
</UL>

<P><STRONG><a name="[1a7]"></a>ACI_GAP_INIT</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, gap.o(.text.ACI_GAP_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
<LI>Call Chain = ACI_GAP_INIT &rArr; GATT_Gap_Add_Service &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Gap_Add_Service
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Enable_Privacy
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LE_Event_Unmask
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
</UL>

<P><STRONG><a name="[1ab]"></a>ACI_GAP_KEYPRESS_NOTIFICATION_EVENT</STRONG> (Thumb, 44 bytes, Stack size 272 bytes, api.o(.text.ACI_GAP_KEYPRESS_NOTIFICATION_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ACI_GAP_KEYPRESS_NOTIFICATION_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_keypress_notification
</UL>

<P><STRONG><a name="[1ad]"></a>ACI_GAP_LIMITED_DISCOVERABLE_EVENT</STRONG> (Thumb, 36 bytes, Stack size 272 bytes, api.o(.text.ACI_GAP_LIMITED_DISCOVERABLE_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ACI_GAP_LIMITED_DISCOVERABLE_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_limited_discoverable
</UL>

<P><STRONG><a name="[1af]"></a>ACI_GAP_NUMERIC_COMPARISON_VALUE_CONFIRM_YESNO</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, smp_sc.o(.text.ACI_GAP_NUMERIC_COMPARISON_VALUE_CONFIRM_YESNO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ACI_GAP_NUMERIC_COMPARISON_VALUE_CONFIRM_YESNO
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Get_Remote_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_confirm_yesno
</UL>

<P><STRONG><a name="[1b0]"></a>ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT</STRONG> (Thumb, 66 bytes, Stack size 272 bytes, api.o(.text.ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_numeric_comparison_value
</UL>

<P><STRONG><a name="[1b1]"></a>ACI_GAP_PAIRING_COMPLETE_EVENT</STRONG> (Thumb, 32 bytes, Stack size 272 bytes, api.o(.text.ACI_GAP_PAIRING_COMPLETE_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ACI_GAP_PAIRING_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_43
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_pairing_complete
</UL>

<P><STRONG><a name="[1b3]"></a>ACI_GAP_PAIRING_REQUEST_EVENT</STRONG> (Thumb, 32 bytes, Stack size 272 bytes, api.o(.text.ACI_GAP_PAIRING_REQUEST_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ACI_GAP_PAIRING_REQUEST_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_43
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_pairing_request
</UL>

<P><STRONG><a name="[1b4]"></a>ACI_GAP_PASS_KEY_REQ_EVENT</STRONG> (Thumb, 28 bytes, Stack size 272 bytes, api.o(.text.ACI_GAP_PASS_KEY_REQ_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ACI_GAP_PASS_KEY_REQ_EVENT &rArr; OUTLINED_FUNCTION_34 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_34
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_29
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_pass_key_req
</UL>

<P><STRONG><a name="[1b5]"></a>ACI_GAP_PASS_KEY_RESP</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, smp_pair.o(.text.ACI_GAP_PASS_KEY_RESP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ACI_GAP_PASS_KEY_RESP
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Get_Remote_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_resp
</UL>

<P><STRONG><a name="[1b6]"></a>ACI_GAP_PROC_COMPLETE_EVENT</STRONG> (Thumb, 56 bytes, Stack size 280 bytes, api.o(.text.ACI_GAP_PROC_COMPLETE_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ACI_GAP_PROC_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_proc_complete
</UL>

<P><STRONG><a name="[1b8]"></a>ACI_GAP_SET_AUTHENTICATION_REQUIREMENT</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, smp.o(.text.ACI_GAP_SET_AUTHENTICATION_REQUIREMENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ACI_GAP_SET_AUTHENTICATION_REQUIREMENT &rArr; SMP_Ongoing_Pairing
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Ongoing_Pairing
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_authentication_requirement
</UL>

<P><STRONG><a name="[1ba]"></a>ACI_GAP_SET_DISCOVERABLE</STRONG> (Thumb, 36 bytes, Stack size 80 bytes, gap_adv.o(.text.ACI_GAP_SET_DISCOVERABLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = ACI_GAP_SET_DISCOVERABLE &rArr; OUTLINED_FUNCTION_3 &rArr; GAP_Adv_Legacy_Start &rArr; HCI_LE_SET_ADVERTISING_ENABLE &rArr; ll_intf_le_set_adv_enable &rArr; non_conn_mngr_adv_enable &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
</UL>

<P><STRONG><a name="[58f]"></a>ACI_GAP_SET_IO_CAPABILITY</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, smp.o(.text.ACI_GAP_SET_IO_CAPABILITY))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability
</UL>

<P><STRONG><a name="[1be]"></a>ACI_GAP_SET_NON_DISCOVERABLE</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gap_adv.o(.text.ACI_GAP_SET_NON_DISCOVERABLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = ACI_GAP_SET_NON_DISCOVERABLE &rArr; HCI_LE_SET_ADVERTISING_ENABLE &rArr; ll_intf_le_set_adv_enable &rArr; non_conn_mngr_adv_enable &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Legacy_Reset_State
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SET_ADVERTISING_ENABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
</UL>

<P><STRONG><a name="[1c1]"></a>ACI_GAP_UPDATE_ADV_DATA</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, gap_adv.o(.text.ACI_GAP_UPDATE_ADV_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ACI_GAP_UPDATE_ADV_DATA &rArr; GAP_Adv_Legacy_SetData &rArr; HCI_LE_SET_ADVERTISING_DATA &rArr; ll_intf_le_set_adv_data &rArr; non_conn_mngr_set_adv_data &rArr; prvcy_mngr_RPA_Regeneration &rArr; prvcy_mngr_addr_gen &rArr; llhwc_128_encrypt &rArr; llhwc_cmn_crypto &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Legacy_SetData
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
</UL>

<P><STRONG><a name="[1c2]"></a>ACI_GATT_ADD_CHAR</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, gatt_server.o(.text.ACI_GATT_ADD_CHAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + Unknown Stack Size
<LI>Call Chain = ACI_GATT_ADD_CHAR &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Core
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_UUID
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>

<P><STRONG><a name="[1c5]"></a>ACI_GATT_ADD_SERVICE</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, gatt_server.o(.text.ACI_GATT_ADD_SERVICE))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = ACI_GATT_ADD_SERVICE &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_Remove
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_Size
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_Insert
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notify_Service_Change
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Server_Db_Check
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_INIT
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Gap_Add_Service
</UL>

<P><STRONG><a name="[1cd]"></a>ACI_GATT_ALLOW_READ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gatt_server.o(.text.ACI_GATT_ALLOW_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = ACI_GATT_ALLOW_READ &rArr; GATT_Read_Permit_Resp &rArr; ATT_Build_Read_By_Type_Rsp &rArr; GATT_Read_Multi_Permit_Req_Event &rArr; EVT_aci_gatt_read_multi_permit_req &rArr; ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Permit_Resp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_allow_read
</UL>

<P><STRONG><a name="[1cf]"></a>ACI_GATT_ATTRIBUTE_MODIFIED_EVENT</STRONG> (Thumb, 38 bytes, Stack size 280 bytes, api.o(.text.ACI_GATT_ATTRIBUTE_MODIFIED_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ACI_GATT_ATTRIBUTE_MODIFIED_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_GATT_Attribute_Modified
</UL>

<P><STRONG><a name="[1d3]"></a>ACI_GATT_CONFIRM_INDICATION</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gatt_client.o(.text.ACI_GATT_CONFIRM_INDICATION))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ACI_GATT_CONFIRM_INDICATION &rArr; GATT_Send_Packet &rArr; GATT_Send_Packet_Once &rArr; L2C_Send_Data &rArr; LECTRL_SendAclDataFromHostToController &rArr; LECTRL_SendAclDataToLL &rArr; ll_intf_acl_data_from_host_to_cntrlr &rArr; conn_mngr_send_pkt &rArr; evnt_schdlr_add_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Confirmation
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_New_Client_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_confirm_indication
</UL>

<P><STRONG><a name="[7f]"></a>ACI_GATT_INDICATION_EVENT</STRONG> (Thumb, 46 bytes, Stack size 280 bytes, api.o(.text.ACI_GATT_INDICATION_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ACI_GATT_INDICATION_EVENT &rArr; OUTLINED_FUNCTION_5 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_61
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_44
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
</UL>
<BR>[Address Reference Count : 1]<UL><LI> host_srv_events.o(.text.EVT_GATT_Indication)
</UL>
<P><STRONG><a name="[1db]"></a>ACI_GATT_INDICATION_EXT_EVENT</STRONG> (Thumb, 38 bytes, Stack size 280 bytes, api.o(.text.ACI_GATT_INDICATION_EXT_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ACI_GATT_INDICATION_EXT_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_GATT_Notif_Generic
</UL>

<P><STRONG><a name="[1dc]"></a>ACI_GATT_INIT</STRONG> (Thumb, 176 bytes, Stack size 80 bytes, gatt_server.o(.text.ACI_GATT_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = ACI_GATT_INIT &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_UPDATE_CHAR_VALUE
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ADD_SERVICE
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Core
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
</UL>

<P><STRONG><a name="[1de]"></a>ACI_GATT_NOTIFICATION_COMPLETE_EVENT</STRONG> (Thumb, 32 bytes, Stack size 272 bytes, api.o(.text.ACI_GATT_NOTIFICATION_COMPLETE_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gatt_notification_complete
</UL>

<P><STRONG><a name="[80]"></a>ACI_GATT_NOTIFICATION_EVENT</STRONG> (Thumb, 46 bytes, Stack size 280 bytes, api.o(.text.ACI_GATT_NOTIFICATION_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ACI_GATT_NOTIFICATION_EVENT &rArr; OUTLINED_FUNCTION_5 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_61
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_44
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
</UL>
<BR>[Address Reference Count : 1]<UL><LI> host_srv_events.o(.text.EVT_GATT_Notification)
</UL>
<P><STRONG><a name="[1e0]"></a>ACI_GATT_NOTIFICATION_EXT_EVENT</STRONG> (Thumb, 38 bytes, Stack size 280 bytes, api.o(.text.ACI_GATT_NOTIFICATION_EXT_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ACI_GATT_NOTIFICATION_EXT_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_GATT_Notif_Generic
</UL>

<P><STRONG><a name="[1e1]"></a>ACI_GATT_PREPARE_WRITE_PERMIT_REQ_EVENT</STRONG> (Thumb, 44 bytes, Stack size 280 bytes, api.o(.text.ACI_GATT_PREPARE_WRITE_PERMIT_REQ_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ACI_GATT_PREPARE_WRITE_PERMIT_REQ_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gatt_prepare_write_permit_req
</UL>

<P><STRONG><a name="[1e4]"></a>ACI_GATT_PROC_COMPLETE_EVENT</STRONG> (Thumb, 36 bytes, Stack size 272 bytes, api.o(.text.ACI_GATT_PROC_COMPLETE_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ACI_GATT_PROC_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gatt_proc_complete
</UL>

<P><STRONG><a name="[1e5]"></a>ACI_GATT_PROC_TIMEOUT_EVENT</STRONG> (Thumb, 32 bytes, Stack size 272 bytes, api.o(.text.ACI_GATT_PROC_TIMEOUT_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ACI_GATT_PROC_TIMEOUT_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gatt_proc_timeout
</UL>

<P><STRONG><a name="[1e6]"></a>ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT</STRONG> (Thumb, 84 bytes, Stack size 280 bytes, api.o(.text.ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gatt_read_multi_permit_req
</UL>

<P><STRONG><a name="[1e7]"></a>ACI_GATT_READ_PERMIT_REQ_EVENT</STRONG> (Thumb, 54 bytes, Stack size 272 bytes, api.o(.text.ACI_GATT_READ_PERMIT_REQ_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ACI_GATT_READ_PERMIT_REQ_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_40
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gatt_read_permit_req
</UL>

<P><STRONG><a name="[1e8]"></a>ACI_GATT_SERVER_CONFIRMATION_EVENT</STRONG> (Thumb, 32 bytes, Stack size 272 bytes, api.o(.text.ACI_GATT_SERVER_CONFIRMATION_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ACI_GATT_SERVER_CONFIRMATION_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gatt_server_confirmation
</UL>

<P><STRONG><a name="[1e9]"></a>ACI_GATT_TX_POOL_AVAILABLE_EVENT</STRONG> (Thumb, 28 bytes, Stack size 272 bytes, api.o(.text.ACI_GATT_TX_POOL_AVAILABLE_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ACI_GATT_TX_POOL_AVAILABLE_EVENT &rArr; OUTLINED_FUNCTION_28 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_28
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_40
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gatt_tx_pool_available
</UL>

<P><STRONG><a name="[1dd]"></a>ACI_GATT_UPDATE_CHAR_VALUE</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, gatt_server.o(.text.ACI_GATT_UPDATE_CHAR_VALUE))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Search_Handle
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Update_Char_Value_Core
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Search_Service_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_INIT
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Gap_Add_Service
</UL>

<P><STRONG><a name="[1ed]"></a>ACI_GATT_WRITE_PERMIT_REQ_EVENT</STRONG> (Thumb, 56 bytes, Stack size 280 bytes, api.o(.text.ACI_GATT_WRITE_PERMIT_REQ_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ACI_GATT_WRITE_PERMIT_REQ_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gatt_write_permit_req
</UL>

<P><STRONG><a name="[1ee]"></a>ACI_HAL_END_OF_RADIO_ACTIVITY_EVENT</STRONG> (Thumb, 76 bytes, Stack size 272 bytes, api.o(.text.ACI_HAL_END_OF_RADIO_ACTIVITY_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ACI_HAL_END_OF_RADIO_ACTIVITY_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_UpperLayerCallback
</UL>

<P><STRONG><a name="[1ef]"></a>ACI_HAL_SET_RADIO_ACTIVITY_MASK</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, le_ctrl.o(.text.ACI_HAL_SET_RADIO_ACTIVITY_MASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ACI_HAL_SET_RADIO_ACTIVITY_MASK &rArr; ll_intf_set_end_of_activity_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_set_end_of_activity_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
</UL>

<P><STRONG><a name="[1f1]"></a>ACI_HAL_SET_TX_POWER_LEVEL</STRONG> (Thumb, 140 bytes, Stack size 104 bytes, le_ctrl.o(.text.ACI_HAL_SET_TX_POWER_LEVEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ACI_HAL_SET_TX_POWER_LEVEL &rArr; ll_intf_get_link_status &rArr; conn_mngr_get_link_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_get_concurrent_state_machines_num
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_get_link_status
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_write_tx_pwr
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_set_conn_tx_power_level
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
</UL>

<P><STRONG><a name="[1f6]"></a>ACI_HAL_WRITE_CONFIG_DATA</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, api.o(.text.ACI_HAL_WRITE_CONFIG_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ACI_HAL_WRITE_CONFIG_DATA &rArr; ACI_WRITE_CONFIG_DATA &rArr; ll_intf_write_bd_addr &rArr; db_set_bd_address &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_WRITE_CONFIG_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
</UL>

<P><STRONG><a name="[1f8]"></a>ACI_L2CAP_COMMAND_REJECT_EVENT</STRONG> (Thumb, 74 bytes, Stack size 280 bytes, api.o(.text.ACI_L2CAP_COMMAND_REJECT_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ACI_L2CAP_COMMAND_REJECT_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_l2cap_command_reject
</UL>

<P><STRONG><a name="[1f9]"></a>ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, l2cap_cpu.o(.text.ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ &rArr; L2C_Send_Signaling_Packet &rArr; L2C_Send_Packet &rArr; L2C_Send_Data &rArr; LECTRL_SendAclDataFromHostToController &rArr; LECTRL_SendAclDataToLL &rArr; ll_intf_acl_data_from_host_to_cntrlr &rArr; conn_mngr_send_pkt &rArr; evnt_schdlr_add_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Start_Timer
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Signaling_Packet
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Get_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_parameter_update_req
</UL>

<P><STRONG><a name="[1fd]"></a>ACI_L2CAP_CONNECTION_UPDATE_REQ_EVENT</STRONG> (Thumb, 84 bytes, Stack size 272 bytes, api.o(.text.ACI_L2CAP_CONNECTION_UPDATE_REQ_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ACI_L2CAP_CONNECTION_UPDATE_REQ_EVENT &rArr; OUTLINED_FUNCTION_50 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_50
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_47
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_l2cap_connection_update_req
</UL>

<P><STRONG><a name="[200]"></a>ACI_L2CAP_CONNECTION_UPDATE_RESP_EVENT</STRONG> (Thumb, 28 bytes, Stack size 272 bytes, api.o(.text.ACI_L2CAP_CONNECTION_UPDATE_RESP_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ACI_L2CAP_CONNECTION_UPDATE_RESP_EVENT &rArr; OUTLINED_FUNCTION_28 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_28
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_40
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_l2cap_connection_update_resp
</UL>

<P><STRONG><a name="[201]"></a>ACI_L2CAP_PROC_TIMEOUT_EVENT</STRONG> (Thumb, 58 bytes, Stack size 280 bytes, api.o(.text.ACI_L2CAP_PROC_TIMEOUT_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ACI_L2CAP_PROC_TIMEOUT_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_l2cap_proc_timeout
</UL>

<P><STRONG><a name="[202]"></a>ACI_WARNING_EVENT</STRONG> (Thumb, 52 bytes, Stack size 280 bytes, api.o(.text.ACI_WARNING_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_warning
</UL>

<P><STRONG><a name="[1f7]"></a>ACI_WRITE_CONFIG_DATA</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, le_ctrl.o(.text.ACI_WRITE_CONFIG_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ACI_WRITE_CONFIG_DATA &rArr; ll_intf_write_bd_addr &rArr; db_set_bd_address &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_write_bd_addr
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgData_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_HAL_WRITE_CONFIG_DATA
</UL>

<P><STRONG><a name="[207]"></a>ACL_Append</STRONG> (Thumb, 140 bytes, Stack size 72 bytes, acl.o(.text.ACL_Append))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ACL_Append &rArr; ACL_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rx_Data_Handler
</UL>

<P><STRONG><a name="[209]"></a>ACL_Cmp_Data</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, acl.o(.text.ACL_Cmp_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ACL_Cmp_Data &rArr; ble_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[20b]"></a>ACL_Copy_Data</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, acl.o(.text.ACL_Copy_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ACL_Copy_Data &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Prepare_Write_Rsp
</UL>

<P><STRONG><a name="[25a]"></a>ACL_Get_Count</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, acl.o(.text.ACL_Get_Count))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Prepare_Write_Rsp
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Exec_Write_Rsp
</UL>

<P><STRONG><a name="[20c]"></a>ACL_Get_Data</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, acl.o(.text.ACL_Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ACL_Get_Data &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gatt_prepare_write_permit_req
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gatt_write_permit_req
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_GATT_Notif_Generic
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Pairing_DHKey_Check_Rx_Handler
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Pairing_Public_Key_Rx_Handler
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Multi_Rsp
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Write_Rsp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Handle_Write_Cmd
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_SendAclDataToLL
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Validate_Signed_Packet
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Get_UUID128_From_Read_By_Type_Req
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Exec_Write_Rsp
</UL>

<P><STRONG><a name="[3db]"></a>ACL_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, acl.o(.text.ACL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ACL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RESET
</UL>

<P><STRONG><a name="[363]"></a>ACL_List_Insert_Head</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, acl_list.o(.text.ACL_List_Insert_Head))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
</UL>

<P><STRONG><a name="[25b]"></a>ACL_List_Insert_Tail</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, acl_list.o(.text.ACL_List_Insert_Tail))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_L2cap_Data_Handler
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Prepare_Write_Rsp
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_SendAclDataFromHostToController
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_SendAclDataToLL
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Exec_Write_Rsp
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_L2cap_Data_Handler
</UL>

<P><STRONG><a name="[259]"></a>ACL_List_Remove</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, acl_list.o(.text.ACL_List_Remove))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_Process
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Flush_Rx_Packets
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Prepare_Write_Rsp
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Permit_Resp
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Exec_Write_Rsp
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Flush_Acl_List
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_AclPacketTransmitted
</UL>

<P><STRONG><a name="[20d]"></a>ACL_MemAlloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, acl.o(.text.ACL_MemAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ACL_MemAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Assign
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RESET
</UL>

<P><STRONG><a name="[20e]"></a>ACL_New</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, acl.o(.text.ACL_New))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ACL_New &rArr; ACL_Alloc &rArr; ACL_Available_Blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_New_PDU
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_New_PDU
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_UpperLayerCallback
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Packet
</UL>

<P><STRONG><a name="[20f]"></a>ACL_Release</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, acl.o(.text.ACL_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ACL_Release &rArr; ACL_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Send_PDU
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Flush_Rx_Packets
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_L2cap_Data_Handler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Permit_Resp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Update_Char_Value_Core
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_UpperLayerCallback
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Packet
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Discard_Recomb_Data
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Reset_Bearer
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Exec_Write_Rsp
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_L2cap_Data_Handler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Flush_Acl_List
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rx_Data_Handler
</UL>

<P><STRONG><a name="[210]"></a>ACL_Resize</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, acl.o(.text.ACL_Resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ACL_Resize &rArr; ACL_Alloc &rArr; ACL_Available_Blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Free
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Multi_Rsp
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Blob_Rsp
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Rsp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_By_Type_Rsp
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Prepare_Write_Rsp
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_By_Grp_Type_Rsp
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Find_By_Type_Val_Rsp
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Find_Info_Rsp
</UL>

<P><STRONG><a name="[211]"></a>ACL_Set_Data</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, acl.o(.text.ACL_Set_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ACL_Set_Data &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Send_Pairing_DHKey_Check
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Send_Pairing_Public_Key
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Multi_Rsp
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Blob_Rsp
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Rsp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_By_Type_Rsp
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Notif_Or_Ind
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_UpperLayerCallback
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Packet
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_type_val_entry
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_By_Grp_Type_Rsp
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Find_Info_Rsp
</UL>

<P><STRONG><a name="[212]"></a>ACL_Tx_Pool_Size</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, acl.o(.text.ACL_Tx_Pool_Size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ACL_Tx_Pool_Size &rArr; ACL_Available_Blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Available_Blocks
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Server_Db_Check
</UL>

<P><STRONG><a name="[213]"></a>ADCCTRL_Init</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, adc_ctrl.o(.text.ADCCTRL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADCCTRL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_MutexRelease
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_MutexTake
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_DEBUG_SIGNAL_RESET
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_DEBUG_SIGNAL_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[217]"></a>ADCCTRL_MutexRelease</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adc_ctrl.o(.text.ADCCTRL_MutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_RequestTemperature
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_RegisterHandle
</UL>

<P><STRONG><a name="[214]"></a>ADCCTRL_MutexTake</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adc_ctrl.o(.text.ADCCTRL_MutexTake))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_RequestTemperature
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_RegisterHandle
</UL>

<P><STRONG><a name="[218]"></a>ADCCTRL_RegisterHandle</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, adc_ctrl.o(.text.ADCCTRL_RegisterHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADCCTRL_RegisterHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_MutexRelease
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_MutexTake
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPMEAS_Init
</UL>

<P><STRONG><a name="[219]"></a>ADCCTRL_RequestIpState</STRONG> (Thumb, 518 bytes, Stack size 32 bytes, adc_ctrl.o(.text.ADCCTRL_RequestIpState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADCCTRL_RequestIpState
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_DEBUG_SIGNAL_RESET
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_DEBUG_SIGNAL_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPMEAS_RequestTemperatureMeasurement
</UL>

<P><STRONG><a name="[21a]"></a>ADCCTRL_RequestTemperature</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, adc_ctrl.o(.text.ADCCTRL_RequestTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ADCCTRL_RequestTemperature &rArr; AdcConfigure &rArr; LL_ADC_REG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_MutexRelease
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_MutexTake
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcReadRaw
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfigure
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_DEBUG_SIGNAL_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPMEAS_RequestTemperatureMeasurement
</UL>

<P><STRONG><a name="[21d]"></a>AMM_Alloc</STRONG> (Thumb, 516 bytes, Stack size 40 bytes, advanced_memory_manager.o(.text.AMM_Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AMM_Alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECB_Indication
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Start
</UL>

<P><STRONG><a name="[9c]"></a>AMM_BackgroundProcess</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, advanced_memory_manager.o(.text.AMM_BackgroundProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AMM_BackgroundProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.MX_APPE_Init)
</UL>
<P><STRONG><a name="[221]"></a>AMM_Free</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, advanced_memory_manager.o(.text.AMM_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AMM_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_ProcessRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_UserEvtRx
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Stop
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Background
</UL>

<P><STRONG><a name="[223]"></a>AMM_Init</STRONG> (Thumb, 574 bytes, Stack size 40 bytes, advanced_memory_manager.o(.text.AMM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AMM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_RegisterBasicMemoryManager
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[222]"></a>AMM_ProcessRequest</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_entry.o(.text.AMM_ProcessRequest))
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_Free
</UL>

<P><STRONG><a name="[224]"></a>AMM_RegisterBasicMemoryManager</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_entry.o(.text.AMM_RegisterBasicMemoryManager))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_Init
</UL>

<P><STRONG><a name="[22a]"></a>APP_BLE_HostNvmStore</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_ble.o(.text.APP_BLE_HostNvmStore))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = APP_BLE_HostNvmStore &rArr; SNVMA_Write &rArr; StartFlashWrite &rArr; FM_Write &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmStore
</UL>

<P><STRONG><a name="[22c]"></a>APP_BLE_Init</STRONG> (Thumb, 2480 bytes, Stack size 120 bytes, app_ble.o(.text.APP_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488 + Unknown Stack Size
<LI>Call Chain = APP_BLE_Init &rArr; CAL_APP_Init &rArr; CAL_Init &rArr; aci_gatt_add_char &rArr; ACI_GATT_ADD_CHAR &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Procedure_Gap_Peripheral
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_APP_Init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_APP_Init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_APP_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_APP_Init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_APP_Init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_APP_Init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_Init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_local_version_information
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_configure_filter_accept_list
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_authentication_requirement
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_default_phy
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStack_Init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_Restore
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_Register
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_StartWithPeriod
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Create
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP_Read
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[248]"></a>APP_BLE_Procedure_Gap_Peripheral</STRONG> (Thumb, 472 bytes, Stack size 48 bytes, app_ble.o(.text.APP_BLE_Procedure_Gap_Peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = APP_BLE_Procedure_Gap_Peripheral &rArr; aci_gap_set_discoverable &rArr; ACI_GAP_SET_DISCOVERABLE &rArr; OUTLINED_FUNCTION_3 &rArr; GAP_Adv_Legacy_Start &rArr; HCI_LE_SET_ADVERTISING_ENABLE &rArr; ll_intf_le_set_adv_enable &rArr; non_conn_mngr_adv_enable &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_parameter_update_req
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_delete_ad_type
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[24f]"></a>APP_BSP_ButtonInit</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, app_bsp.o(.text.APP_BSP_ButtonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = APP_BSP_ButtonInit &rArr; BSP_PB_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Create
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[251]"></a>APP_BSP_LedInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_bsp.o(.text.APP_BSP_LedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = APP_BSP_LedInit &rArr; BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[253]"></a>APP_BSP_SerialCmdExecute</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, app_bsp.o(.text.APP_BSP_SerialCmdExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = APP_BSP_SerialCmdExecute &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_CMD_Interpreter_CmdExecute
</UL>

<P><STRONG><a name="[43c]"></a>APP_DEBUG_SIGNAL_RESET</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_debug.o(.text.APP_DEBUG_SIGNAL_RESET))
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[433]"></a>APP_DEBUG_SIGNAL_SET</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_debug.o(.text.APP_DEBUG_SIGNAL_SET))
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[1d5]"></a>ATT_Build_Confirmation</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gatt_client_att.o(.text.ATT_Build_Confirmation))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_CONFIRM_INDICATION
</UL>

<P><STRONG><a name="[25c]"></a>ATT_Build_Error_Rsp</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gatt_server_att.o(.text.ATT_Build_Error_Rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ATT_Build_Error_Rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Multi_Rsp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_By_Type_Rsp
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Prepare_Write_Rsp
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Permit_Resp
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Exec_Write_Rsp
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_By_Grp_Type_Rsp
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Find_By_Type_Val_Rsp
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Find_Info_Rsp
</UL>

<P><STRONG><a name="[255]"></a>ATT_Build_Exchg_Mtu_Rsp</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, gatt_server_att.o(.text.ATT_Build_Exchg_Mtu_Rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ATT_Build_Exchg_Mtu_Rsp &rArr; EVT_aci_att_exchange_mtu_resp &rArr; ACI_ATT_EXCHANGE_MTU_RESP_EVENT &rArr; OUTLINED_FUNCTION_28 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_att_exchange_mtu_resp
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
</UL>

<P><STRONG><a name="[258]"></a>ATT_Build_Exec_Write_Rsp</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, gatt_server_att.o(.text.ATT_Build_Exec_Write_Rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = ATT_Build_Exec_Write_Rsp &rArr; GATT_Attribute_Modified_Event &rArr; EVT_GATT_Attribute_Modified &rArr; ACI_GATT_ATTRIBUTE_MODIFIED_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Get_Data
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Error_Rsp
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Attr_Val
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Release
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_List_Insert_Tail
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_List_Remove
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Get_Count
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Find_Char_Attribute
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Attribute_Modified_Event
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
</UL>

<P><STRONG><a name="[261]"></a>ATT_Build_Find_By_Type_Val_Rsp</STRONG> (Thumb, 480 bytes, Stack size 72 bytes, gatt_server_att.o(.text.ATT_Build_Find_By_Type_Val_Rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ATT_Build_Find_By_Type_Val_Rsp &rArr; ATT_fill_type_val_entry &rArr; ACL_Set_Data &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Find_Srv_Owner_Of_Handle
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Error_Rsp
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Attr_Val
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_type_val_entry
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Resize
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
</UL>

<P><STRONG><a name="[266]"></a>ATT_Build_Find_Info_Rsp</STRONG> (Thumb, 416 bytes, Stack size 56 bytes, gatt_server_att.o(.text.ATT_Build_Find_Info_Rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ATT_Build_Find_Info_Rsp &rArr; ACL_Resize &rArr; ACL_Alloc &rArr; ACL_Available_Blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Set_Data
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Find_Srv_Owner_Of_Handle
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Error_Rsp
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Resize
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
</UL>

<P><STRONG><a name="[268]"></a>ATT_Build_Notif_Or_Ind</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gatt_server_att.o(.text.ATT_Build_Notif_Or_Ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ATT_Build_Notif_Or_Ind &rArr; ACL_Set_Data &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Set_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Update_Char_Value_Core
</UL>

<P><STRONG><a name="[269]"></a>ATT_Build_Prepare_Write_Rsp</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, gatt_server_att.o(.text.ATT_Build_Prepare_Write_Rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = ATT_Build_Prepare_Write_Rsp &rArr; EVT_aci_gatt_prepare_write_permit_req &rArr; ACI_GATT_PREPARE_WRITE_PERMIT_REQ_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gatt_prepare_write_permit_req
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Error_Rsp
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Evt_Handle
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_List_Insert_Tail
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_List_Remove
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Copy_Data
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Get_Count
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Find_Attribute_To_Write
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Resize
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
</UL>

<P><STRONG><a name="[26d]"></a>ATT_Build_Read_Blob_Rsp</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, gatt_server_att.o(.text.ATT_Build_Read_Blob_Rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = ATT_Build_Read_Blob_Rsp &rArr; GATT_Read_Permit_Req_Event &rArr; EVT_aci_gatt_read_permit_req &rArr; ACI_GATT_READ_PERMIT_REQ_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Set_Data
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Find_Srv_Owner_Of_Handle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Search_Handle
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Attr_Val
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Permit_Req_Event
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Resize
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Permit_Resp
</UL>

<P><STRONG><a name="[26f]"></a>ATT_Build_Read_By_Grp_Type_Rsp</STRONG> (Thumb, 436 bytes, Stack size 64 bytes, gatt_server_att.o(.text.ATT_Build_Read_By_Grp_Type_Rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ATT_Build_Read_By_Grp_Type_Rsp &rArr; ATT_Get_UUID128_From_Read_By_Type_Req &rArr; ACL_Get_Data &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Set_Data
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Error_Rsp
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Get_UUID128_From_Read_By_Type_Req
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Resize
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
</UL>

<P><STRONG><a name="[271]"></a>ATT_Build_Read_By_Type_Rsp</STRONG> (Thumb, 732 bytes, Stack size 360 bytes, gatt_server_att.o(.text.ATT_Build_Read_By_Type_Rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = ATT_Build_Read_By_Type_Rsp &rArr; GATT_Read_Multi_Permit_Req_Event &rArr; EVT_aci_gatt_read_multi_permit_req &rArr; ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Set_Data
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Find_Srv_Owner_Of_Handle
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Error_Rsp
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Attr_Val
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Multi_Permit_Req_Event
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Get_UUID128_From_Read_By_Type_Req
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Resize
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Permit_Resp
</UL>

<P><STRONG><a name="[273]"></a>ATT_Build_Read_Multi_Rsp</STRONG> (Thumb, 328 bytes, Stack size 304 bytes, gatt_server_att.o(.text.ATT_Build_Read_Multi_Rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = ATT_Build_Read_Multi_Rsp &rArr; GATT_Read_Multi_Permit_Req_Event &rArr; EVT_aci_gatt_read_multi_permit_req &rArr; ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Get_Data
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Set_Data
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Find_Srv_Owner_Of_Handle
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Error_Rsp
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Search_Handle
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Attr_Val
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Multi_Permit_Req_Event
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Resize
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Permit_Resp
</UL>

<P><STRONG><a name="[274]"></a>ATT_Build_Read_Rsp</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, gatt_server_att.o(.text.ATT_Build_Read_Rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = ATT_Build_Read_Rsp &rArr; GATT_Read_Permit_Req_Event &rArr; EVT_aci_gatt_read_permit_req &rArr; ACI_GATT_READ_PERMIT_REQ_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Set_Data
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Find_Srv_Owner_Of_Handle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Search_Handle
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Attr_Val
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Permit_Req_Event
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Resize
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Permit_Resp
</UL>

<P><STRONG><a name="[275]"></a>ATT_Build_Write_Rsp</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, gatt_server_att.o(.text.ATT_Build_Write_Rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = ATT_Build_Write_Rsp &rArr; GATT_Attribute_Modified_Event &rArr; EVT_GATT_Attribute_Modified &rArr; ACI_GATT_ATTRIBUTE_MODIFIED_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Get_Data
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Attr_Val
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Attribute_Modified_Event
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Permit_Req_Event
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Find_Attribute_To_Write
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
</UL>

<P><STRONG><a name="[277]"></a>ATT_Check_Perm</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, gatt_server_att.o(.text.ATT_Check_Perm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ATT_Check_Perm &rArr; SMP_Get_Sec_Status &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Get_Sec_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Update_Char_Value_Core
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Find_Attribute_To_Write
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[279]"></a>ATT_Handle_Write_Cmd</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, gatt_server_att.o(.text.ATT_Handle_Write_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = ATT_Handle_Write_Cmd &rArr; GATT_Attribute_Modified_Event &rArr; EVT_GATT_Attribute_Modified &rArr; ACI_GATT_ATTRIBUTE_MODIFIED_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Get_Data
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Attr_Val
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Validate_Signed_Packet
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Attribute_Modified_Event
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Permit_Req_Event
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Find_Attribute_To_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
</UL>

<P><STRONG><a name="[281]"></a>BAES_CmacCompute</STRONG> (Thumb, 584 bytes, Stack size 72 bytes, baes_cmac.o(.text.BAES_CmacCompute))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BAES_CmacCompute
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AES_Disable
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AES_Crypt
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesCmacCompute
</UL>

<P><STRONG><a name="[284]"></a>BAES_CmacSetKey</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, baes_cmac.o(.text.BAES_CmacSetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BAES_CmacSetKey &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AES_SetKey
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AES_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesCmacSetKey
</UL>

<P><STRONG><a name="[287]"></a>BAES_EcbCrypt</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, baes_ecb.o(.text.BAES_EcbCrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AES_Disable
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AES_Crypt
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AES_SetKey
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AES_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesEcbEncrypt
</UL>

<P><STRONG><a name="[288]"></a>BAES_Reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, baes_ecb.o(.text.BAES_Reset))
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AES_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_Init
</UL>

<P><STRONG><a name="[289]"></a>BLECB_Indication</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, app_ble.o(.text.BLECB_Indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_Alloc
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>

<P><STRONG><a name="[28a]"></a>BLEPLATCB_PkaComplete</STRONG> (Thumb, 80 bytes, Stack size 80 bytes, pka.o(.text.BLEPLATCB_PkaComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = BLEPLATCB_PkaComplete &rArr; LECTRL_LeGeneratedDHKeyCompleteEvent &rArr; SMP_Generate_DHkey_Complete_Handler &rArr; SMP_Send_Pairing_Failed &rArr; SMP_Pairing_Failed &rArr; EVT_aci_gap_pairing_complete &rArr; ACI_GAP_PAIRING_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_PkaReadDhKey
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_PkaReadP256Key
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeGeneratedDHKeyCompleteEvent
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeReadLocalP256PublicKeyCompleteEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKACB_Complete
</UL>

<P><STRONG><a name="[290]"></a>BLEPLATCB_TimerExpiry</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, blestack_main.o(.text.BLEPLATCB_TimerExpiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = BLEPLATCB_TimerExpiry &rArr; L2C_Timeout_Cb &rArr; EVT_aci_l2cap_proc_timeout &rArr; ACI_L2CAP_PROC_TIMEOUT_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Rep_Attempts_Timeout_Cb
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Timeout_Cb
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Timeout_Cb
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Timeout_Cb
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Scan_Disc_Proc_Timeout_Cb
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Lim_Disc_Timeout_Cb
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Background
</UL>

<P><STRONG><a name="[297]"></a>BLEPLAT_AesCmacCompute</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bleplat.o(.text.BLEPLAT_AesCmacCompute))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BLEPLAT_AesCmacCompute &rArr; BAES_CmacCompute
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAES_CmacCompute
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Compute_Database_Hash
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Cmac
</UL>

<P><STRONG><a name="[298]"></a>BLEPLAT_AesCmacSetKey</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bleplat.o(.text.BLEPLAT_AesCmacSetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BLEPLAT_AesCmacSetKey &rArr; BAES_CmacSetKey &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAES_CmacSetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Compute_Database_Hash
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Cmac
</UL>

<P><STRONG><a name="[299]"></a>BLEPLAT_AesEcbEncrypt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bleplat.o(.text.BLEPLAT_AesEcbEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAES_EcbCrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_STK
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Compute_Confirm_Value
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Compute_EDIV
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RndAddr_Calculate_Address_Hash
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_CMAC_Generate_Tag
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
</UL>

<P><STRONG><a name="[29a]"></a>BLEPLAT_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bleplat.o(.text.BLEPLAT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLEPLAT_Init &rArr; BLE_TIMER_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_Reset
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAES_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RESET
</UL>

<P><STRONG><a name="[29d]"></a>BLEPLAT_NvmStore</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bleplat.o(.text.BLEPLAT_NvmStore))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = BLEPLAT_NvmStore &rArr; APP_BLE_HostNvmStore &rArr; SNVMA_Write &rArr; StartFlashWrite &rArr; FM_Write &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_HostNvmStore
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMCB_Store
</UL>

<P><STRONG><a name="[28d]"></a>BLEPLAT_PkaReadDhKey</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bleplat.o(.text.BLEPLAT_PkaReadDhKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLEPLAT_PkaReadDhKey &rArr; BPKA_ReadDhKey
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_ReadDhKey
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLATCB_PkaComplete
</UL>

<P><STRONG><a name="[28b]"></a>BLEPLAT_PkaReadP256Key</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bleplat.o(.text.BLEPLAT_PkaReadP256Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLEPLAT_PkaReadP256Key &rArr; BPKA_ReadP256Key
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_ReadP256Key
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLATCB_PkaComplete
</UL>

<P><STRONG><a name="[2a0]"></a>BLEPLAT_PkaStartDhKey</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bleplat.o(.text.BLEPLAT_PkaStartDhKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BLEPLAT_PkaStartDhKey &rArr; BPKA_StartDhKey &rArr; HW_PKA_Enable &rArr; HW_RNG_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_StartDhKey
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_GENERATE_DHKEY
</UL>

<P><STRONG><a name="[2a2]"></a>BLEPLAT_PkaStartP256Key</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bleplat.o(.text.BLEPLAT_PkaStartP256Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BLEPLAT_PkaStartP256Key &rArr; BPKA_StartP256Key &rArr; HW_PKA_P256_StartEccScalarMul &rArr; HW_PKA_WriteOperand
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_StartP256Key
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_READ_LOCAL_P256_PUBLIC_KEY
</UL>

<P><STRONG><a name="[2a4]"></a>BLEPLAT_RngGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bleplat.o(.text.BLEPLAT_RngGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEPLAT_RngGet &rArr; HW_RNG_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_READ_LOCAL_P256_PUBLIC_KEY
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Generate_Local_OOB_SC_Random
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RndAddr_Generate_Non_Resolvable_Address
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RndAddr_Generate_Static_Address
</UL>

<P><STRONG><a name="[2a6]"></a>BLEPLAT_TimerStart</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bleplat.o(.text.BLEPLAT_TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BLEPLAT_TimerStart &rArr; BLE_TIMER_Start &rArr; AMM_Alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Rep_Attempts_Protection
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Reset_Timer
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Start_Timer
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Start_Timer
</UL>

<P><STRONG><a name="[2a8]"></a>BLEPLAT_TimerStop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bleplat.o(.text.BLEPLAT_TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BLEPLAT_TimerStop &rArr; BLE_TIMER_Stop &rArr; AMM_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Rep_Attempts_Protection
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Reset_Timer
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Stop_Timer
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Stop_Timer
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Legacy_Reset_State
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Search_Rep_Attempts_List
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Stop_Timer
</UL>

<P><STRONG><a name="[29c]"></a>BLE_TIMER_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_timer.o(.text.BLE_TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLE_TIMER_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_Init
</UL>

<P><STRONG><a name="[2a7]"></a>BLE_TIMER_Start</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, ble_timer.o(.text.BLE_TIMER_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BLE_TIMER_Start &rArr; AMM_Alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_Alloc
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_Free
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Create
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_get_next_node
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_node
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_TimerStart
</UL>

<P><STRONG><a name="[2a9]"></a>BLE_TIMER_Stop</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ble_timer.o(.text.BLE_TIMER_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BLE_TIMER_Stop &rArr; AMM_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_Free
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_get_next_node
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_node
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_TimerStop
</UL>

<P><STRONG><a name="[2b0]"></a>BPKACB_Complete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bleplat.o(.text.BPKACB_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = BPKACB_Complete &rArr; BLEPLATCB_PkaComplete &rArr; LECTRL_LeGeneratedDHKeyCompleteEvent &rArr; SMP_Generate_DHkey_Complete_Handler &rArr; SMP_Send_Pairing_Failed &rArr; SMP_Pairing_Failed &rArr; EVT_aci_gap_pairing_complete &rArr; ACI_GAP_PAIRING_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLATCB_PkaComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_Process
</UL>

<P><STRONG><a name="[2b1]"></a>BPKACB_Process</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_entry.o(.text.BPKACB_Process))
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_BG_Process
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_StartDhKey
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_StartP256Key
</UL>

<P><STRONG><a name="[9f]"></a>BPKA_BG_Process</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bpka.o(.text.BPKA_BG_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = BPKA_BG_Process &rArr; BPKA_Process &rArr; BPKACB_Complete &rArr; BLEPLATCB_PkaComplete &rArr; LECTRL_LeGeneratedDHKeyCompleteEvent &rArr; SMP_Generate_DHkey_Complete_Handler &rArr; SMP_Send_Pairing_Failed &rArr; SMP_Pairing_Failed &rArr; EVT_aci_gap_pairing_complete &rArr; ACI_GAP_PAIRING_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKACB_Process
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.MX_APPE_Init)
</UL>
<P><STRONG><a name="[2b2]"></a>BPKA_Process</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, bpka.o(.text.BPKA_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = BPKA_Process &rArr; BPKACB_Complete &rArr; BLEPLATCB_PkaComplete &rArr; LECTRL_LeGeneratedDHKeyCompleteEvent &rArr; SMP_Generate_DHkey_Complete_Handler &rArr; SMP_Send_Pairing_Failed &rArr; SMP_Pairing_Failed &rArr; EVT_aci_gap_pairing_complete &rArr; ACI_GAP_PAIRING_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_IsPointCheckOk
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_StartPointCheck
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_IsRangeCheckOk
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_ReadEccScalarMul
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_EndOfOperation
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_StartRangeCheck
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_StartEccScalarMul
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_Disable
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKACB_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_BG_Process
</UL>

<P><STRONG><a name="[29e]"></a>BPKA_ReadDhKey</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bpka.o(.text.BPKA_ReadDhKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BPKA_ReadDhKey
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_PkaReadDhKey
</UL>

<P><STRONG><a name="[29f]"></a>BPKA_ReadP256Key</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bpka.o(.text.BPKA_ReadP256Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BPKA_ReadP256Key
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_PkaReadP256Key
</UL>

<P><STRONG><a name="[29b]"></a>BPKA_Reset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bpka.o(.text.BPKA_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BPKA_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_Init
</UL>

<P><STRONG><a name="[2a1]"></a>BPKA_StartDhKey</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, bpka.o(.text.BPKA_StartDhKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BPKA_StartDhKey &rArr; HW_PKA_Enable &rArr; HW_RNG_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKACB_Process
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_StartRangeCheck
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_PkaStartDhKey
</UL>

<P><STRONG><a name="[2a3]"></a>BPKA_StartP256Key</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bpka.o(.text.BPKA_StartP256Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BPKA_StartP256Key &rArr; HW_PKA_P256_StartEccScalarMul &rArr; HW_PKA_WriteOperand
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKACB_Process
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_StartEccScalarMul
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_PkaStartP256Key
</UL>

<P><STRONG><a name="[252]"></a>BSP_LED_Init</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, stm32wbaxx_nucleo.o(.text.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BSP_LedInit
</UL>

<P><STRONG><a name="[27f]"></a>BSP_LED_Off</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32wbaxx_nucleo.o(.text.BSP_LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_LED_Off &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_OFF_GPIO
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Cancel
</UL>

<P><STRONG><a name="[2be]"></a>BSP_LED_On</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32wbaxx_nucleo.o(.text.BSP_LED_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_LED_On &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[280]"></a>BSP_PB_Callback</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, app_bsp.o(.text.BSP_PB_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_PB_Callback &rArr; UTIL_TIMER_StartWithPeriod &rArr; UTIL_TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_StartWithPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B3_EXTI_Callback
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B2_EXTI_Callback
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B1_EXTI_Callback
</UL>

<P><STRONG><a name="[2bf]"></a>BSP_PB_GetState</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32wbaxx_nucleo.o(.text.BSP_PB_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_PB_GetState &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_TriggerActions
</UL>

<P><STRONG><a name="[2c1]"></a>BSP_PB_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32wbaxx_nucleo.o(.text.BSP_PB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_PB_IRQHandler &rArr; HAL_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI13_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI7_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI6_IRQHandler
</UL>

<P><STRONG><a name="[250]"></a>BSP_PB_Init</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, stm32wbaxx_nucleo.o(.text.BSP_PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_PB_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_RegisterCallback
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_GetHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BSP_ButtonInit
</UL>

<P><STRONG><a name="[2ab]"></a>BleStackCB_Process</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, host_stack_if.o(.text.BleStackCB_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = BleStackCB_Process &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_HARDWARE_ERROR_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_allow_read
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_confirm_indication
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_confirm_yesno
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_allow_rebond
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_resp
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_parameter_update_req
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_delete_ad_type
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_local_version_information
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_configure_filter_accept_list
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_authentication_requirement
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_io_capability
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_default_phy
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStack_Process_BG
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKACB_Complete
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Background
</UL>

<P><STRONG><a name="[230]"></a>BleStack_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, blestack_main.o(.text.BleStack_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = BleStack_Init &rArr; HCI_RESET &rArr; LECTRL_Reset &rArr; ll_intf_reset &rArr; evnt_schdlr_set_phy_clbr_params &rArr; llhwc_prdc_clbr_init &rArr; evnt_schdlr_rgstr_prdc_clbr_evnt &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RESET
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LL_Init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Discard
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Get
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[2cd]"></a>BleStack_Process</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, blestack_main.o(.text.BleStack_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720 + Unknown Stack Size
<LI>Call Chain = BleStack_Process &rArr; GATT_Process &rArr; GATT_Reset_To_Closed_State &rArr; GATT_Store_Server_Database &rArr; SMP_Save_GATT_Data &rArr; SDB_Write_Gatt_Data &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLP_SleepCheck
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_Process
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStack_Process_BG
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbaxx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[56b]"></a>CAL_APP_EvtRx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cal_app.o(.text.CAL_APP_EvtRx))
<BR><BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[246]"></a>CAL_APP_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, cal_app.o(.text.CAL_APP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + Unknown Stack Size
<LI>Call Chain = CAL_APP_Init &rArr; CAL_Init &rArr; aci_gatt_add_char &rArr; ACI_GATT_ADD_CHAR &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[2d4]"></a>CAL_Init</STRONG> (Thumb, 500 bytes, Stack size 80 bytes, cal.o(.text.CAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = CAL_Init &rArr; aci_gatt_add_char &rArr; ACI_GATT_ADD_CHAR &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_RegisterSvcHandler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_APP_Init
</UL>

<P><STRONG><a name="[2d7]"></a>CAL_Notification</STRONG> (Thumb, 492 bytes, Stack size 16 bytes, cal_app.o(.text.CAL_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = CAL_Notification &rArr; CAL_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_UpdateValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_EventHandler
</UL>

<P><STRONG><a name="[2d5]"></a>CAL_UpdateValue</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, cal.o(.text.CAL_UpdateValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = CAL_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_Cs_calib_reserved_SendNotification
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_Cs_calib_resp_code_SendNotification
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_Cs_calib_status_SendNotification
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_Notification
</UL>

<P><STRONG><a name="[2da]"></a>CRCCTRL_Accumulate</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, crc_ctrl.o(.text.CRCCTRL_Accumulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CRCCTRL_Accumulate &rArr; HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Calculate
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Accumulate
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_DeInit
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_MutexRelease
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_MutexTake
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFlashWrite
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrcOk
</UL>

<P><STRONG><a name="[2e1]"></a>CRCCTRL_Calculate</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, crc_ctrl.o(.text.CRCCTRL_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CRCCTRL_Calculate &rArr; HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Calculate
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_DeInit
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_MutexRelease
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_MutexTake
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFlashWrite
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrcOk
</UL>

<P><STRONG><a name="[2dd]"></a>CRCCTRL_MutexRelease</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, crc_ctrl.o(.text.CRCCTRL_MutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_Accumulate
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_Calculate
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_RegisterHandle
</UL>

<P><STRONG><a name="[2db]"></a>CRCCTRL_MutexTake</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, crc_ctrl.o(.text.CRCCTRL_MutexTake))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_Accumulate
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_Calculate
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_RegisterHandle
</UL>

<P><STRONG><a name="[2e2]"></a>CRCCTRL_RegisterHandle</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, crc_ctrl.o(.text.CRCCTRL_RegisterHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRCCTRL_RegisterHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_MutexRelease
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_MutexTake
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_Init
</UL>

<P><STRONG><a name="[568]"></a>CSP_ER_BLE_APP_EvtRx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, csp_er_ble_app.o(.text.CSP_ER_BLE_APP_EvtRx))
<BR><BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[243]"></a>CSP_ER_BLE_APP_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, csp_er_ble_app.o(.text.CSP_ER_BLE_APP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = CSP_ER_BLE_APP_Init &rArr; CSP_ER_BLE_Init &rArr; aci_gatt_add_char &rArr; ACI_GATT_ADD_CHAR &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[2e3]"></a>CSP_ER_BLE_Init</STRONG> (Thumb, 1794 bytes, Stack size 80 bytes, csp_er_ble.o(.text.CSP_ER_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = CSP_ER_BLE_Init &rArr; aci_gatt_add_char &rArr; ACI_GATT_ADD_CHAR &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_RegisterSvcHandler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_APP_Init
</UL>

<P><STRONG><a name="[2e4]"></a>CSP_ER_BLE_Notification</STRONG> (Thumb, 2948 bytes, Stack size 40 bytes, csp_er_ble_app.o(.text.CSP_ER_BLE_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = CSP_ER_BLE_Notification &rArr; CSP_ER_BLE_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_byte_array_to_float
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_float_to_byte_array
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_UpdateValue
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_EventHandler
</UL>

<P><STRONG><a name="[2e5]"></a>CSP_ER_BLE_UpdateValue</STRONG> (Thumb, 1156 bytes, Stack size 16 bytes, csp_er_ble.o(.text.CSP_ER_BLE_UpdateValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = CSP_ER_BLE_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_Notification
</UL>

<P><STRONG><a name="[56a]"></a>CS_APP_EvtRx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs_app.o(.text.CS_APP_EvtRx))
<BR><BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[245]"></a>CS_APP_Init</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, cs_app.o(.text.CS_APP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360 + Unknown Stack Size
<LI>Call Chain = CS_APP_Init &rArr; CS_Init &rArr; aci_gatt_add_char &rArr; ACI_GATT_ADD_CHAR &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[2ed]"></a>CS_Cs_connection_status_ReadUpdate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cs_app.o(.text.CS_Cs_connection_status_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = CS_Cs_connection_status_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[2ef]"></a>CS_Cs_diag_error_ReadUpdate</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, cs_app.o(.text.CS_Cs_diag_error_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CS_Cs_diag_error_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[2f0]"></a>CS_Cs_diag_warn_ReadUpdate</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, cs_app.o(.text.CS_Cs_diag_warn_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CS_Cs_diag_warn_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[2f1]"></a>CS_Cs_flowtemp_ReadUpdate</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cs_app.o(.text.CS_Cs_flowtemp_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CS_Cs_flowtemp_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_float_to_byte_array
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[2f2]"></a>CS_Cs_inlet_pres_pd1_ReadUpdate</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cs_app.o(.text.CS_Cs_inlet_pres_pd1_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CS_Cs_inlet_pres_pd1_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_float_to_byte_array
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[2f3]"></a>CS_Cs_lvdt_amp_ReadUpdate</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, cs_app.o(.text.CS_Cs_lvdt_amp_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CS_Cs_lvdt_amp_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[2f4]"></a>CS_Cs_mod_com_error_ReadUpdate</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, cs_app.o(.text.CS_Cs_mod_com_error_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CS_Cs_mod_com_error_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[2f5]"></a>CS_Cs_opening_per_ReadUpdate</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cs_app.o(.text.CS_Cs_opening_per_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CS_Cs_opening_per_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_float_to_byte_array
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[2f6]"></a>CS_Cs_operation_mode_ReadUpdate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cs_app.o(.text.CS_Cs_operation_mode_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = CS_Cs_operation_mode_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[2f7]"></a>CS_Cs_outlet_pres_pd2_ReadUpdate</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cs_app.o(.text.CS_Cs_outlet_pres_pd2_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CS_Cs_outlet_pres_pd2_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_float_to_byte_array
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[2f8]"></a>CS_Cs_p1t1_ReadUpdate</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cs_app.o(.text.CS_Cs_p1t1_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CS_Cs_p1t1_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_float_to_byte_array
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[2f9]"></a>CS_Cs_p2t2_ReadUpdate</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cs_app.o(.text.CS_Cs_p2t2_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CS_Cs_p2t2_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_float_to_byte_array
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[2fa]"></a>CS_Cs_reset_button_ReadUpdate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cs_app.o(.text.CS_Cs_reset_button_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = CS_Cs_reset_button_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[2fb]"></a>CS_Cs_time_stamp_ddmm_ReadUpdate</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, cs_app.o(.text.CS_Cs_time_stamp_ddmm_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CS_Cs_time_stamp_ddmm_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[2fc]"></a>CS_Cs_time_stamp_hhmm_ReadUpdate</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, cs_app.o(.text.CS_Cs_time_stamp_hhmm_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CS_Cs_time_stamp_hhmm_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[2fd]"></a>CS_Cs_totalizer_ReadUpdate</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, cs_app.o(.text.CS_Cs_totalizer_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = CS_Cs_totalizer_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[134]"></a>CS_Cs_totalizer_last_val_ReadUpdate</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, cs_app.o(.text.CS_Cs_totalizer_last_val_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = CS_Cs_totalizer_last_val_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[2fe]"></a>CS_Cs_totalizer_unit_ReadUpdate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cs_app.o(.text.CS_Cs_totalizer_unit_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = CS_Cs_totalizer_unit_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[2ff]"></a>CS_Cs_unit_p1t1_ReadUpdate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cs_app.o(.text.CS_Cs_unit_p1t1_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = CS_Cs_unit_p1t1_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[300]"></a>CS_Cs_unit_p2t2_ReadUpdate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cs_app.o(.text.CS_Cs_unit_p2t2_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = CS_Cs_unit_p2t2_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[301]"></a>CS_Cs_year_stamp_yyyy_ReadUpdate</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, cs_app.o(.text.CS_Cs_year_stamp_yyyy_ReadUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CS_Cs_year_stamp_yyyy_ReadUpdate &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[2ec]"></a>CS_Init</STRONG> (Thumb, 2064 bytes, Stack size 80 bytes, cs.o(.text.CS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = CS_Init &rArr; aci_gatt_add_char &rArr; ACI_GATT_ADD_CHAR &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_RegisterSvcHandler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_APP_Init
</UL>

<P><STRONG><a name="[302]"></a>CS_Notification</STRONG> (Thumb, 2048 bytes, Stack size 24 bytes, cs_app.o(.text.CS_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = CS_Notification &rArr; CS_Cs_totalizer_SendNotification &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_connection_status_ReadUpdate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_totalizer_unit_ReadUpdate
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_totalizer_last_val_ReadUpdate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_year_stamp_yyyy_ReadUpdate
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_time_stamp_ddmm_ReadUpdate
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_time_stamp_hhmm_ReadUpdate
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_reset_button_ReadUpdate
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_totalizer_ReadUpdate
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_lvdt_amp_ReadUpdate
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_operation_mode_ReadUpdate
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_opening_per_ReadUpdate
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_outlet_pres_pd2_ReadUpdate
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_inlet_pres_pd1_ReadUpdate
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_diag_warn_ReadUpdate
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_diag_error_ReadUpdate
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_mod_com_error_ReadUpdate
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_unit_p1t1_ReadUpdate
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_unit_p2t2_ReadUpdate
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p1t1_ReadUpdate
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p2t2_ReadUpdate
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_flowtemp_ReadUpdate
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_totalizer_SendNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_EventHandler
</UL>

<P><STRONG><a name="[2ee]"></a>CS_UpdateValue</STRONG> (Thumb, 1336 bytes, Stack size 16 bytes, cs.o(.text.CS_UpdateValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_connection_status_ReadUpdate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_totalizer_unit_ReadUpdate
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_totalizer_last_val_ReadUpdate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_year_stamp_yyyy_ReadUpdate
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_time_stamp_ddmm_ReadUpdate
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_time_stamp_hhmm_ReadUpdate
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_reset_button_ReadUpdate
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_totalizer_ReadUpdate
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_lvdt_amp_ReadUpdate
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_operation_mode_ReadUpdate
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_opening_per_ReadUpdate
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_outlet_pres_pd2_ReadUpdate
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_inlet_pres_pd1_ReadUpdate
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_diag_warn_ReadUpdate
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_diag_error_ReadUpdate
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_mod_com_error_ReadUpdate
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_unit_p1t1_ReadUpdate
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_unit_p2t2_ReadUpdate
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p1t1_ReadUpdate
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p2t2_ReadUpdate
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_flowtemp_ReadUpdate
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_totalizer_unit_SendNotification
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_totalizer_last_val_SendNotification
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_year_stamp_yyyy_SendNotification
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_time_stamp_ddmm_SendNotification
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_time_stamp_hhmm_SendNotification
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_lvdt_amp_SendNotification
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_operation_mode_SendNotification
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_opening_per_SendNotification
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_outlet_pres_pd2_SendNotification
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_inlet_pres_pd1_SendNotification
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_diag_warn_SendNotification
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_diag_error_SendNotification
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_mod_com_error_SendNotification
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_unit_p1t1_SendNotification
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_unit_p2t2_SendNotification
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p1t1_SendNotification
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p2t2_SendNotification
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_flowtemp_SendNotification
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_totalizer_SendNotification
</UL>

<P><STRONG><a name="[567]"></a>CUPS_ER_BLE_APP_EvtRx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cups_er_ble_app.o(.text.CUPS_ER_BLE_APP_EvtRx))
<BR><BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[242]"></a>CUPS_ER_BLE_APP_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cups_er_ble_app.o(.text.CUPS_ER_BLE_APP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360 + Unknown Stack Size
<LI>Call Chain = CUPS_ER_BLE_APP_Init &rArr; CUPS_ER_BLE_Init &rArr; aci_gatt_add_char &rArr; ACI_GATT_ADD_CHAR &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_Init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[303]"></a>CUPS_ER_BLE_Init</STRONG> (Thumb, 1794 bytes, Stack size 80 bytes, cups_er_ble.o(.text.CUPS_ER_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = CUPS_ER_BLE_Init &rArr; aci_gatt_add_char &rArr; ACI_GATT_ADD_CHAR &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_RegisterSvcHandler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_APP_Init
</UL>

<P><STRONG><a name="[305]"></a>CUPS_ER_BLE_Notification</STRONG> (Thumb, 2724 bytes, Stack size 32 bytes, cups_er_ble_app.o(.text.CUPS_ER_BLE_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = CUPS_ER_BLE_Notification &rArr; CUPS_ER_BLE_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_UpdateValue
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_byte_array_to_float
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_float_to_byte_array
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_EventHandler
</UL>

<P><STRONG><a name="[304]"></a>CUPS_ER_BLE_UpdateValue</STRONG> (Thumb, 1144 bytes, Stack size 16 bytes, cups_er_ble.o(.text.CUPS_ER_BLE_UpdateValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = CUPS_ER_BLE_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_Cups_setpoint_p2_rw_SendNotification
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_Notification
</UL>

<P><STRONG><a name="[306]"></a>CfgData_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, config_data.o(.text.CfgData_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CfgData_Init &rArr; RndAddr_Generate_Static_Address &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RndAddr_Generate_Static_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RESET
</UL>

<P><STRONG><a name="[204]"></a>CfgData_Write</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, config_data.o(.text.CfgData_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CfgData_Write &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_SetRxAclControl
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_WRITE_CONFIG_DATA
</UL>

<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbaxx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[309]"></a>EVT_GATT_Attribute_Modified</STRONG> (Thumb, 128 bytes, Stack size 304 bytes, host_srv_events.o(.text.EVT_GATT_Attribute_Modified))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = EVT_GATT_Attribute_Modified &rArr; ACI_GATT_ATTRIBUTE_MODIFIED_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ATTRIBUTE_MODIFIED_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Attribute_Modified_Event
</UL>

<P><STRONG><a name="[30a]"></a>EVT_GATT_Indication</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_GATT_Indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = EVT_GATT_Indication &rArr; EVT_GATT_Notif_Generic &rArr; ACI_GATT_NOTIFICATION_EXT_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_GATT_Notif_Generic
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
</UL>

<P><STRONG><a name="[30d]"></a>EVT_GATT_Notification</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_GATT_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = EVT_GATT_Notification &rArr; EVT_GATT_Notif_Generic &rArr; ACI_GATT_NOTIFICATION_EXT_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_GATT_Notif_Generic
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Client_Handle_Notif
</UL>

<P><STRONG><a name="[3da]"></a>EVT_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RESET
</UL>

<P><STRONG><a name="[257]"></a>EVT_aci_att_exchange_mtu_resp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_aci_att_exchange_mtu_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = EVT_aci_att_exchange_mtu_resp &rArr; ACI_ATT_EXCHANGE_MTU_RESP_EVENT &rArr; OUTLINED_FUNCTION_28 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_ATT_EXCHANGE_MTU_RESP_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Exchg_Mtu_Rsp
</UL>

<P><STRONG><a name="[30e]"></a>EVT_aci_gap_addr_not_resolved</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_aci_gap_addr_not_resolved))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = EVT_aci_gap_addr_not_resolved &rArr; ACI_GAP_ADDR_NOT_RESOLVED_EVENT &rArr; OUTLINED_FUNCTION_34 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_ADDR_NOT_RESOLVED_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[30f]"></a>EVT_aci_gap_authorization_req</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_aci_gap_authorization_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = EVT_aci_gap_authorization_req &rArr; ACI_GAP_AUTHORIZATION_REQ_EVENT &rArr; OUTLINED_FUNCTION_34 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_AUTHORIZATION_REQ_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Generate_Authorization_Req_Event
</UL>

<P><STRONG><a name="[310]"></a>EVT_aci_gap_bond_lost</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_aci_gap_bond_lost))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = EVT_aci_gap_bond_lost &rArr; ACI_GAP_BOND_LOST_EVENT &rArr; OUTLINED_FUNCTION_34 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_BOND_LOST_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[311]"></a>EVT_aci_gap_keypress_notification</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_aci_gap_keypress_notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = EVT_aci_gap_keypress_notification &rArr; ACI_GAP_KEYPRESS_NOTIFICATION_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Keypress_Notification_Rx_Handler
</UL>

<P><STRONG><a name="[312]"></a>EVT_aci_gap_limited_discoverable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_aci_gap_limited_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = EVT_aci_gap_limited_discoverable &rArr; ACI_GAP_LIMITED_DISCOVERABLE_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_LIMITED_DISCOVERABLE_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Lim_Disc_Timeout_Cb
</UL>

<P><STRONG><a name="[313]"></a>EVT_aci_gap_numeric_comparison_value</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_aci_gap_numeric_comparison_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = EVT_aci_gap_numeric_comparison_value &rArr; ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Generate_Num_Comparison_Event
</UL>

<P><STRONG><a name="[314]"></a>EVT_aci_gap_pairing_complete</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_aci_gap_pairing_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = EVT_aci_gap_pairing_complete &rArr; ACI_GAP_PAIRING_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_PAIRING_COMPLETE_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Encryption_Update_Handler
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Failed
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[315]"></a>EVT_aci_gap_pairing_request</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_aci_gap_pairing_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = EVT_aci_gap_pairing_request &rArr; ACI_GAP_PAIRING_REQUEST_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_PAIRING_REQUEST_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Handle_Pairing_Request_Event
</UL>

<P><STRONG><a name="[316]"></a>EVT_aci_gap_pass_key_req</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_aci_gap_pass_key_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = EVT_aci_gap_pass_key_req &rArr; ACI_GAP_PASS_KEY_REQ_EVENT &rArr; OUTLINED_FUNCTION_34 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_PASS_KEY_REQ_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Generate_Pass_Key_Req_Event
</UL>

<P><STRONG><a name="[317]"></a>EVT_aci_gap_proc_complete</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_aci_gap_proc_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = EVT_aci_gap_proc_complete &rArr; ACI_GAP_PROC_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_PROC_COMPLETE_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Scan_Disc_Proc_Timeout_Cb
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Proc_Connection_Complete_Handler
</UL>

<P><STRONG><a name="[318]"></a>EVT_aci_gatt_notification_complete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_aci_gatt_notification_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_NOTIFICATION_COMPLETE_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Notification_Complete_Event
</UL>

<P><STRONG><a name="[26c]"></a>EVT_aci_gatt_prepare_write_permit_req</STRONG> (Thumb, 50 bytes, Stack size 288 bytes, host_srv_events.o(.text.EVT_aci_gatt_prepare_write_permit_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = EVT_aci_gatt_prepare_write_permit_req &rArr; ACI_GATT_PREPARE_WRITE_PERMIT_REQ_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Get_Data
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_PREPARE_WRITE_PERMIT_REQ_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Prepare_Write_Rsp
</UL>

<P><STRONG><a name="[319]"></a>EVT_aci_gatt_proc_complete</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_aci_gatt_proc_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = EVT_aci_gatt_proc_complete &rArr; ACI_GATT_PROC_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_PROC_COMPLETE_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Complete_Event
</UL>

<P><STRONG><a name="[31a]"></a>EVT_aci_gatt_proc_timeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_aci_gatt_proc_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = EVT_aci_gatt_proc_timeout &rArr; ACI_GATT_PROC_TIMEOUT_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_PROC_TIMEOUT_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
</UL>

<P><STRONG><a name="[31b]"></a>EVT_aci_gatt_read_multi_permit_req</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_aci_gatt_read_multi_permit_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = EVT_aci_gatt_read_multi_permit_req &rArr; ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Multi_Permit_Req_Event
</UL>

<P><STRONG><a name="[31c]"></a>EVT_aci_gatt_read_permit_req</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_aci_gatt_read_permit_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = EVT_aci_gatt_read_permit_req &rArr; ACI_GATT_READ_PERMIT_REQ_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_READ_PERMIT_REQ_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Permit_Req_Event
</UL>

<P><STRONG><a name="[31d]"></a>EVT_aci_gatt_server_confirmation</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_aci_gatt_server_confirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = EVT_aci_gatt_server_confirmation &rArr; ACI_GATT_SERVER_CONFIRMATION_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_SERVER_CONFIRMATION_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_L2cap_Data_Handler
</UL>

<P><STRONG><a name="[31e]"></a>EVT_aci_gatt_tx_pool_available</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, host_srv_events.o(.text.EVT_aci_gatt_tx_pool_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = EVT_aci_gatt_tx_pool_available &rArr; ACI_GATT_TX_POOL_AVAILABLE_EVENT &rArr; OUTLINED_FUNCTION_28 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_TX_POOL_AVAILABLE_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
</UL>

<P><STRONG><a name="[31f]"></a>EVT_aci_gatt_write_permit_req</STRONG> (Thumb, 40 bytes, Stack size 280 bytes, host_srv_events.o(.text.EVT_aci_gatt_write_permit_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = EVT_aci_gatt_write_permit_req &rArr; ACI_GATT_WRITE_PERMIT_REQ_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Get_Data
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_WRITE_PERMIT_REQ_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Permit_Req_Event
</UL>

<P><STRONG><a name="[320]"></a>EVT_aci_l2cap_command_reject</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, host_srv_events.o(.text.EVT_aci_l2cap_command_reject))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = EVT_aci_l2cap_command_reject &rArr; ACI_L2CAP_COMMAND_REJECT_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_L2CAP_COMMAND_REJECT_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
</UL>

<P><STRONG><a name="[321]"></a>EVT_aci_l2cap_connection_update_req</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, host_srv_events.o(.text.EVT_aci_l2cap_connection_update_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = EVT_aci_l2cap_connection_update_req &rArr; ACI_L2CAP_CONNECTION_UPDATE_REQ_EVENT &rArr; OUTLINED_FUNCTION_50 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_L2CAP_CONNECTION_UPDATE_REQ_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_CPU_Req_Rx_Handler
</UL>

<P><STRONG><a name="[322]"></a>EVT_aci_l2cap_connection_update_resp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, host_srv_events.o(.text.EVT_aci_l2cap_connection_update_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = EVT_aci_l2cap_connection_update_resp &rArr; ACI_L2CAP_CONNECTION_UPDATE_RESP_EVENT &rArr; OUTLINED_FUNCTION_28 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_L2CAP_CONNECTION_UPDATE_RESP_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_CPU_Rsp_Rx_Handler
</UL>

<P><STRONG><a name="[323]"></a>EVT_aci_l2cap_proc_timeout</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, host_srv_events.o(.text.EVT_aci_l2cap_proc_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = EVT_aci_l2cap_proc_timeout &rArr; ACI_L2CAP_PROC_TIMEOUT_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_L2CAP_PROC_TIMEOUT_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Timeout_Cb
</UL>

<P><STRONG><a name="[324]"></a>EVT_aci_warning</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, host_srv_events.o(.text.EVT_aci_warning))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_WARNING_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Warning_Event
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Warning
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rx_Data_Handler
</UL>

<P><STRONG><a name="[24]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbaxx_it.o(.text.EXTI13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI13_IRQHandler &rArr; BSP_PB_IRQHandler &rArr; HAL_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbaxx_it.o(.text.EXTI6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI6_IRQHandler &rArr; BSP_PB_IRQHandler &rArr; HAL_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbaxx_it.o(.text.EXTI7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI7_IRQHandler &rArr; BSP_PB_IRQHandler &rArr; HAL_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[27e]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFlashWrite
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrcOk
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcReadRaw
</UL>

<P><STRONG><a name="[325]"></a>FD_EraseSectors</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, flash_driver.o(.text.FD_EraseSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FD_EraseSectors &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_BackgroundProcess
</UL>

<P><STRONG><a name="[43a]"></a>FD_SetStatus</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, flash_driver.o(.text.FD_SetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTS_Timeout_Callback
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_started_callback
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTS_RelWindow
</UL>

<P><STRONG><a name="[327]"></a>FD_WriteData</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, flash_driver.o(.text.FD_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FD_WriteData &rArr; HAL_FLASH_Program &rArr; FLASH_Program_Burst
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_BackgroundProcess
</UL>

<P><STRONG><a name="[32b]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32wbaxx_hal_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[9e]"></a>FM_BackgroundProcess</STRONG> (Thumb, 524 bytes, Stack size 24 bytes, flash_manager.o(.text.FM_BackgroundProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = FM_BackgroundProcess &rArr; RFTS_ReqWindow &rArr; evnt_schdlr_rgstr_gnrc_evnt &rArr; OUTLINED_FUNCTION_4 &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTS_ReqWindow
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTS_RelWindow
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_EraseSectors
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_WriteData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.MX_APPE_Init)
</UL>
<P><STRONG><a name="[331]"></a>FM_Erase</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, flash_manager.o(.text.FM_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = FM_Erase &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ProcessRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_FlashManagerCallback
</UL>

<P><STRONG><a name="[332]"></a>FM_ProcessRequest</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_entry.o(.text.FM_ProcessRequest))
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Erase
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_WindowAllowed_Callback
</UL>

<P><STRONG><a name="[333]"></a>FM_Write</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, flash_manager.o(.text.FM_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = FM_Write &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_tail
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_init_head
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ProcessRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_FlashManagerCallback
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFlashWrite
</UL>

<P><STRONG><a name="[334]"></a>GAP_Adv_Connection_Complete_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gap_adv.o(.text.GAP_Adv_Connection_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GAP_Adv_Connection_Complete_Handler &rArr; GAP_Adv_Legacy_Reset_State &rArr; BLEPLAT_TimerStop &rArr; BLE_TIMER_Stop &rArr; AMM_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Legacy_Reset_State
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Connection_Complete_Handler
</UL>

<P><STRONG><a name="[291]"></a>GAP_Adv_Lim_Disc_Timeout_Cb</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gap_adv.o(.text.GAP_Adv_Lim_Disc_Timeout_Cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = GAP_Adv_Lim_Disc_Timeout_Cb &rArr; EVT_aci_gap_limited_discoverable &rArr; ACI_GAP_LIMITED_DISCOVERABLE_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_limited_discoverable
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SET_ADVERTISING_ENABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLATCB_TimerExpiry
</UL>

<P><STRONG><a name="[405]"></a>GAP_Advertising_Report_Handler</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, gap_centr.o(.text.GAP_Advertising_Report_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GAP_Advertising_Report_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeAdvertisingReportEvent
</UL>

<P><STRONG><a name="[33a]"></a>GAP_Connection_Complete_Handler</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gap.o(.text.GAP_Connection_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = GAP_Connection_Complete_Handler &rArr; GAP_Proc_Connection_Complete_Handler &rArr; EVT_aci_gap_proc_complete &rArr; ACI_GAP_PROC_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Proc_Connection_Complete_Handler
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Connection_Complete_Handler
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Handler
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Connection_Complete_Handler
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Connection_Complete_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeEnhancedConnectionCompleteEvent
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeConnectionCompleteEvent
</UL>

<P><STRONG><a name="[33f]"></a>GAP_Disconnection_Complete_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gap.o(.text.GAP_Disconnection_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GAP_Disconnection_Complete_Handler &rArr; L2C_Disconnection_Complete_Handler &rArr; L2C_Stop_Timer &rArr; BLEPLAT_TimerStop &rArr; BLE_TIMER_Stop &rArr; AMM_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Disconnection_Complete_Handler
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Disconnection_Complete_Handler
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Disconnection_Complete_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_DisconnectionComplete
</UL>

<P><STRONG><a name="[1a8]"></a>GAP_Enable_Privacy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gap_priv.o(.text.GAP_Enable_Privacy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GAP_Enable_Privacy &rArr; HCI_LE_SET_ADDRESS_RESOLUTION_ENABLE &rArr; ll_intf_le_set_addr_rsln_enble &rArr; prvcy_mngr_set_addr_rsln_enble &rArr; non_conn_mngr_event_status_check
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SET_ADDRESS_RESOLUTION_ENABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_INIT
</UL>

<P><STRONG><a name="[3df]"></a>GAP_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gap.o(.text.GAP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RESET
</UL>

<P><STRONG><a name="[33e]"></a>GAP_Proc_Connection_Complete_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gap_proc.o(.text.GAP_Proc_Connection_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = GAP_Proc_Connection_Complete_Handler &rArr; EVT_aci_gap_proc_complete &rArr; ACI_GAP_PROC_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_proc_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Connection_Complete_Handler
</UL>

<P><STRONG><a name="[292]"></a>GAP_Scan_Disc_Proc_Timeout_Cb</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gap_proc.o(.text.GAP_Scan_Disc_Proc_Timeout_Cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = GAP_Scan_Disc_Proc_Timeout_Cb &rArr; EVT_aci_gap_proc_complete &rArr; ACI_GAP_PROC_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_proc_complete
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Stop_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLATCB_TimerExpiry
</UL>

<P><STRONG><a name="[337]"></a>GAP_Set_Own_Address</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, gap_priv.o(.text.GAP_Set_Own_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = GAP_Set_Own_Address &rArr; RndAddr_Generate_Non_Resolvable_Address &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RndAddr_Generate_Non_Resolvable_Address
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Get_Identity_Address_Type
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SET_RANDOM_ADDRESS
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Legacy_Start
</UL>

<P><STRONG><a name="[1c4]"></a>GATT_Add_Char_Core</STRONG> (Thumb, 792 bytes, Stack size 160 bytes, gatt_server.o(.text.GATT_Add_Char_Core))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_Remove
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_Size
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Desc_Core
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_New_Value
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Search_Service_Handle
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notify_Service_Change
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Server_Db_Check
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ADD_CHAR
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_INIT
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Gap_Add_Service
</UL>

<P><STRONG><a name="[25f]"></a>GATT_Attr_Val</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gatt_server.o(.text.GATT_Attr_Val))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GATT_Attr_Val
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Val_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Store_Server_Database
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Get_Change_Vs_Server_Database
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Multi_Rsp
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Blob_Rsp
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Rsp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_By_Type_Rsp
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Write_Rsp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Handle_Write_Cmd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Exec_Write_Rsp
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Find_By_Type_Val_Rsp
</UL>

<P><STRONG><a name="[36f]"></a>GATT_Bearer_Index</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gatt.o(.text.GATT_Bearer_Index))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Update_Char_Value_Core
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Val_Index
</UL>

<P><STRONG><a name="[34c]"></a>GATT_Check_For_Service_Change</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, gatt_server.o(.text.GATT_Check_For_Service_Change))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = GATT_Check_For_Service_Change &rArr; GATT_Get_Change_Vs_Server_Database &rArr; SMP_Retrieve_GATT_Data &rArr; SDB_Read_Gatt_Data &rArr; SDB_Read_Sec_Record &rArr; RndAddr_Check_Resolvable_Address &rArr; RndAddr_Calculate_Address_Hash &rArr; BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Get_Change_Vs_Server_Database
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Update_For_Service_Change
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
</UL>

<P><STRONG><a name="[34f]"></a>GATT_Client_Handle_Notif</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gatt.o(.text.GATT_Client_Handle_Notif))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = GATT_Client_Handle_Notif &rArr; EVT_GATT_Notification &rArr; EVT_GATT_Notif_Generic &rArr; ACI_GATT_NOTIFICATION_EXT_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_GATT_Notification
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
</UL>

<P><STRONG><a name="[350]"></a>GATT_Compute_Database_Hash</STRONG> (Thumb, 264 bytes, Stack size 80 bytes, gatt_server_sdb.o(.text.GATT_Compute_Database_Hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GATT_Compute_Database_Hash &rArr; BLEPLAT_AesCmacCompute &rArr; BAES_CmacCompute
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesCmacCompute
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesCmacSetKey
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcpy_Rev
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Store_Server_Database
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Get_Change_Vs_Server_Database
</UL>

<P><STRONG><a name="[33c]"></a>GATT_Connection_Complete_Handler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gatt.o(.text.GATT_Connection_Complete_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Connection_Complete_Handler
</UL>

<P><STRONG><a name="[353]"></a>GATT_Db_MemAlloc</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, gatt_server.o(.text.GATT_Db_MemAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GATT_Db_MemAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_Insert
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RESET
</UL>

<P><STRONG><a name="[340]"></a>GATT_Disconnection_Complete_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gatt.o(.text.GATT_Disconnection_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GATT_Disconnection_Complete_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Get_Root_Bearer
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Disconnection_Complete_Handler
</UL>

<P><STRONG><a name="[26b]"></a>GATT_Evt_Handle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gatt.o(.text.GATT_Evt_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Prepare_Write_Rsp
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Complete_Event
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Attribute_Modified_Event
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Write_Permit_Req_Event
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[262]"></a>GATT_Find_Srv_Owner_Of_Handle</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gatt_server.o(.text.GATT_Find_Srv_Owner_Of_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GATT_Find_Srv_Owner_Of_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Multi_Rsp
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Blob_Rsp
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Rsp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_By_Type_Rsp
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Find_Char_Attribute
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Find_Attribute_To_Write
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Find_By_Type_Val_Rsp
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Find_Info_Rsp
</UL>

<P><STRONG><a name="[1aa]"></a>GATT_Gap_Add_Service</STRONG> (Thumb, 420 bytes, Stack size 88 bytes, gatt_server_gap.o(.text.GATT_Gap_Add_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = GATT_Gap_Add_Service &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_UPDATE_CHAR_VALUE
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ADD_SERVICE
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Core
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_INIT
</UL>

<P><STRONG><a name="[355]"></a>GATT_Get_Bearer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gatt.o(.text.GATT_Get_Bearer))
<BR><BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Get_Root_Bearer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Permit_Resp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Update_Char_Value_Core
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_New_Client_PDU
</UL>

<P><STRONG><a name="[34d]"></a>GATT_Get_Change_Vs_Server_Database</STRONG> (Thumb, 1208 bytes, Stack size 752 bytes, gatt_server_sdb.o(.text.GATT_Get_Change_Vs_Server_Database))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = GATT_Get_Change_Vs_Server_Database &rArr; SMP_Retrieve_GATT_Data &rArr; SDB_Read_Gatt_Data &rArr; SDB_Read_Sec_Record &rArr; RndAddr_Check_Resolvable_Address &rArr; RndAddr_Calculate_Address_Hash &rArr; BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Retrieve_GATT_Data
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Compute_Database_Hash
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Fetch_Handle
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Attr_Val
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Is_Multiple_Val_Attr
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Check_For_Service_Change
</UL>

<P><STRONG><a name="[354]"></a>GATT_Get_Root_Bearer</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gatt.o(.text.GATT_Get_Root_Bearer))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Get_Bearer
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Disconnection_Complete_Handler
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Get_Packet_Bearer
</UL>

<P><STRONG><a name="[3de]"></a>GATT_Init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gatt.o(.text.GATT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RESET
</UL>

<P><STRONG><a name="[358]"></a>GATT_Is_Multiple_Val_Attr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gatt_server.o(.text.GATT_Is_Multiple_Val_Attr))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Store_Server_Database
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Get_Change_Vs_Server_Database
</UL>

<P><STRONG><a name="[35a]"></a>GATT_L2cap_Data_Handler</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, gatt.o(.text.GATT_L2cap_Data_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = GATT_L2cap_Data_Handler &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gatt_server_confirmation
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Notif_Or_Ind
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Release
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_List_Insert_Tail
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Warning
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Stop_Timer
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Start_Timer
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Get_Packet_Bearer
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
</UL>

<P><STRONG><a name="[35e]"></a>GATT_MemAlloc</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gatt.o(.text.GATT_MemAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GATT_MemAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Assign
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RESET
</UL>

<P><STRONG><a name="[1d4]"></a>GATT_New_Client_PDU</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gatt_client.o(.text.GATT_New_Client_PDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GATT_New_Client_PDU &rArr; GATT_New_PDU &rArr; ACL_New &rArr; ACL_Alloc &rArr; ACL_Available_Blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_New_PDU
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Get_Bearer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_CONFIRM_INDICATION
</UL>

<P><STRONG><a name="[35f]"></a>GATT_New_PDU</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gatt.o(.text.GATT_New_PDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GATT_New_PDU &rArr; ACL_New &rArr; ACL_Alloc &rArr; ACL_Available_Blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_New
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Permit_Resp
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_New_Client_PDU
</UL>

<P><STRONG><a name="[2ce]"></a>GATT_Process</STRONG> (Thumb, 884 bytes, Stack size 56 bytes, gatt.o(.text.GATT_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712 + Unknown Stack Size
<LI>Call Chain = GATT_Process &rArr; GATT_Reset_To_Closed_State &rArr; GATT_Store_Server_Database &rArr; SMP_Save_GATT_Data &rArr; SDB_Write_Gatt_Data &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_GATT_Indication
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gatt_proc_timeout
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gatt_tx_pool_available
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_List_Insert_Head
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Check_For_Service_Change
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Multi_Rsp
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Blob_Rsp
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Rsp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_By_Type_Rsp
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Prepare_Write_Rsp
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Write_Rsp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Handle_Write_Cmd
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Error_Rsp
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Tx_Pool_Size
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Release
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_New_PDU
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_List_Remove
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Exec_Write_Rsp
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_By_Grp_Type_Rsp
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Find_By_Type_Val_Rsp
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Find_Info_Rsp
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Exchg_Mtu_Rsp
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Client_Handle_Notif
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet_Once
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Reset_To_Closed_State
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Warning
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Stop_Timer
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Start_Timer
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Get_Packet_Bearer
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStack_Process
</UL>

<P><STRONG><a name="[366]"></a>GATT_Reset_Bearer</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, gatt.o(.text.GATT_Reset_Bearer))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = GATT_Reset_Bearer &rArr; GATT_Send_Complete_Event &rArr; EVT_aci_gatt_proc_complete &rArr; ACI_GATT_PROC_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Release
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Complete_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[1eb]"></a>GATT_Search_Handle</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gatt_server.o(.text.GATT_Search_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GATT_Search_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_UPDATE_CHAR_VALUE
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Multi_Rsp
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Blob_Rsp
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Rsp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Update_Char_Value_Core
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Desc_Core
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Find_Char_Attribute
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Find_Attribute_To_Write
</UL>

<P><STRONG><a name="[367]"></a>GATT_Send_Complete_Event</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gatt_client.o(.text.GATT_Send_Complete_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = GATT_Send_Complete_Event &rArr; EVT_aci_gatt_proc_complete &rArr; ACI_GATT_PROC_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gatt_proc_complete
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Evt_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Reset_Bearer
</UL>

<P><STRONG><a name="[35c]"></a>GATT_Send_Notif_Or_Ind</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, gatt_server.o(.text.GATT_Send_Notif_Or_Ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Notification_Complete_Event
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Update_Char_Value_Core
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_L2cap_Data_Handler
</UL>

<P><STRONG><a name="[1d6]"></a>GATT_Send_Packet</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gatt.o(.text.GATT_Send_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GATT_Send_Packet &rArr; GATT_Send_Packet_Once &rArr; L2C_Send_Data &rArr; LECTRL_SendAclDataFromHostToController &rArr; LECTRL_SendAclDataToLL &rArr; ll_intf_acl_data_from_host_to_cntrlr &rArr; conn_mngr_send_pkt &rArr; evnt_schdlr_add_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_List_Insert_Tail
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet_Once
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_CONFIRM_INDICATION
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Notif_Or_Ind
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Permit_Resp
</UL>

<P><STRONG><a name="[368]"></a>GATT_Store_Server_Database</STRONG> (Thumb, 384 bytes, Stack size 752 bytes, gatt_server_sdb.o(.text.GATT_Store_Server_Database))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = GATT_Store_Server_Database &rArr; SMP_Save_GATT_Data &rArr; SDB_Write_Gatt_Data &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Save_GATT_Data
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Compute_Database_Hash
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Store
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Attr_Val
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Is_Multiple_Val_Attr
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[294]"></a>GATT_Timeout_Cb</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gatt.o(.text.GATT_Timeout_Cb))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLATCB_TimerExpiry
</UL>

<P><STRONG><a name="[29]"></a>GPDMA1_Channel0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbaxx_it.o(.text.GPDMA1_Channel0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPDMA1_Channel0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>GPDMA1_Channel1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbaxx_it.o(.text.GPDMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPDMA1_Channel1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[372]"></a>HAL_CRCEx_Polynomial_Set</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32wbaxx_hal_crc_ex.o(.text.HAL_CRCEx_Polynomial_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[2dc]"></a>HAL_CRC_Accumulate</STRONG> (Thumb, 722 bytes, Stack size 28 bytes, stm32wbaxx_hal_crc.o(.text.HAL_CRC_Accumulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_CRC_Accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_Accumulate
</UL>

<P><STRONG><a name="[2e0]"></a>HAL_CRC_Calculate</STRONG> (Thumb, 754 bytes, Stack size 28 bytes, stm32wbaxx_hal_crc.o(.text.HAL_CRC_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_CRC_Calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_Accumulate
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_Calculate
</UL>

<P><STRONG><a name="[2de]"></a>HAL_CRC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32wbaxx_hal_crc.o(.text.HAL_CRC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspDeInit
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_Accumulate
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_Calculate
</UL>

<P><STRONG><a name="[2df]"></a>HAL_CRC_Init</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, stm32wbaxx_hal_crc.o(.text.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_Accumulate
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_Calculate
</UL>

<P><STRONG><a name="[373]"></a>HAL_CRC_MspDeInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32wbaxx_hal_msp.o(.text.HAL_CRC_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_DeInit
</UL>

<P><STRONG><a name="[374]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, stm32wbaxx_hal_msp.o(.text.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[3a9]"></a>HAL_DMAEx_List_Start_IT</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, stm32wbaxx_hal_dma_ex.o(.text.HAL_DMAEx_List_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMAEx_List_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[375]"></a>HAL_DMA_Abort</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32wbaxx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[3a1]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32wbaxx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[376]"></a>HAL_DMA_ConfigChannelAttributes</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32wbaxx_hal_dma.o(.text.HAL_DMA_ConfigChannelAttributes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_ConfigChannelAttributes
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[377]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32wbaxx_hal_dma.o(.text.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[371]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 442 bytes, Stack size 8 bytes, stm32wbaxx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA1_Channel1_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA1_Channel0_IRQHandler
</UL>

<P><STRONG><a name="[378]"></a>HAL_DMA_Init</STRONG> (Thumb, 804 bytes, Stack size 24 bytes, stm32wbaxx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[379]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32wbaxx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[2c3]"></a>HAL_EXTI_GetHandle</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32wbaxx_hal_exti.o(.text.HAL_EXTI_GetHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_EXTI_GetHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>

<P><STRONG><a name="[2c2]"></a>HAL_EXTI_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, stm32wbaxx_hal_exti.o(.text.HAL_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_EXTI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_IRQHandler
</UL>

<P><STRONG><a name="[2c4]"></a>HAL_EXTI_RegisterCallback</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32wbaxx_hal_exti.o(.text.HAL_EXTI_RegisterCallback))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
</UL>

<P><STRONG><a name="[326]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, stm32wbaxx_hal_flash_ex.o(.text.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_EraseSectors
</UL>

<P><STRONG><a name="[32e]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32wbaxx_hal_flash.o(.text.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_BackgroundProcess
</UL>

<P><STRONG><a name="[328]"></a>HAL_FLASH_Program</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, stm32wbaxx_hal_flash.o(.text.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_Program_Burst
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Burst
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_WriteData
</UL>

<P><STRONG><a name="[32d]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32wbaxx_hal_flash.o(.text.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_BackgroundProcess
</UL>

<P><STRONG><a name="[37a]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, stm32wbaxx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[2bc]"></a>HAL_GPIO_Init</STRONG> (Thumb, 754 bytes, Stack size 48 bytes, stm32wbaxx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[2c0]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32wbaxx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
</UL>

<P><STRONG><a name="[2bd]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32wbaxx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[32c]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbaxx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[576]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbaxx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[37b]"></a>HAL_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32wbaxx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_Init &rArr; HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37f]"></a>HAL_InitTick</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32wbaxx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[380]"></a>HAL_MspInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32wbaxx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[382]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32wbaxx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_DisableRadioIT
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_DisableSpecificIRQ
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setup
</UL>

<P><STRONG><a name="[2c6]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32wbaxx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_EnableRadioIT
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_EnableSpecificIRQ
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_SetupSwLowIT
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_SetupRadioIT
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setup
</UL>

<P><STRONG><a name="[42a]"></a>HAL_NVIC_SetPendingIRQ</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32wbaxx_hal_cortex.o(.text.HAL_NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_TriggerSwLowIT
</UL>

<P><STRONG><a name="[2c5]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32wbaxx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_IRQHandler
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_TriggerSwLowIT
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_SetupSwLowIT
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_SetupRadioIT
</UL>

<P><STRONG><a name="[37c]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32wbaxx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[383]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, stm32wbaxx_hal_pwr_ex.o(.text.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[384]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32wbaxx_hal_pwr_ex.o(.text.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PWREx_ControlVoltageScaling
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[578]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbaxx_hal_pwr.o(.text.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[385]"></a>HAL_PWR_EnableWakeUpPin</STRONG> (Thumb, 702 bytes, Stack size 16 bytes, stm32wbaxx_hal_pwr.o(.text.HAL_PWR_EnableWakeUpPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWR_EnableWakeUpPin
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[386]"></a>HAL_RAMCFG_ConfigWaitState</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32wbaxx_hal_ramcfg.o(.text.HAL_RAMCFG_ConfigWaitState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setsystemclock
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_hserdy_isr
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchHse16toHse32
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setup
</UL>

<P><STRONG><a name="[387]"></a>HAL_RAMCFG_GetWaitState</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32wbaxx_hal_ramcfg.o(.text.HAL_RAMCFG_GetWaitState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RAMCFG_GetWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_init
</UL>

<P><STRONG><a name="[388]"></a>HAL_RAMCFG_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32wbaxx_hal_ramcfg.o(.text.HAL_RAMCFG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RAMCFG_Init &rArr; HAL_RAMCFG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RAMCFG_MspInit
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[389]"></a>HAL_RAMCFG_MspInit</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32wbaxx_hal_msp.o(.text.HAL_RAMCFG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RAMCFG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RAMCFG_Init
</UL>

<P><STRONG><a name="[415]"></a>HAL_RCCEx_DisableRadioBBClock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbaxx_hal_rcc_ex.o(.text.HAL_RCCEx_DisableRadioBBClock))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_AclkCtrl
</UL>

<P><STRONG><a name="[417]"></a>HAL_RCCEx_EnableRadioBBClock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wbaxx_hal_rcc_ex.o(.text.HAL_RCCEx_EnableRadioBBClock))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_AclkCtrl
</UL>

<P><STRONG><a name="[38a]"></a>HAL_RCCEx_HSESetTrimming</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32wbaxx_hal_rcc_ex.o(.text.HAL_RCCEx_HSESetTrimming))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_HSESetTrimming
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Config
</UL>

<P><STRONG><a name="[38b]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1306 bytes, Stack size 40 bytes, stm32wbaxx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38c]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 1040 bytes, Stack size 32 bytes, stm32wbaxx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[583]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, stm32wbaxx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[586]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, stm32wbaxx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[584]"></a>HAL_RCC_GetPCLK7Freq</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, stm32wbaxx_hal_rcc.o(.text.HAL_RCC_GetPCLK7Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK7Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[585]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, stm32wbaxx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[38d]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 2224 bytes, Stack size 48 bytes, stm32wbaxx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[396]"></a>HAL_RTCEx_AlarmBEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbaxx_hal_rtc_ex.o(.text.HAL_RTCEx_AlarmBEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[38e]"></a>HAL_RTCEx_BKUPRead</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32wbaxx_hal_rtc_ex.o(.text.HAL_RTCEx_BKUPRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_BKUPRead
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SSRUEventCallback
</UL>

<P><STRONG><a name="[38f]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32wbaxx_hal_rtc_ex.o(.text.HAL_RTCEx_BKUPWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTCEx_BKUPWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SSRUEventCallback
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Init
</UL>

<P><STRONG><a name="[57b]"></a>HAL_RTCEx_EnableBypassShadow</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32wbaxx_hal_rtc_ex.o(.text.HAL_RTCEx_EnableBypassShadow))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Init
</UL>

<P><STRONG><a name="[390]"></a>HAL_RTCEx_PrivilegeModeSet</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, stm32wbaxx_hal_rtc_ex.o(.text.HAL_RTCEx_PrivilegeModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_PrivilegeModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[391]"></a>HAL_RTCEx_SSRUEventCallback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer_if.o(.text.HAL_RTCEx_SSRUEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTCEx_SSRUEventCallback &rArr; HAL_RTCEx_BKUPWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SSRUIRQHandler
</UL>

<P><STRONG><a name="[392]"></a>HAL_RTCEx_SSRUIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32wbaxx_hal_rtc_ex.o(.text.HAL_RTCEx_SSRUIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTCEx_SSRUIRQHandler &rArr; HAL_RTCEx_SSRUEventCallback &rArr; HAL_RTCEx_BKUPWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SSRUEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[440]"></a>HAL_RTCEx_SetSSRU_IT</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32wbaxx_hal_rtc_ex.o(.text.HAL_RTCEx_SetSSRU_IT))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[393]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer_if.o(.text.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RTC_AlarmAEventCallback &rArr; UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[395]"></a>HAL_RTC_AlarmIRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32wbaxx_hal_rtc.o(.text.HAL_RTC_AlarmIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[397]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32wbaxx_hal_rtc.o(.text.HAL_RTC_DeactivateAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StopTimer
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StartTimer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Init
</UL>

<P><STRONG><a name="[398]"></a>HAL_RTC_Init</STRONG> (Thumb, 634 bytes, Stack size 16 bytes, stm32wbaxx_hal_rtc.o(.text.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[399]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 108 bytes, Stack size 88 bytes, stm32wbaxx_hal_msp.o(.text.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[39b]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 1306 bytes, Stack size 32 bytes, stm32wbaxx_hal_rtc.o(.text.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StartTimer
</UL>

<P><STRONG><a name="[37e]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, stm32wbaxx_hal_cortex.o(.text.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[381]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32wbaxx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[39c]"></a>HAL_UARTEx_EnableFifoMode</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32wbaxx_hal_uart_ex.o(.text.HAL_UARTEx_EnableFifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UARTEx_EnableFifoMode
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[92]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[90]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart_ex.o(.text.HAL_UARTEx_RxFifoFullCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[39d]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, stm32wbaxx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[39e]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, stm32wbaxx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[91]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart_ex.o(.text.HAL_UARTEx_TxFifoEmptyCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[8d]"></a>HAL_UART_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.HAL_UART_AbortCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[8f]"></a>HAL_UART_AbortReceiveCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.HAL_UART_AbortReceiveCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[8e]"></a>HAL_UART_AbortTransmitCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.HAL_UART_AbortTransmitCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[39f]"></a>HAL_UART_DeInit</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32wbaxx_hal_uart.o(.text.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
</UL>

<P><STRONG><a name="[8c]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[3a0]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1600 bytes, Stack size 16 bytes, stm32wbaxx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[3a2]"></a>HAL_UART_Init</STRONG> (Thumb, 316 bytes, Stack size 8 bytes, stm32wbaxx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[86]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32wbaxx_hal_msp.o(.text.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_DeInit)
</UL>
<P><STRONG><a name="[93]"></a>HAL_UART_MspInit</STRONG> (Thumb, 388 bytes, Stack size 128 bytes, stm32wbaxx_hal_msp.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_ConfigChannelAttributes
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[3a6]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, stm32wbaxx_hal_uart.o(.text.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransmitDMA
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StartRx
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartIf_RxCpltCallback
</UL>

<P><STRONG><a name="[8b]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.HAL_UART_RxCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[8a]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.HAL_UART_RxHalfCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[3a8]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, stm32wbaxx_hal_uart.o(.text.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_List_Start_IT
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransmitDMA
</UL>

<P><STRONG><a name="[587]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 292 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.HAL_UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TransmitDMA
</UL>

<P><STRONG><a name="[89]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[88]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.HAL_UART_TxHalfCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[49]"></a>HASH_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32wbaxx_it.o(.text.HASH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HASH_IRQHandler &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[3aa]"></a>HCI_DISCONNECTION_COMPLETE_EVENT</STRONG> (Thumb, 26 bytes, Stack size 272 bytes, api.o(.text.HCI_DISCONNECTION_COMPLETE_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = HCI_DISCONNECTION_COMPLETE_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_45
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_DisconnectionComplete
</UL>

<P><STRONG><a name="[3ac]"></a>HCI_ENCRYPTION_CHANGE_EVENT</STRONG> (Thumb, 26 bytes, Stack size 272 bytes, api.o(.text.HCI_ENCRYPTION_CHANGE_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = HCI_ENCRYPTION_CHANGE_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_45
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_EncryptionChangeEvent
</UL>

<P><STRONG><a name="[3ad]"></a>HCI_ENCRYPTION_KEY_REFRESH_COMPLETE_EVENT</STRONG> (Thumb, 38 bytes, Stack size 272 bytes, api.o(.text.HCI_ENCRYPTION_KEY_REFRESH_COMPLETE_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = HCI_ENCRYPTION_KEY_REFRESH_COMPLETE_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_EncryptionKeyRefreshCompleteEvent
</UL>

<P><STRONG><a name="[2c7]"></a>HCI_HARDWARE_ERROR_EVENT</STRONG> (Thumb, 28 bytes, Stack size 272 bytes, api.o(.text.HCI_HARDWARE_ERROR_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostStack_Process
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_HwErrorEvent
</UL>

<P><STRONG><a name="[1a4]"></a>HCI_LE_ADD_DEVICE_TO_FILTER_ACCEPT_LIST</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, le_ctrl.o(.text.HCI_LE_ADD_DEVICE_TO_FILTER_ACCEPT_LIST))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HCI_LE_ADD_DEVICE_TO_FILTER_ACCEPT_LIST &rArr; ll_intf_le_add_device_white_list &rArr; non_conn_mngr_add_rmv_clr_device_white_list &rArr; llhwc_lst_search &rArr; llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_add_device_white_list
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_CONFIGURE_FILTER_ACCEPT_LIST
</UL>

<P><STRONG><a name="[3af]"></a>HCI_LE_ADVERTISING_REPORT_EVENT</STRONG> (Thumb, 148 bytes, Stack size 296 bytes, api.o(.text.HCI_LE_ADVERTISING_REPORT_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = HCI_LE_ADVERTISING_REPORT_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeAdvertisingReportEvent
</UL>

<P><STRONG><a name="[3b0]"></a>HCI_LE_CHANNEL_SELECTION_ALGORITHM_EVENT</STRONG> (Thumb, 44 bytes, Stack size 272 bytes, api.o(.text.HCI_LE_CHANNEL_SELECTION_ALGORITHM_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = HCI_LE_CHANNEL_SELECTION_ALGORITHM_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeChannelSelectionAlgorithmEvent
</UL>

<P><STRONG><a name="[1a2]"></a>HCI_LE_CLEAR_FILTER_ACCEPT_LIST</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, le_ctrl.o(.text.HCI_LE_CLEAR_FILTER_ACCEPT_LIST))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HCI_LE_CLEAR_FILTER_ACCEPT_LIST &rArr; ll_intf_le_clear_white_list &rArr; non_conn_mngr_add_rmv_clr_device_white_list &rArr; llhwc_lst_search &rArr; llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_clear_white_list
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_CONFIGURE_FILTER_ACCEPT_LIST
</UL>

<P><STRONG><a name="[3b2]"></a>HCI_LE_CONNECTION_COMPLETE_EVENT</STRONG> (Thumb, 98 bytes, Stack size 272 bytes, api.o(.text.HCI_LE_CONNECTION_COMPLETE_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = HCI_LE_CONNECTION_COMPLETE_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_53
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeConnectionCompleteEvent
</UL>

<P><STRONG><a name="[3b4]"></a>HCI_LE_CONNECTION_UPDATE_COMPLETE_EVENT</STRONG> (Thumb, 76 bytes, Stack size 272 bytes, api.o(.text.HCI_LE_CONNECTION_UPDATE_COMPLETE_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = HCI_LE_CONNECTION_UPDATE_COMPLETE_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeConnectionUpdateCompleteEvent
</UL>

<P><STRONG><a name="[3b5]"></a>HCI_LE_DATA_LENGTH_CHANGE_EVENT</STRONG> (Thumb, 22 bytes, Stack size 272 bytes, api.o(.text.HCI_LE_DATA_LENGTH_CHANGE_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = HCI_LE_DATA_LENGTH_CHANGE_EVENT &rArr; OUTLINED_FUNCTION_26 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeDataLengthChangeEvent
</UL>

<P><STRONG><a name="[3b8]"></a>HCI_LE_DIRECTED_ADVERTISING_REPORT_EVENT</STRONG> (Thumb, 106 bytes, Stack size 288 bytes, api.o(.text.HCI_LE_DIRECTED_ADVERTISING_REPORT_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = HCI_LE_DIRECTED_ADVERTISING_REPORT_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeDirectedAdvertisingReportEvent
</UL>

<P><STRONG><a name="[3b9]"></a>HCI_LE_ENABLE_ENCRYPTION</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, le_ctrl.o(.text.HCI_LE_ENABLE_ENCRYPTION))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HCI_LE_ENABLE_ENCRYPTION &rArr; ll_intf_le_strt_encrpt &rArr; llcp_encryption_req &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_strt_encrpt
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Enable_Encryption
</UL>

<P><STRONG><a name="[3bb]"></a>HCI_LE_ENHANCED_CONNECTION_COMPLETE_EVENT</STRONG> (Thumb, 120 bytes, Stack size 280 bytes, api.o(.text.HCI_LE_ENHANCED_CONNECTION_COMPLETE_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = HCI_LE_ENHANCED_CONNECTION_COMPLETE_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_53
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeEnhancedConnectionCompleteEvent
</UL>

<P><STRONG><a name="[3bc]"></a>HCI_LE_GENERATE_DHKEY</STRONG> (Thumb, 72 bytes, Stack size 88 bytes, pka.o(.text.HCI_LE_GENERATE_DHKEY))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HCI_LE_GENERATE_DHKEY &rArr; BLEPLAT_PkaStartDhKey &rArr; BPKA_StartDhKey &rArr; HW_PKA_Enable &rArr; HW_RNG_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_PkaStartDhKey
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Pairing_Public_Key_Rx_Handler
</UL>

<P><STRONG><a name="[3be]"></a>HCI_LE_GENERATE_DHKEY_COMPLETE_EVENT</STRONG> (Thumb, 38 bytes, Stack size 272 bytes, api.o(.text.HCI_LE_GENERATE_DHKEY_COMPLETE_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = HCI_LE_GENERATE_DHKEY_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_48 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_48
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeGeneratedDHKeyCompleteEvent
</UL>

<P><STRONG><a name="[3c0]"></a>HCI_LE_LONG_TERM_KEY_REQUEST_EVENT</STRONG> (Thumb, 62 bytes, Stack size 280 bytes, api.o(.text.HCI_LE_LONG_TERM_KEY_REQUEST_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = HCI_LE_LONG_TERM_KEY_REQUEST_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeLongTermKeyRequestEvent
</UL>

<P><STRONG><a name="[3c1]"></a>HCI_LE_LONG_TERM_KEY_REQUEST_NEGATIVE_REPLY</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, le_ctrl.o(.text.HCI_LE_LONG_TERM_KEY_REQUEST_NEGATIVE_REPLY))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = HCI_LE_LONG_TERM_KEY_REQUEST_NEGATIVE_REPLY &rArr; ll_intf_rcvd_long_trm_key &rArr; llcp_start_encryption &rArr; llcp_disconnect &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_rcvd_long_trm_key
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[3c3]"></a>HCI_LE_LONG_TERM_KEY_REQUEST_REPLY</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, le_ctrl.o(.text.HCI_LE_LONG_TERM_KEY_REQUEST_REPLY))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = HCI_LE_LONG_TERM_KEY_REQUEST_REPLY &rArr; ll_intf_rcvd_long_trm_key &rArr; llcp_start_encryption &rArr; llcp_disconnect &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_rcvd_long_trm_key
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[3c4]"></a>HCI_LE_PHY_UPDATE_COMPLETE_EVENT</STRONG> (Thumb, 52 bytes, Stack size 272 bytes, api.o(.text.HCI_LE_PHY_UPDATE_COMPLETE_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = HCI_LE_PHY_UPDATE_COMPLETE_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LePhyUpdateCompleteEvent
</UL>

<P><STRONG><a name="[338]"></a>HCI_LE_READ_ADVERTISING_PHYSICAL_CHANNEL_TX_POWER</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, le_ctrl.o(.text.HCI_LE_READ_ADVERTISING_PHYSICAL_CHANNEL_TX_POWER))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCI_LE_READ_ADVERTISING_PHYSICAL_CHANNEL_TX_POWER &rArr; ll_intf_le_read_adv_channel_tx_power &rArr; db_get_advertising_channel_tx_power
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_read_adv_channel_tx_power
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Legacy_Start
</UL>

<P><STRONG><a name="[3c6]"></a>HCI_LE_READ_LOCAL_P256_PUBLIC_KEY</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, pka.o(.text.HCI_LE_READ_LOCAL_P256_PUBLIC_KEY))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HCI_LE_READ_LOCAL_P256_PUBLIC_KEY &rArr; BLEPLAT_PkaStartP256Key &rArr; BPKA_StartP256Key &rArr; HW_PKA_P256_StartEccScalarMul &rArr; HW_PKA_WriteOperand
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_PkaStartP256Key
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_RngGet
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memcmp_Rev
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Public_Key_Generation_Process
</UL>

<P><STRONG><a name="[3c8]"></a>HCI_LE_READ_LOCAL_P256_PUBLIC_KEY_COMPLETE_EVENT</STRONG> (Thumb, 38 bytes, Stack size 272 bytes, api.o(.text.HCI_LE_READ_LOCAL_P256_PUBLIC_KEY_COMPLETE_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = HCI_LE_READ_LOCAL_P256_PUBLIC_KEY_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_48 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_48
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeReadLocalP256PublicKeyCompleteEvent
</UL>

<P><STRONG><a name="[3c9]"></a>HCI_LE_READ_REMOTE_FEATURES_PAGE_0_COMPLETE_EVENT</STRONG> (Thumb, 50 bytes, Stack size 272 bytes, api.o(.text.HCI_LE_READ_REMOTE_FEATURES_PAGE_0_COMPLETE_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = HCI_LE_READ_REMOTE_FEATURES_PAGE_0_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_48 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_48
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeReadRemoteUsedFeaturesCompleteEvent
</UL>

<P><STRONG><a name="[3ca]"></a>HCI_LE_REMOTE_CONNECTION_PARAMETER_REQUEST_EVENT</STRONG> (Thumb, 22 bytes, Stack size 272 bytes, api.o(.text.HCI_LE_REMOTE_CONNECTION_PARAMETER_REQUEST_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = HCI_LE_REMOTE_CONNECTION_PARAMETER_REQUEST_EVENT &rArr; OUTLINED_FUNCTION_26 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeRemoteConnParamReqEvent
</UL>

<P><STRONG><a name="[343]"></a>HCI_LE_SET_ADDRESS_RESOLUTION_ENABLE</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, le_ctrl.o(.text.HCI_LE_SET_ADDRESS_RESOLUTION_ENABLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCI_LE_SET_ADDRESS_RESOLUTION_ENABLE &rArr; ll_intf_le_set_addr_rsln_enble &rArr; prvcy_mngr_set_addr_rsln_enble &rArr; non_conn_mngr_event_status_check
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_addr_rsln_enble
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Enable_Privacy
</UL>

<P><STRONG><a name="[335]"></a>HCI_LE_SET_ADVERTISING_DATA</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, le_ctrl.o(.text.HCI_LE_SET_ADVERTISING_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = HCI_LE_SET_ADVERTISING_DATA &rArr; ll_intf_le_set_adv_data &rArr; non_conn_mngr_set_adv_data &rArr; prvcy_mngr_RPA_Regeneration &rArr; prvcy_mngr_addr_gen &rArr; llhwc_128_encrypt &rArr; llhwc_cmn_crypto &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_adv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Legacy_SetData
</UL>

<P><STRONG><a name="[1bf]"></a>HCI_LE_SET_ADVERTISING_ENABLE</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, le_ctrl.o(.text.HCI_LE_SET_ADVERTISING_ENABLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = HCI_LE_SET_ADVERTISING_ENABLE &rArr; ll_intf_le_set_adv_enable &rArr; non_conn_mngr_adv_enable &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_adv_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_SET_NON_DISCOVERABLE
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Lim_Disc_Timeout_Cb
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Legacy_Start
</UL>

<P><STRONG><a name="[339]"></a>HCI_LE_SET_ADVERTISING_PARAMETERS</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, le_ctrl.o(.text.HCI_LE_SET_ADVERTISING_PARAMETERS))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HCI_LE_SET_ADVERTISING_PARAMETERS &rArr; ll_intf_le_set_adv_params &rArr; non_conn_mngr_set_adv_params &rArr; non_conn_mngr_adv_manage_connection_ctx_allocation &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_adv_params
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Legacy_Start
</UL>

<P><STRONG><a name="[3cf]"></a>HCI_LE_SET_DEFAULT_PHY</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, le_ctrl.o(.text.HCI_LE_SET_DEFAULT_PHY))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HCI_LE_SET_DEFAULT_PHY &rArr; ll_intf_le_set_default_phy_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_default_phy_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_default_phy
</UL>

<P><STRONG><a name="[347]"></a>HCI_LE_SET_RANDOM_ADDRESS</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, le_ctrl.o(.text.HCI_LE_SET_RANDOM_ADDRESS))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HCI_LE_SET_RANDOM_ADDRESS &rArr; ll_intf_le_set_random_addr &rArr; non_conn_mngr_set_random_address &rArr; db_set_random_address &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_random_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Own_Address
</UL>

<P><STRONG><a name="[348]"></a>HCI_LE_SET_SCAN_ENABLE</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, le_ctrl.o(.text.HCI_LE_SET_SCAN_ENABLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = HCI_LE_SET_SCAN_ENABLE &rArr; ll_intf_le_set_scan_enable &rArr; non_conn_mngr_scan_enable &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_scan_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Stop_Scan
</UL>

<P><STRONG><a name="[3d3]"></a>HCI_READ_LOCAL_VERSION_INFORMATION</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, le_ctrl.o(.text.HCI_READ_LOCAL_VERSION_INFORMATION))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HCI_READ_LOCAL_VERSION_INFORMATION &rArr; ll_intf_read_local_ver_info &rArr; db_get_local_vrsn_info
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_read_local_ver_info
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_local_version_information
</UL>

<P><STRONG><a name="[3d5]"></a>HCI_READ_REMOTE_VERSION_INFORMATION_COMPLETE_EVENT</STRONG> (Thumb, 64 bytes, Stack size 272 bytes, api.o(.text.HCI_READ_REMOTE_VERSION_INFORMATION_COMPLETE_EVENT))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = HCI_READ_REMOTE_VERSION_INFORMATION_COMPLETE_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_ReadRemoteVersionInformationComplete
</UL>

<P><STRONG><a name="[2cc]"></a>HCI_RESET</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, blestack_main.o(.text.HCI_RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = HCI_RESET &rArr; LECTRL_Reset &rArr; ll_intf_reset &rArr; evnt_schdlr_set_phy_clbr_params &rArr; llhwc_prdc_clbr_init &rArr; evnt_schdlr_rgstr_prdc_clbr_evnt &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_Init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Init
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Init
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Init
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Db_MemAlloc
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_MemAlloc
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MemAlloc
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_MemAlloc
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_MemAlloc
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_Reset
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgData_Init
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStack_Init
</UL>

<P><STRONG><a name="[3e0]"></a>HWCB_RNG_Process</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_entry.o(.text.HWCB_RNG_Process))
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_Process
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_Get
</UL>

<P><STRONG><a name="[282]"></a>HW_AES_Crypt</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, hw_aes.o(.text.HW_AES_Crypt))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAES_CmacCompute
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAES_EcbCrypt
</UL>

<P><STRONG><a name="[283]"></a>HW_AES_Disable</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, hw_aes.o(.text.HW_AES_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAES_CmacCompute
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAES_EcbCrypt
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAES_Reset
</UL>

<P><STRONG><a name="[285]"></a>HW_AES_Enable</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, hw_aes.o(.text.HW_AES_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HW_AES_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAES_CmacSetKey
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAES_EcbCrypt
</UL>

<P><STRONG><a name="[286]"></a>HW_AES_SetKey</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, hw_aes.o(.text.HW_AES_SetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_AES_SetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAES_CmacSetKey
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAES_EcbCrypt
</UL>

<P><STRONG><a name="[2ba]"></a>HW_PKA_Disable</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, hw_pka.o(.text.HW_PKA_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_Process
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_Reset
</UL>

<P><STRONG><a name="[2bb]"></a>HW_PKA_Enable</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, hw_pka.o(.text.HW_PKA_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_PKA_Enable &rArr; HW_RNG_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_DisableClock
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_StartDhKey
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_StartP256Key
</UL>

<P><STRONG><a name="[2b3]"></a>HW_PKA_EndOfOperation</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hw_pka.o(.text.HW_PKA_EndOfOperation))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_Process
</UL>

<P><STRONG><a name="[2b8]"></a>HW_PKA_P256_IsPointCheckOk</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hw_pka_p256.o(.text.HW_PKA_P256_IsPointCheckOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_PKA_P256_IsPointCheckOk
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_ReadSingleOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_Process
</UL>

<P><STRONG><a name="[2b5]"></a>HW_PKA_P256_IsRangeCheckOk</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hw_pka_p256.o(.text.HW_PKA_P256_IsRangeCheckOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_PKA_P256_IsRangeCheckOk
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_ReadSingleOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_Process
</UL>

<P><STRONG><a name="[2b4]"></a>HW_PKA_P256_ReadEccScalarMul</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hw_pka_p256.o(.text.HW_PKA_P256_ReadEccScalarMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_PKA_P256_ReadEccScalarMul &rArr; HW_PKA_ReadResult
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_ReadResult
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_Process
</UL>

<P><STRONG><a name="[2b9]"></a>HW_PKA_P256_StartEccScalarMul</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, hw_pka_p256.o(.text.HW_PKA_P256_StartEccScalarMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_PKA_P256_StartEccScalarMul &rArr; HW_PKA_WriteOperand
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_Start
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_WriteOperand
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_WriteSingleInput
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_Process
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_StartP256Key
</UL>

<P><STRONG><a name="[2b7]"></a>HW_PKA_P256_StartPointCheck</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, hw_pka_p256.o(.text.HW_PKA_P256_StartPointCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_PKA_P256_StartPointCheck &rArr; HW_PKA_WriteOperand
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_Start
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_WriteOperand
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_WriteSingleInput
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_Process
</UL>

<P><STRONG><a name="[2b6]"></a>HW_PKA_P256_StartRangeCheck</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hw_pka_p256.o(.text.HW_PKA_P256_StartRangeCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_PKA_P256_StartRangeCheck &rArr; HW_PKA_WriteOperand
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_Start
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_WriteOperand
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_WriteSingleInput
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_Process
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKA_StartDhKey
</UL>

<P><STRONG><a name="[3e4]"></a>HW_PKA_ReadResult</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, hw_pka.o(.text.HW_PKA_ReadResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_PKA_ReadResult
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_ReadEccScalarMul
</UL>

<P><STRONG><a name="[3e3]"></a>HW_PKA_ReadSingleOutput</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hw_pka.o(.text.HW_PKA_ReadSingleOutput))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_IsPointCheckOk
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_IsRangeCheckOk
</UL>

<P><STRONG><a name="[3e7]"></a>HW_PKA_Start</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hw_pka.o(.text.HW_PKA_Start))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_StartPointCheck
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_StartRangeCheck
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_StartEccScalarMul
</UL>

<P><STRONG><a name="[3e6]"></a>HW_PKA_WriteOperand</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, hw_pka.o(.text.HW_PKA_WriteOperand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_PKA_WriteOperand
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_StartPointCheck
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_StartRangeCheck
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_StartEccScalarMul
</UL>

<P><STRONG><a name="[3e5]"></a>HW_PKA_WriteSingleInput</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hw_pka.o(.text.HW_PKA_WriteSingleInput))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_StartPointCheck
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_StartRangeCheck
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_P256_StartEccScalarMul
</UL>

<P><STRONG><a name="[3e2]"></a>HW_RNG_DisableClock</STRONG> (Thumb, 150 bytes, Stack size 4 bytes, hw_rng.o(.text.HW_RNG_DisableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HW_RNG_DisableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_KERNEL_CLK_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_Enable
</UL>

<P><STRONG><a name="[3e1]"></a>HW_RNG_EnableClock</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hw_rng.o(.text.HW_RNG_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_RNG_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_KERNEL_CLK_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PKA_Enable
</UL>

<P><STRONG><a name="[2a5]"></a>HW_RNG_Get</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, hw_rng.o(.text.HW_RNG_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_RNG_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWCB_RNG_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_GetRNG
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_RngGet
</UL>

<P><STRONG><a name="[3ea]"></a>HW_RNG_Init</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, hw_rng.o(.text.HW_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_RNG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_DEBUG_SIGNAL_RESET
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_DEBUG_SIGNAL_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_Process
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[9d]"></a>HW_RNG_Process</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hw_rng.o(.text.HW_RNG_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_RNG_Process &rArr; HW_RNG_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWCB_RNG_Process
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_Init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_Run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.MX_APPE_Init)
</UL>
<P><STRONG><a name="[439]"></a>HW_RNG_SetPoolThreshold</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hw_rng.o(.text.HW_RNG_SetPoolThreshold))
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[3ec]"></a>HW_RNG_Start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hw_rng.o(.text.HW_RNG_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_RNG_Start &rArr; HW_RNG_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbaxx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[3ed]"></a>HostStack_Process</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, host_stack_if.o(.text.HostStack_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = HostStack_Process &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_HARDWARE_ERROR_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_bg_process
</UL>

<P><STRONG><a name="[3bd]"></a>Is_Empty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stack_utils.o(.text.Is_Empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Is_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_GENERATE_DHKEY
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Init_OOB_SC
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Local_Public_Key_Unavailable
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Connection_Complete_Handler
</UL>

<P><STRONG><a name="[3f0]"></a>L2C_CPU_Req_Rx_Handler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, l2cap_cpu.o(.text.L2C_CPU_Req_Rx_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = L2C_CPU_Req_Rx_Handler &rArr; EVT_aci_l2cap_connection_update_req &rArr; ACI_L2CAP_CONNECTION_UPDATE_REQ_EVENT &rArr; OUTLINED_FUNCTION_50 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_l2cap_connection_update_req
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Command_Reject
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
</UL>

<P><STRONG><a name="[3f2]"></a>L2C_CPU_Rsp_Rx_Handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, l2cap_cpu.o(.text.L2C_CPU_Rsp_Rx_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = L2C_CPU_Rsp_Rx_Handler &rArr; EVT_aci_l2cap_connection_update_resp &rArr; ACI_L2CAP_CONNECTION_UPDATE_RESP_EVENT &rArr; OUTLINED_FUNCTION_28 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_l2cap_connection_update_resp
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Stop_Timer
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Command_Reject
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
</UL>

<P><STRONG><a name="[33d]"></a>L2C_Connection_Complete_Handler</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, l2cap.o(.text.L2C_Connection_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = L2C_Connection_Complete_Handler &rArr; L2C_Get_Connection
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Get_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Connection_Complete_Handler
</UL>

<P><STRONG><a name="[342]"></a>L2C_Disconnection_Complete_Handler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, l2cap.o(.text.L2C_Disconnection_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = L2C_Disconnection_Complete_Handler &rArr; L2C_Stop_Timer &rArr; BLEPLAT_TimerStop &rArr; BLE_TIMER_Stop &rArr; AMM_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Stop_Timer
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Get_Connection
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Discard_Recomb_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Disconnection_Complete_Handler
</UL>

<P><STRONG><a name="[1fa]"></a>L2C_Get_Connection</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, l2cap.o(.text.L2C_Get_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = L2C_Get_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Disconnection_Complete_Handler
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Handler
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rx_Data_Handler
</UL>

<P><STRONG><a name="[3fa]"></a>L2C_Increment_Identifier</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, l2cap.o(.text.L2C_Increment_Identifier))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Start_Timer
</UL>

<P><STRONG><a name="[3dc]"></a>L2C_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, l2cap.o(.text.L2C_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RESET
</UL>

<P><STRONG><a name="[3d9]"></a>L2C_MemAlloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, l2cap.o(.text.L2C_MemAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = L2C_MemAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Assign
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RESET
</UL>

<P><STRONG><a name="[3f7]"></a>L2C_Rx_Data_Handler</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, l2cap.o(.text.L2C_Rx_Data_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = L2C_Rx_Data_Handler &rArr; L2C_Mux_Acl_Packet &rArr; SMP_L2cap_Data_Handler &rArr; SMP_Key_Dist_Tx_Complete_Handler &rArr; SMP_Pairing_Success &rArr; SDB_Write_Sec_Record &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_warning
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Get_Connection
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Release
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Append
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Discard_Recomb_Data
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_UpperLayerCallback
</UL>

<P><STRONG><a name="[3f1]"></a>L2C_Send_Command_Reject</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, l2cap.o(.text.L2C_Send_Command_Reject))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = L2C_Send_Command_Reject &rArr; L2C_Send_Signaling_Packet &rArr; L2C_Send_Packet &rArr; L2C_Send_Data &rArr; LECTRL_SendAclDataFromHostToController &rArr; LECTRL_SendAclDataToLL &rArr; ll_intf_acl_data_from_host_to_cntrlr &rArr; conn_mngr_send_pkt &rArr; evnt_schdlr_add_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Signaling_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_CPU_Req_Rx_Handler
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_CPU_Rsp_Rx_Handler
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
</UL>

<P><STRONG><a name="[36b]"></a>L2C_Send_Data</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, l2cap.o(.text.L2C_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = L2C_Send_Data &rArr; LECTRL_SendAclDataFromHostToController &rArr; LECTRL_SendAclDataToLL &rArr; ll_intf_acl_data_from_host_to_cntrlr &rArr; conn_mngr_send_pkt &rArr; evnt_schdlr_add_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_SendAclDataFromHostToController
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Send_PDU
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Packet
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet_Once
</UL>

<P><STRONG><a name="[3f9]"></a>L2C_Send_Packet</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, l2cap.o(.text.L2C_Send_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = L2C_Send_Packet &rArr; L2C_Send_Data &rArr; LECTRL_SendAclDataFromHostToController &rArr; LECTRL_SendAclDataToLL &rArr; ll_intf_acl_data_from_host_to_cntrlr &rArr; conn_mngr_send_pkt &rArr; evnt_schdlr_add_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Set_Data
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_New
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Release
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Signaling_Packet
</UL>

<P><STRONG><a name="[1fb]"></a>L2C_Send_Signaling_Packet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, l2cap.o(.text.L2C_Send_Signaling_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = L2C_Send_Signaling_Packet &rArr; L2C_Send_Packet &rArr; L2C_Send_Data &rArr; LECTRL_SendAclDataFromHostToController &rArr; LECTRL_SendAclDataToLL &rArr; ll_intf_acl_data_from_host_to_cntrlr &rArr; conn_mngr_send_pkt &rArr; evnt_schdlr_add_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Command_Reject
</UL>

<P><STRONG><a name="[1fc]"></a>L2C_Start_Timer</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, l2cap.o(.text.L2C_Start_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = L2C_Start_Timer &rArr; BLEPLAT_TimerStart &rArr; BLE_TIMER_Start &rArr; AMM_Alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_TimerStart
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Increment_Identifier
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ
</UL>

<P><STRONG><a name="[3f3]"></a>L2C_Stop_Timer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, l2cap.o(.text.L2C_Stop_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = L2C_Stop_Timer &rArr; BLEPLAT_TimerStop &rArr; BLE_TIMER_Stop &rArr; AMM_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_CPU_Rsp_Rx_Handler
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Disconnection_Complete_Handler
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
</UL>

<P><STRONG><a name="[293]"></a>L2C_Timeout_Cb</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, l2cap.o(.text.L2C_Timeout_Cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = L2C_Timeout_Cb &rArr; EVT_aci_l2cap_proc_timeout &rArr; ACI_L2CAP_PROC_TIMEOUT_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_l2cap_proc_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLATCB_TimerExpiry
</UL>

<P><STRONG><a name="[3fb]"></a>L2C_Tx_Data_Conplete_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l2cap.o(.text.L2C_Tx_Data_Conplete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = L2C_Tx_Data_Conplete_Handler &rArr; L2C_Mux_Acl_Packet &rArr; SMP_L2cap_Data_Handler &rArr; SMP_Key_Dist_Tx_Complete_Handler &rArr; SMP_Pairing_Success &rArr; SDB_Write_Sec_Record &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_AclPacketTransmitted
</UL>

<P><STRONG><a name="[1a9]"></a>LECTRL_LE_Event_Unmask</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, le_ctrl.o(.text.LECTRL_LE_Event_Unmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LECTRL_LE_Event_Unmask &rArr; ll_intf_set_le_event_mask &rArr; hci_ll_set_le_event_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_set_le_event_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_INIT
</UL>

<P><STRONG><a name="[2cb]"></a>LECTRL_LL_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, le_ctrl.o(.text.LECTRL_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = LECTRL_LL_Init &rArr; ll_sys_ble_cntrl_init &rArr; ll_intf_init &rArr; evnt_schdlr_set_phy_clbr_params &rArr; llhwc_prdc_clbr_init &rArr; evnt_schdlr_rgstr_prdc_clbr_evnt &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_ble_cntrl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStack_Init
</UL>

<P><STRONG><a name="[28f]"></a>LECTRL_LeGeneratedDHKeyCompleteEvent</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, le_ctrl_events.o(.text.LECTRL_LeGeneratedDHKeyCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = LECTRL_LeGeneratedDHKeyCompleteEvent &rArr; SMP_Generate_DHkey_Complete_Handler &rArr; SMP_Send_Pairing_Failed &rArr; SMP_Pairing_Failed &rArr; EVT_aci_gap_pairing_complete &rArr; ACI_GAP_PAIRING_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_GENERATE_DHKEY_COMPLETE_EVENT
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Generate_DHkey_Complete_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLATCB_PkaComplete
</UL>

<P><STRONG><a name="[28c]"></a>LECTRL_LeReadLocalP256PublicKeyCompleteEvent</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, le_ctrl_events.o(.text.LECTRL_LeReadLocalP256PublicKeyCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = LECTRL_LeReadLocalP256PublicKeyCompleteEvent &rArr; HCI_LE_READ_LOCAL_P256_PUBLIC_KEY_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_48 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_READ_LOCAL_P256_PUBLIC_KEY_COMPLETE_EVENT
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Read_Local_P256key_Complete_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLATCB_PkaComplete
</UL>

<P><STRONG><a name="[2d0]"></a>LECTRL_Process</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, le_ctrl.o(.text.LECTRL_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LECTRL_Process &rArr; LECTRL_SendAclDataToLL &rArr; ll_intf_acl_data_from_host_to_cntrlr &rArr; conn_mngr_send_pkt &rArr; evnt_schdlr_add_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_chng_evnt_hndlr_state
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_List_Remove
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_SendAclDataToLL
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_AllocateACLDataInLL
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStack_Process
</UL>

<P><STRONG><a name="[3d7]"></a>LECTRL_Reset</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, le_ctrl.o(.text.LECTRL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = LECTRL_Reset &rArr; ll_intf_reset &rArr; evnt_schdlr_set_phy_clbr_params &rArr; llhwc_prdc_clbr_init &rArr; evnt_schdlr_rgstr_prdc_clbr_evnt &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_reset
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_set_custom_event_mask
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_set_le_event_mask
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_set_event_mask_page2
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_set_event_mask
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_reset
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RESET
</UL>

<P><STRONG><a name="[3f8]"></a>LECTRL_SendAclDataFromHostToController</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, le_ctrl.o(.text.LECTRL_SendAclDataFromHostToController))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LECTRL_SendAclDataFromHostToController &rArr; LECTRL_SendAclDataToLL &rArr; ll_intf_acl_data_from_host_to_cntrlr &rArr; conn_mngr_send_pkt &rArr; evnt_schdlr_add_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_List_Insert_Tail
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_SendAclDataToLL
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_AllocateACLDataInLL
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
</UL>

<P><STRONG><a name="[308]"></a>LECTRL_SetRxAclControl</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, le_ctrl.o(.text.LECTRL_SetRxAclControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LECTRL_SetRxAclControl &rArr; ll_intf_ctrl_rx_dtp
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_ctrl_rx_dtp
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgData_Write
</UL>

<P><STRONG><a name="[9b]"></a>LECTRL_UpperLayerCallback</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, le_ctrl_events.o(.text.LECTRL_UpperLayerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = LECTRL_UpperLayerCallback &rArr; L2C_Rx_Data_Handler &rArr; L2C_Mux_Acl_Packet &rArr; SMP_L2cap_Data_Handler &rArr; SMP_Key_Dist_Tx_Complete_Handler &rArr; SMP_Pairing_Success &rArr; SDB_Write_Sec_Record &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_get_remaining_time_for_next_event
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_free_ll_pkt_hndlr
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_HAL_END_OF_RADIO_ACTIVITY_EVENT
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Set_Data
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_New
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Release
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rx_Data_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_ctrl.o(.text.LECTRL_LL_Init)
</UL>
<P><STRONG><a name="[5b4]"></a>LINKLAYER_DEBUG_SIGNAL_RESET</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtdebug.o(.text.LINKLAYER_DEBUG_SIGNAL_RESET))
<BR><BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
</UL>

<P><STRONG><a name="[5b5]"></a>LINKLAYER_DEBUG_SIGNAL_SET</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtdebug.o(.text.LINKLAYER_DEBUG_SIGNAL_SET))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
</UL>

<P><STRONG><a name="[5b6]"></a>LINKLAYER_DEBUG_SIGNAL_TOGGLE</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtdebug.o(.text.LINKLAYER_DEBUG_SIGNAL_TOGGLE))
<BR><BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
</UL>

<P><STRONG><a name="[414]"></a>LINKLAYER_PLAT_AclkCtrl</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_AclkCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableRadioBBClock
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_HSE_WaitUntilReady
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_DisableRadioBBClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_radio_ack_ctrl
</UL>

<P><STRONG><a name="[418]"></a>LINKLAYER_PLAT_Assert</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_Assert))
<BR><BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_assert
</UL>

<P><STRONG><a name="[419]"></a>LINKLAYER_PLAT_ClockInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LINKLAYER_PLAT_ClockInit
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_init
</UL>

<P><STRONG><a name="[6e5]"></a>LINKLAYER_PLAT_DelayUs</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_DelayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LINKLAYER_PLAT_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_delay_us
</UL>

<P><STRONG><a name="[7a5]"></a>LINKLAYER_PLAT_DisableIRQ</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
</UL>

<P><STRONG><a name="[41a]"></a>LINKLAYER_PLAT_DisableRadioIT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_DisableRadioIT))
<BR><BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_dp_slp_exit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_dp_slp_wakeup_evt_clbk
</UL>

<P><STRONG><a name="[41b]"></a>LINKLAYER_PLAT_DisableSpecificIRQ</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_DisableSpecificIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LINKLAYER_PLAT_DisableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_disable_specific_irq
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
</UL>

<P><STRONG><a name="[7a6]"></a>LINKLAYER_PLAT_EnableIRQ</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
</UL>

<P><STRONG><a name="[41c]"></a>LINKLAYER_PLAT_EnableRadioIT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_EnableRadioIT))
<BR><BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_dp_slp_exit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_dp_slp_wakeup_evt_clbk
</UL>

<P><STRONG><a name="[41d]"></a>LINKLAYER_PLAT_EnableSpecificIRQ</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_EnableSpecificIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_enable_specific_irq
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
</UL>

<P><STRONG><a name="[41e]"></a>LINKLAYER_PLAT_GetRNG</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_GetRNG))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LINKLAYER_PLAT_GetRNG &rArr; HW_RNG_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_Get
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_get_rng
</UL>

<P><STRONG><a name="[6e7]"></a>LINKLAYER_PLAT_PhyStartClbr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_PhyStartClbr))
<BR><BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_phy_start_clbr
</UL>

<P><STRONG><a name="[6e8]"></a>LINKLAYER_PLAT_PhyStopClbr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_PhyStopClbr))
<BR><BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_phy_stop_clbr
</UL>

<P><STRONG><a name="[41f]"></a>LINKLAYER_PLAT_RCOStartClbr</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_RCOStartClbr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LINKLAYER_PLAT_RCOStartClbr &rArr; scm_setsystemclock &rArr; SwitchHse16toHse32 &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setsystemclock
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_rco_clbr_not
</UL>

<P><STRONG><a name="[421]"></a>LINKLAYER_PLAT_RCOStopClbr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_RCOStopClbr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LINKLAYER_PLAT_RCOStopClbr &rArr; scm_setsystemclock &rArr; SwitchHse16toHse32 &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setsystemclock
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_rco_clbr_not
</UL>

<P><STRONG><a name="[422]"></a>LINKLAYER_PLAT_RequestTemperature</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_RequestTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = LINKLAYER_PLAT_RequestTemperature &rArr; ll_sys_bg_temperature_measurement &rArr; TEMPMEAS_RequestTemperatureMeasurement &rArr; ll_intf_cmn_set_temperature_value &rArr; llhwc_cmn_set_temperature_value &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_bg_temperature_measurement
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_request_temperature
</UL>

<P><STRONG><a name="[6ea]"></a>LINKLAYER_PLAT_SCHLDR_TIMING_UPDATE_NOT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_SCHLDR_TIMING_UPDATE_NOT))
<BR><BR>[Called By]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_schldr_timing_update_not
</UL>

<P><STRONG><a name="[424]"></a>LINKLAYER_PLAT_SetupRadioIT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_SetupRadioIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LINKLAYER_PLAT_SetupRadioIT &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_setup_radio_intr
</UL>

<P><STRONG><a name="[425]"></a>LINKLAYER_PLAT_SetupSwLowIT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_SetupSwLowIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LINKLAYER_PLAT_SetupSwLowIT &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_setup_radio_sw_low_intr
</UL>

<P><STRONG><a name="[426]"></a>LINKLAYER_PLAT_StartRadioEvt</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_StartRadioEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LINKLAYER_PLAT_StartRadioEvt &rArr; scm_notifyradiostate &rArr; scm_setsystemclock &rArr; SwitchHse16toHse32 &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_notifyradiostate
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_radio_evt_not
</UL>

<P><STRONG><a name="[428]"></a>LINKLAYER_PLAT_StopRadioEvt</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_StopRadioEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LINKLAYER_PLAT_StopRadioEvt &rArr; scm_notifyradiostate &rArr; scm_setsystemclock &rArr; SwitchHse16toHse32 &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_notifyradiostate
</UL>
<BR>[Called By]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_radio_evt_not
</UL>

<P><STRONG><a name="[429]"></a>LINKLAYER_PLAT_TriggerSwLowIT</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_TriggerSwLowIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LINKLAYER_PLAT_TriggerSwLowIT &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_radio_sw_low_intr_trigger
</UL>

<P><STRONG><a name="[42b]"></a>LINKLAYER_PLAT_WaitHclkRdy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, linklayer_plat.o(.text.LINKLAYER_PLAT_WaitHclkRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LINKLAYER_PLAT_WaitHclkRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_cmn_get_slptmr_value
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_radio_wait_for_busclkrdy
</UL>

<P><STRONG><a name="[1ca]"></a>LIST_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text.LIST_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ADD_SERVICE
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Db_MemAlloc
</UL>

<P><STRONG><a name="[1c9]"></a>LIST_Insert</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, list.o(.text.LIST_Insert))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ADD_SERVICE
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Db_MemAlloc
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Desc_Core
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[1c8]"></a>LIST_Remove</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, list.o(.text.LIST_Remove))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ADD_SERVICE
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Core
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Desc_Core
</UL>

<P><STRONG><a name="[1c7]"></a>LIST_Size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, list.o(.text.LIST_Size))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ADD_SERVICE
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Core
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Desc_Core
</UL>

<P><STRONG><a name="[27b]"></a>LL_ADC_DeInit</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, stm32wbaxx_ll_adc.o(.text.LL_ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfigure
</UL>

<P><STRONG><a name="[27c]"></a>LL_ADC_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32wbaxx_ll_adc.o(.text.LL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfigure
</UL>

<P><STRONG><a name="[27d]"></a>LL_ADC_REG_Init</STRONG> (Thumb, 482 bytes, Stack size 16 bytes, stm32wbaxx_ll_adc.o(.text.LL_ADC_REG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_REG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfigure
</UL>

<P><STRONG><a name="[42d]"></a>LL_TIM_Init</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, stm32wbaxx_ll_tim.o(.text.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_init
</UL>

<P><STRONG><a name="[2ad]"></a>LST_get_next_node</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm_list.o(.text.LST_get_next_node))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Stop
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Start
</UL>

<P><STRONG><a name="[225]"></a>LST_init_head</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm_list.o(.text.LST_init_head))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_Init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Erase
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write
</UL>

<P><STRONG><a name="[2d3]"></a>LST_insert_head</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm_list.o(.text.LST_insert_head))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_UserEvtRx
</UL>

<P><STRONG><a name="[21e]"></a>LST_insert_tail</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm_list.o(.text.LST_insert_tail))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_Alloc
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECB_Indication
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_Free
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Start
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Erase
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write
</UL>

<P><STRONG><a name="[21f]"></a>LST_is_empty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm_list.o(.text.LST_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_Free
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_UserEvtRx
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_BackgroundProcess
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_BackgroundProcess
</UL>

<P><STRONG><a name="[220]"></a>LST_remove_head</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm_list.o(.text.LST_remove_head))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_Free
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_UserEvtRx
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_BackgroundProcess
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_BackgroundProcess
</UL>

<P><STRONG><a name="[2ac]"></a>LST_remove_node</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm_list.o(.text.LST_remove_node))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Stop
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Background
</UL>

<P><STRONG><a name="[42e]"></a>Log_Module_Init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, log_module.o(.text.Log_Module_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Log_Module_Init &rArr; UTIL_ADV_TRACE_Init &rArr; UTIL_MEM_set_8 &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[232]"></a>Log_Module_Print</STRONG> (Thumb, 76 bytes, Stack size 280 bytes, log_module.o(.text.Log_Module_Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_Send
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_Cups_setpoint_p2_rw_SendNotification
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_UpdateValue
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_Notification
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_EventHandler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_Devmac_ReadUpdate
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_UpdateValue
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_Notification
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_EventHandler
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECB_Indication
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_Write
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Procedure_Gap_Peripheral
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_Restore
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_Register
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Cancel
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BSP_SerialCmdExecute
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_BackgroundProcess
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_Cs_calib_reserved_SendNotification
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_Cs_calib_resp_code_SendNotification
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_Cs_calib_status_SendNotification
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_UpdateValue
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_Notification
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_EventHandler
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_connection_status_ReadUpdate
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_totalizer_unit_ReadUpdate
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_totalizer_last_val_ReadUpdate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_year_stamp_yyyy_ReadUpdate
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_time_stamp_ddmm_ReadUpdate
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_time_stamp_hhmm_ReadUpdate
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_reset_button_ReadUpdate
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_totalizer_ReadUpdate
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_lvdt_amp_ReadUpdate
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_operation_mode_ReadUpdate
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_opening_per_ReadUpdate
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_outlet_pres_pd2_ReadUpdate
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_inlet_pres_pd1_ReadUpdate
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_diag_warn_ReadUpdate
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_diag_error_ReadUpdate
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_mod_com_error_ReadUpdate
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_unit_p1t1_ReadUpdate
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_unit_p2t2_ReadUpdate
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p1t1_ReadUpdate
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p2t2_ReadUpdate
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_flowtemp_ReadUpdate
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_totalizer_unit_SendNotification
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_totalizer_last_val_SendNotification
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_year_stamp_yyyy_SendNotification
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_time_stamp_ddmm_SendNotification
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_time_stamp_hhmm_SendNotification
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_lvdt_amp_SendNotification
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_operation_mode_SendNotification
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_opening_per_SendNotification
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_outlet_pres_pd2_SendNotification
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_inlet_pres_pd1_SendNotification
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_diag_warn_SendNotification
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_diag_error_SendNotification
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_mod_com_error_SendNotification
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_unit_p1t1_SendNotification
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_unit_p2t2_SendNotification
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p1t1_SendNotification
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p2t2_SendNotification
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_flowtemp_SendNotification
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_totalizer_SendNotification
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_EventHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Ts_test_resp_code_SendNotification
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Ts_test_status_SendNotification
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_UpdateValue
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Notification
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_EventHandler
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_UpdateValue
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_Notification
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_EventHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_FlashManagerCallback
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvokeBufferCallback
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrcOk
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Erase
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_WindowAllowed_Callback
</UL>

<P><STRONG><a name="[431]"></a>MX_APPE_Config</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, app_entry.o(.text.MX_APPE_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_APPE_Config &rArr; HAL_RCCEx_HSESetTrimming
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_HSESetTrimming
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[432]"></a>MX_APPE_Init</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, app_entry.o(.text.MX_APPE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = MX_APPE_Init &rArr; APP_BLE_Init &rArr; CAL_APP_Init &rArr; CAL_Init &rArr; aci_gatt_add_char &rArr; ACI_GATT_ADD_CHAR &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DEBUG_SIGNAL_RESET
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_Init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BSP_ButtonInit
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BSP_LedInit
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_SetStatus
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_Start
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_Init
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_SetPoolThreshold
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_Init
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPMEAS_Init
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_Init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_CMD_Interpreter_Init
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Init
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableWakeUpPin
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Init
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DEBUG_SIGNAL_SET
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43d]"></a>MX_APPE_Process</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_entry.o(.text.MX_APPE_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MX_APPE_Process &rArr; UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43f]"></a>MX_RTC_Init</STRONG> (Thumb, 182 bytes, Stack size 88 bytes, main.o(.text.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetSSRU_IT
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_PrivilegeModeSet
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[435]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, main.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableFifoMode
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbaxx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>Mem_Assign</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stack_utils.o(.text.Mem_Assign))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_MemAlloc
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MemAlloc
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_MemAlloc
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_MemAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_server.o(.text.GATT_Db_MemAlloc)
</UL>
<P><STRONG><a name="[3c7]"></a>Memcmp_Rev</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stack_utils.o(.text.Memcmp_Rev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Memcmp_Rev
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_READ_LOCAL_P256_PUBLIC_KEY
</UL>

<P><STRONG><a name="[a4]"></a>Memcpy_Rev</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stack_utils.o(.text.Memcpy_Rev))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Compute_Database_Hash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_algo.o(.text.SMA_SC_Gen_g2_NumComp_Val)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbaxx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[441]"></a>NVMCB_Store</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdb.o(.text.NVMCB_Store))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = NVMCB_Store &rArr; BLEPLAT_NvmStore &rArr; APP_BLE_HostNvmStore &rArr; SNVMA_Write &rArr; StartFlashWrite &rArr; FM_Write &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_NvmStore
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Discard
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Add
</UL>

<P><STRONG><a name="[442]"></a>NVM_Add</STRONG> (Thumb, 344 bytes, Stack size 56 bytes, nvm_emul.o(.text.NVM_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = NVM_Add &rArr; NVMCB_Store &rArr; BLEPLAT_NvmStore &rArr; APP_BLE_HostNvmStore &rArr; SNVMA_Write &rArr; StartFlashWrite &rArr; FM_Write &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMCB_Store
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Write_Gatt_Data
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[444]"></a>NVM_Compare</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nvm_emul.o(.text.NVM_Compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVM_Compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Write_Gatt_Data
</UL>

<P><STRONG><a name="[2ca]"></a>NVM_Discard</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, nvm_emul.o(.text.NVM_Discard))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = NVM_Discard &rArr; NVMCB_Store &rArr; BLEPLAT_NvmStore &rArr; APP_BLE_HostNvmStore &rArr; SNVMA_Write &rArr; StartFlashWrite &rArr; FM_Write &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVMCB_Store
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStack_Init
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Write_Gatt_Data
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Write_Sec_Record
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[2c9]"></a>NVM_Get</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, nvm_emul.o(.text.NVM_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVM_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStack_Init
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Read_Gatt_Data
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Number_Of_Sec_Records
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Gatt_Record
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Sec_Record
</UL>

<P><STRONG><a name="[2c8]"></a>NVM_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nvm_emul.o(.text.NVM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStack_Init
</UL>

<P><STRONG><a name="[234]"></a>OTP_Read</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, otp.o(.text.OTP_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OTP_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Config
</UL>

<P><STRONG><a name="[566]"></a>P2P_SERVER_APP_EvtRx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, p2p_server_app.o(.text.P2P_SERVER_APP_EvtRx))
<BR><BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[241]"></a>P2P_SERVER_APP_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, p2p_server_app.o(.text.P2P_SERVER_APP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = P2P_SERVER_APP_Init &rArr; P2P_SERVER_Init &rArr; aci_gatt_add_char &rArr; ACI_GATT_ADD_CHAR &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[132]"></a>P2P_SERVER_Devmac_ReadUpdate</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, p2p_server_app.o(.text.P2P_SERVER_Devmac_ReadUpdate), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = P2P_SERVER_Devmac_ReadUpdate &rArr; P2P_SERVER_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_UpdateValue
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>

<P><STRONG><a name="[506]"></a>P2P_SERVER_Init</STRONG> (Thumb, 1016 bytes, Stack size 80 bytes, p2p_server.o(.text.P2P_SERVER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = P2P_SERVER_Init &rArr; aci_gatt_add_char &rArr; ACI_GATT_ADD_CHAR &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_RegisterSvcHandler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_APP_Init
</UL>

<P><STRONG><a name="[508]"></a>P2P_SERVER_Notification</STRONG> (Thumb, 1320 bytes, Stack size 64 bytes, p2p_server_app.o(.text.P2P_SERVER_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = P2P_SERVER_Notification &rArr; P2P_SERVER_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_UpdateValue
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_EventHandler
</UL>

<P><STRONG><a name="[507]"></a>P2P_SERVER_UpdateValue</STRONG> (Thumb, 628 bytes, Stack size 16 bytes, p2p_server.o(.text.P2P_SERVER_UpdateValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = P2P_SERVER_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_Devmac_ReadUpdate
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_Notification
</UL>

<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbaxx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>RADIO_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32wbaxx_it.o(.text.RADIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RADIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RCC_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32wbaxx_it.o(.text.RCC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_IRQHandler &rArr; scm_pllrdy_isr &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_HSE_StartStabilizationTimer
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_pllrdy_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[32f]"></a>RFTS_RelWindow</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rf_timing_synchro.o(.text.RFTS_RelWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = RFTS_RelWindow &rArr; evnt_schdlr_gnrc_evnt_cmplt &rArr; evnt_schdlr_unrgstr_evnt &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_SetStatus
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_gnrc_evnt_cmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_BackgroundProcess
</UL>

<P><STRONG><a name="[330]"></a>RFTS_ReqWindow</STRONG> (Thumb, 164 bytes, Stack size 88 bytes, rf_timing_synchro.o(.text.RFTS_ReqWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = RFTS_ReqWindow &rArr; evnt_schdlr_rgstr_gnrc_evnt &rArr; OUTLINED_FUNCTION_4 &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Create
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_gnrc_evnt
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_BackgroundProcess
</UL>

<P><STRONG><a name="[3e8]"></a>RNG_KERNEL_CLK_OFF</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_rng.o(.text.RNG_KERNEL_CLK_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_Run
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_DisableClock
</UL>

<P><STRONG><a name="[3e9]"></a>RNG_KERNEL_CLK_ON</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, hw_rng.o(.text.RNG_KERNEL_CLK_ON))
<BR><BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_EnableClock
</UL>

<P><STRONG><a name="[39a]"></a>RTC_ExitInitMode</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32wbaxx_hal_rtc.o(.text.RTC_ExitInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_ExitInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[e]"></a>RTC_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32wbaxx_it.o(.text.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RTC_IRQHandler &rArr; HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SSRUIRQHandler
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[50e]"></a>RndAddr_Calculate_Address_Hash</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, random_addr.o(.text.RndAddr_Calculate_Address_Hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RndAddr_Calculate_Address_Hash &rArr; BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesEcbEncrypt
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RndAddr_Check_Resolvable_Address
</UL>

<P><STRONG><a name="[50f]"></a>RndAddr_Check_Resolvable_Address</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, random_addr.o(.text.RndAddr_Check_Resolvable_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RndAddr_Check_Resolvable_Address &rArr; RndAddr_Calculate_Address_Hash &rArr; BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RndAddr_Calculate_Address_Hash
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Read_Sec_Record
</UL>

<P><STRONG><a name="[346]"></a>RndAddr_Generate_Non_Resolvable_Address</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, random_addr.o(.text.RndAddr_Generate_Non_Resolvable_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RndAddr_Generate_Non_Resolvable_Address &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_RngGet
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Own_Address
</UL>

<P><STRONG><a name="[307]"></a>RndAddr_Generate_Static_Address</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, random_addr.o(.text.RndAddr_Generate_Static_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RndAddr_Generate_Static_Address &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_RngGet
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgData_Init
</UL>

<P><STRONG><a name="[510]"></a>SCM_HSE_SW_HSERDY_isr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, scm.o(.text.SCM_HSE_SW_HSERDY_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCM_HSE_SW_HSERDY_isr &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_hserdy_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
</UL>

<P><STRONG><a name="[50b]"></a>SCM_HSE_StartStabilizationTimer</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, scm.o(.text.SCM_HSE_StartStabilizationTimer))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_IRQHandler
</UL>

<P><STRONG><a name="[416]"></a>SCM_HSE_WaitUntilReady</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, scm.o(.text.SCM_HSE_WaitUntilReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_hserdy_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setsystemclock
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_AclkCtrl
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchHse16toHse32
</UL>

<P><STRONG><a name="[575]"></a>SCM_HSI_CLK_OFF</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, scm.o(.text.SCM_HSI_CLK_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setsystemclock
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_hserdy_isr
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchHse16toHse32
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setup
</UL>

<P><STRONG><a name="[572]"></a>SCM_HSI_CLK_ON</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, scm.o(.text.SCM_HSI_CLK_ON))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setsystemclock
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchHse16toHse32
</UL>

<P><STRONG><a name="[573]"></a>SCM_HSI_SwithSystemClock_Entry</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, scm.o(.text.SCM_HSI_SwithSystemClock_Entry))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setsystemclock
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchHse16toHse32
</UL>

<P><STRONG><a name="[574]"></a>SCM_HSI_SwithSystemClock_Exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, scm.o(.text.SCM_HSI_SwithSystemClock_Exit))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setsystemclock
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchHse16toHse32
</UL>

<P><STRONG><a name="[513]"></a>SDB_Get_Number_Of_Sec_Records</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, sdb.o(.text.SDB_Get_Number_Of_Sec_Records))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDB_Get_Number_Of_Sec_Records &rArr; NVM_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[1a3]"></a>SDB_Get_Sec_Record</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sdb.o(.text.SDB_Get_Sec_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDB_Get_Sec_Record &rArr; NVM_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_CONFIGURE_FILTER_ACCEPT_LIST
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Read_Sec_Record
</UL>

<P><STRONG><a name="[514]"></a>SDB_Read_Gatt_Data</STRONG> (Thumb, 70 bytes, Stack size 104 bytes, sdb.o(.text.SDB_Read_Gatt_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SDB_Read_Gatt_Data &rArr; SDB_Read_Sec_Record &rArr; RndAddr_Check_Resolvable_Address &rArr; RndAddr_Calculate_Address_Hash &rArr; BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Get
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Gatt_Record
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Read_Sec_Record
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Retrieve_GATT_Data
</UL>

<P><STRONG><a name="[515]"></a>SDB_Read_Sec_Record</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, sdb.o(.text.SDB_Read_Sec_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SDB_Read_Sec_Record &rArr; RndAddr_Check_Resolvable_Address &rArr; RndAddr_Calculate_Address_Hash &rArr; BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RndAddr_Check_Resolvable_Address
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Sec_Record
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Is_Bonded
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Read_Gatt_Data
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Write_Gatt_Data
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Write_Sec_Record
</UL>

<P><STRONG><a name="[517]"></a>SDB_Write_Gatt_Data</STRONG> (Thumb, 264 bytes, Stack size 136 bytes, sdb.o(.text.SDB_Write_Gatt_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = SDB_Write_Gatt_Data &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Discard
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Add
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Compare
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Warning_Event
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Gatt_Record
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Read_Sec_Record
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Save_GATT_Data
</UL>

<P><STRONG><a name="[518]"></a>SDB_Write_Sec_Record</STRONG> (Thumb, 216 bytes, Stack size 104 bytes, sdb.o(.text.SDB_Write_Sec_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = SDB_Write_Sec_Record &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Discard
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Warning_Event
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Read_Sec_Record
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Success
</UL>

<P><STRONG><a name="[3d6]"></a>SLP_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sleep.o(.text.SLP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RESET
</UL>

<P><STRONG><a name="[2d1]"></a>SLP_SleepCheck</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sleep.o(.text.SLP_SleepCheck))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStack_Process
</UL>

<P><STRONG><a name="[519]"></a>SMA_CMAC_Generate_Tag</STRONG> (Thumb, 306 bytes, Stack size 104 bytes, sm_algo.o(.text.SMA_CMAC_Generate_Tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SMA_CMAC_Generate_Tag &rArr; BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesEcbEncrypt
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_left_shift
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Validate_Signed_Packet
</UL>

<P><STRONG><a name="[51b]"></a>SMA_Compute_Confirm_Value</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, sm_algo.o(.text.SMA_Compute_Confirm_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SMA_Compute_Confirm_Value &rArr; BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesEcbEncrypt
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_LP_Compute_Confirm_Value
</UL>

<P><STRONG><a name="[51c]"></a>SMA_Compute_EDIV</STRONG> (Thumb, 116 bytes, Stack size 80 bytes, sm_algo.o(.text.SMA_Compute_EDIV))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SMA_Compute_EDIV &rArr; SMA_Diversify &rArr; BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesEcbEncrypt
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[51e]"></a>SMA_Generate_CSRK</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sm_algo.o(.text.SMA_Generate_CSRK))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SMA_Generate_CSRK &rArr; SMA_Diversify &rArr; BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[51f]"></a>SMA_Generate_IRK</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sm_algo.o(.text.SMA_Generate_IRK))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SMA_Generate_IRK &rArr; SMA_Diversify &rArr; BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[520]"></a>SMA_Generate_LTK</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sm_algo.o(.text.SMA_Generate_LTK))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SMA_Generate_LTK &rArr; SMA_Diversify &rArr; BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[521]"></a>SMA_Generate_STK</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, sm_algo.o(.text.SMA_Generate_STK))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SMA_Generate_STK &rArr; BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesEcbEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_LP_Generate_STK
</UL>

<P><STRONG><a name="[522]"></a>SMA_SC_Gen_f4_Confirm</STRONG> (Thumb, 84 bytes, Stack size 128 bytes, sm_algo.o(.text.SMA_SC_Gen_f4_Confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SMA_SC_Gen_f4_Confirm &rArr; SMA_Cmac &rArr; BLEPLAT_AesCmacCompute &rArr; BAES_CmacCompute
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Cmac
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Compute_Confirm_Value
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_OOB_SC_Authentication_Stage_1
</UL>

<P><STRONG><a name="[523]"></a>SMA_SC_Gen_f5_Keys</STRONG> (Thumb, 184 bytes, Stack size 176 bytes, sm_algo.o(.text.SMA_SC_Gen_f5_Keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = SMA_SC_Gen_f5_Keys
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Phase_2_Process
</UL>

<P><STRONG><a name="[524]"></a>SMA_SC_Gen_f6_Check_Val</STRONG> (Thumb, 128 bytes, Stack size 128 bytes, sm_algo.o(.text.SMA_SC_Gen_f6_Check_Val))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SMA_SC_Gen_f6_Check_Val &rArr; SMA_Cmac &rArr; BLEPLAT_AesCmacCompute &rArr; BAES_CmacCompute
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Cmac
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Compute_DHKey_Check
</UL>

<P><STRONG><a name="[525]"></a>SMA_SC_Gen_g2_NumComp_Val</STRONG> (Thumb, 88 bytes, Stack size 136 bytes, sm_algo.o(.text.SMA_SC_Gen_g2_NumComp_Val))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SMA_SC_Gen_g2_NumComp_Val &rArr; SMA_Cmac &rArr; BLEPLAT_AesCmacCompute &rArr; BAES_CmacCompute
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Cmac
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Generate_Num_Comparison_Event
</UL>

<P><STRONG><a name="[526]"></a>SMP_Check_Remote_OOB_Data_Presence</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, smp_oob.o(.text.SMP_Check_Remote_OOB_Data_Presence))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SMP_Check_Remote_OOB_Data_Presence &rArr; ble_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Request
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[527]"></a>SMP_Clear_Remote_OOB_Data</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, smp_oob.o(.text.SMP_Clear_Remote_OOB_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SMP_Clear_Remote_OOB_Data &rArr; ble_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Success
</UL>

<P><STRONG><a name="[528]"></a>SMP_Clear_Rep_Attempts_Timeout_Status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, smp_rep.o(.text.SMP_Clear_Rep_Attempts_Timeout_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SMP_Clear_Rep_Attempts_Timeout_Status &rArr; SMP_Search_Rep_Attempts_List &rArr; BLEPLAT_TimerStop &rArr; BLE_TIMER_Stop &rArr; AMM_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Search_Rep_Attempts_List
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Success
</UL>

<P><STRONG><a name="[33b]"></a>SMP_Connection_Complete_Handler</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, smp.o(.text.SMP_Connection_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SMP_Connection_Complete_Handler &rArr; SMP_Get_Rep_Attempts_Timeout_Status &rArr; SMP_Search_Rep_Attempts_List &rArr; BLEPLAT_TimerStop &rArr; BLE_TIMER_Stop &rArr; AMM_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Get_Rep_Attempts_Timeout_Status
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Connection_Complete_Handler
</UL>

<P><STRONG><a name="[341]"></a>SMP_Disconnection_Complete_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, smp.o(.text.SMP_Disconnection_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SMP_Disconnection_Complete_Handler &rArr; SMP_Pairing_Disconnect &rArr; SMP_Stop_Timer &rArr; BLEPLAT_TimerStop &rArr; BLE_TIMER_Stop &rArr; AMM_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Disconnect
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Disconnection_Complete_Handler
</UL>

<P><STRONG><a name="[402]"></a>SMP_Encryption_Update_Handler</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, smp_pair.o(.text.SMP_Encryption_Update_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = SMP_Encryption_Update_Handler &rArr; EVT_aci_gap_pairing_complete &rArr; ACI_GAP_PAIRING_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_pairing_complete
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Update_Pairing_Stats
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Stop_Timer
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Get_Remote_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_EncryptionKeyRefreshCompleteEvent
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_EncryptionChangeEvent
</UL>

<P><STRONG><a name="[369]"></a>SMP_Forget_Device</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, smp.o(.text.SMP_Forget_Device))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SMP_Forget_Device &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[530]"></a>SMP_Generate_Authorization_Req_Event</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smp_pair.o(.text.SMP_Generate_Authorization_Req_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = SMP_Generate_Authorization_Req_Event &rArr; EVT_aci_gap_authorization_req &rArr; ACI_GAP_AUTHORIZATION_REQ_EVENT &rArr; OUTLINED_FUNCTION_34 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_authorization_req
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[407]"></a>SMP_Generate_DHkey_Complete_Handler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, smp_sc.o(.text.SMP_Generate_DHkey_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = SMP_Generate_DHkey_Complete_Handler &rArr; SMP_Send_Pairing_Failed &rArr; SMP_Pairing_Failed &rArr; EVT_aci_gap_pairing_complete &rArr; ACI_GAP_PAIRING_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Send_Pairing_Failed
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeGeneratedDHKeyCompleteEvent
</UL>

<P><STRONG><a name="[345]"></a>SMP_Get_Identity_Address_Type</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smp.o(.text.SMP_Get_Identity_Address_Type))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Own_Address
</UL>

<P><STRONG><a name="[534]"></a>SMP_Get_OOB_SC_Random</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, smp_oob.o(.text.SMP_Get_OOB_SC_Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SMP_Get_OOB_SC_Random &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Compute_DHKey_Check
</UL>

<P><STRONG><a name="[19e]"></a>SMP_Get_Remote_Device</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, smp.o(.text.SMP_Get_Remote_Device))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_NUMERIC_COMPARISON_VALUE_CONFIRM_YESNO
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_ALLOW_REBOND
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_PASS_KEY_RESP
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Encryption_Update_Handler
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_LTK_Request_Handler
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Request
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Validate_Signed_Packet
</UL>

<P><STRONG><a name="[52a]"></a>SMP_Get_Rep_Attempts_Timeout_Status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, smp_rep.o(.text.SMP_Get_Rep_Attempts_Timeout_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SMP_Get_Rep_Attempts_Timeout_Status &rArr; SMP_Search_Rep_Attempts_List &rArr; BLEPLAT_TimerStop &rArr; BLE_TIMER_Stop &rArr; AMM_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Search_Rep_Attempts_List
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Connection_Complete_Handler
</UL>

<P><STRONG><a name="[278]"></a>SMP_Get_Sec_Status</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smp.o(.text.SMP_Get_Sec_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SMP_Get_Sec_Status &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Check_Perm
</UL>

<P><STRONG><a name="[3dd]"></a>SMP_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, smp.o(.text.SMP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RESET
</UL>

<P><STRONG><a name="[536]"></a>SMP_Init_OOB_SC</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, smp_oob.o(.text.SMP_Init_OOB_SC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SMP_Init_OOB_SC &rArr; SMP_Generate_Local_OOB_SC_Random &rArr; BLEPLAT_RngGet &rArr; HW_RNG_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Generate_Local_OOB_SC_Random
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Set_Key_Generation_Method
</UL>

<P><STRONG><a name="[53c]"></a>SMP_Key_Dist_Tx_Complete_Handler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, smp_pair.o(.text.SMP_Key_Dist_Tx_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = SMP_Key_Dist_Tx_Complete_Handler &rArr; SMP_Pairing_Success &rArr; SDB_Write_Sec_Record &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Success
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Key_Dist_Peer_Keys_To_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_L2cap_Data_Handler
</UL>

<P><STRONG><a name="[3f6]"></a>SMP_L2cap_Data_Handler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, smp.o(.text.SMP_L2cap_Data_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = SMP_L2cap_Data_Handler &rArr; SMP_Key_Dist_Tx_Complete_Handler &rArr; SMP_Pairing_Success &rArr; SDB_Write_Sec_Record &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Key_Dist_Tx_Complete_Handler
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SR_Security_Req_TX_Complete_Handler
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Release
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_List_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
</UL>

<P><STRONG><a name="[408]"></a>SMP_LTK_Request_Handler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, smp_pair.o(.text.SMP_LTK_Request_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SMP_LTK_Request_Handler &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Get_Remote_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeLongTermKeyRequestEvent
</UL>

<P><STRONG><a name="[53a]"></a>SMP_Loop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, smp.o(.text.SMP_Loop))
<BR><BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Pairing_Public_Key_Rx_Handler
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Success
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Key_Dist_Start
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Enable_Encryption
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[547]"></a>SMP_MI_Start_Encryption</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, smp_pair.o(.text.SMP_MI_Start_Encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = SMP_MI_Start_Encryption &rArr; SMP_MI_Enable_Encryption &rArr; SMP_Send_Pairing_Failed &rArr; SMP_Pairing_Failed &rArr; EVT_aci_gap_pairing_complete &rArr; ACI_GAP_PAIRING_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Reset_Timer
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Enable_Encryption
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Crop_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Pairing_DHKey_Check_Rx_Handler
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[3d8]"></a>SMP_MemAlloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, smp.o(.text.SMP_MemAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SMP_MemAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Assign
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RESET
</UL>

<P><STRONG><a name="[4e1]"></a>SMP_New_PDU</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, smp_pair.o(.text.SMP_New_PDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SMP_New_PDU &rArr; ACL_New &rArr; ACL_Alloc &rArr; ACL_Available_Blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_New
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Send_Pairing_DHKey_Check
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Send_Pairing_Public_Key
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[549]"></a>SMP_OOB_SC_Authentication_Stage_1</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, smp_oob.o(.text.SMP_OOB_SC_Authentication_Stage_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SMP_OOB_SC_Authentication_Stage_1 &rArr; SMA_SC_Gen_f4_Confirm &rArr; SMA_Cmac &rArr; BLEPLAT_AesCmacCompute &rArr; BAES_CmacCompute
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f4_Confirm
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[1b9]"></a>SMP_Ongoing_Pairing</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, smp_pair.o(.text.SMP_Ongoing_Pairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SMP_Ongoing_Pairing
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_SET_AUTHENTICATION_REQUIREMENT
</UL>

<P><STRONG><a name="[52c]"></a>SMP_Pairing_Disconnect</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, smp_pair.o(.text.SMP_Pairing_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SMP_Pairing_Disconnect &rArr; SMP_Stop_Timer &rArr; BLEPLAT_TimerStop &rArr; BLE_TIMER_Stop &rArr; AMM_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Update_Pairing_Stats
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Stop_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Disconnection_Complete_Handler
</UL>

<P><STRONG><a name="[54c]"></a>SMP_Pairing_Process</STRONG> (Thumb, 1152 bytes, Stack size 120 bytes, smp_pair.o(.text.SMP_Pairing_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = SMP_Pairing_Process &rArr; SMP_Key_Dist_Start &rArr; SMP_Pairing_Success &rArr; SDB_Write_Sec_Record &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LONG_TERM_KEY_REQUEST_NEGATIVE_REPLY
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LONG_TERM_KEY_REQUEST_REPLY
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_RngGet
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_pairing_complete
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_addr_not_resolved
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_warning
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Send_Pairing_Failed
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Phase_2_Process
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_CSRK
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Set_Data
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Public_Key_Exchanged
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_LTK
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Compute_EDIV
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Random
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SR_Send_Pairing_Confirm
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Confirm
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Key_Dist_Start
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Enable_Encryption
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Crop_Key
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Stop_Timer
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Reset_Remote_Device
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_OOB_SC_Authentication_Stage_1
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Generate_Authorization_Req_Event
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Loop
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Number_Of_Sec_Records
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Read_Sec_Record
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_IRK
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process
</UL>

<P><STRONG><a name="[2cf]"></a>SMP_Process</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, smp.o(.text.SMP_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = SMP_Process &rArr; SMP_Pairing_Process &rArr; SMP_Key_Dist_Start &rArr; SMP_Pairing_Success &rArr; SDB_Write_Sec_Record &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_List_Insert_Head
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Public_Key_Generation_Process
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Release
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_List_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStack_Process
</UL>

<P><STRONG><a name="[552]"></a>SMP_Process_Rx_Packet</STRONG> (Thumb, 1556 bytes, Stack size 56 bytes, smp_pair.o(.text.SMP_Process_Rx_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = SMP_Process_Rx_Packet &rArr; SMP_Key_Dist_Start &rArr; SMP_Pairing_Success &rArr; SDB_Write_Sec_Record &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Get_Data
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_bond_lost
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Pairing_Start
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Keypress_Notification_Rx_Handler
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Pairing_DHKey_Check_Rx_Handler
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Pairing_Public_Key_Rx_Handler
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Start_Encryption
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Compute_Confirm_Value
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Generate_Num_Comparison_Event
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Send_Pairing_Failed
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Set_Data
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Build_Pairing_Packet
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_LP_Generate_STK
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Failed
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Request
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Reset_Timer
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_LP_Compute_Confirm_Value
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Handle_Pairing_Request_Event
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Generate_Pass_Key_Req_Event
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Set_Key_Generation_Method
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Get_Rx_Pairing_Parameters
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Check_Rx_Pairing_Parameters
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Success
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Random
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SR_Send_Pairing_Confirm
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Key_Dist_Start
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Check_Remote_OOB_Data_Presence
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Loop
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Release
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process
</UL>

<P><STRONG><a name="[409]"></a>SMP_Read_Local_P256key_Complete_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, smp_sc.o(.text.SMP_Read_Local_P256key_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SMP_Read_Local_P256key_Complete_Handler &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeReadLocalP256PublicKeyCompleteEvent
</UL>

<P><STRONG><a name="[54b]"></a>SMP_Rep_Attempts_Protection</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, smp_rep.o(.text.SMP_Rep_Attempts_Protection))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SMP_Rep_Attempts_Protection &rArr; BLEPLAT_TimerStart &rArr; BLE_TIMER_Start &rArr; AMM_Alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_TimerStop
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_TimerStart
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Failed
</UL>

<P><STRONG><a name="[296]"></a>SMP_Rep_Attempts_Timeout_Cb</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, smp_rep.o(.text.SMP_Rep_Attempts_Timeout_Cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SMP_Rep_Attempts_Timeout_Cb &rArr; ble_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLATCB_TimerExpiry
</UL>

<P><STRONG><a name="[356]"></a>SMP_Retrieve_GATT_Data</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, smp.o(.text.SMP_Retrieve_GATT_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SMP_Retrieve_GATT_Data &rArr; SDB_Read_Gatt_Data &rArr; SDB_Read_Sec_Record &rArr; RndAddr_Check_Resolvable_Address &rArr; RndAddr_Calculate_Address_Hash &rArr; BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Is_Bonded
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Read_Gatt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Get_Change_Vs_Server_Database
</UL>

<P><STRONG><a name="[543]"></a>SMP_SC_Compute_Confirm_Value</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, smp_sc.o(.text.SMP_SC_Compute_Confirm_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SMP_SC_Compute_Confirm_Value &rArr; SMA_SC_Gen_f4_Confirm &rArr; SMA_Cmac &rArr; BLEPLAT_AesCmacCompute &rArr; BAES_CmacCompute
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f4_Confirm
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SR_Send_Pairing_Confirm
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Confirm
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[556]"></a>SMP_SC_Generate_Num_Comparison_Event</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, smp_sc.o(.text.SMP_SC_Generate_Num_Comparison_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = SMP_SC_Generate_Num_Comparison_Event &rArr; EVT_aci_gap_numeric_comparison_value &rArr; ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_numeric_comparison_value
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_g2_NumComp_Val
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[559]"></a>SMP_SC_Keypress_Notification_Rx_Handler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, smp_sc.o(.text.SMP_SC_Keypress_Notification_Rx_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = SMP_SC_Keypress_Notification_Rx_Handler &rArr; EVT_aci_gap_keypress_notification &rArr; ACI_GAP_KEYPRESS_NOTIFICATION_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_keypress_notification
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[55d]"></a>SMP_SC_Local_Public_Key_Unavailable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, smp_sc.o(.text.SMP_SC_Local_Public_Key_Unavailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SMP_SC_Local_Public_Key_Unavailable &rArr; Is_Empty
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Public_Key_Exchanged
</UL>

<P><STRONG><a name="[558]"></a>SMP_SC_Pairing_DHKey_Check_Rx_Handler</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, smp_sc.o(.text.SMP_SC_Pairing_DHKey_Check_Rx_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = SMP_SC_Pairing_DHKey_Check_Rx_Handler &rArr; SMP_MI_Start_Encryption &rArr; SMP_MI_Enable_Encryption &rArr; SMP_Send_Pairing_Failed &rArr; SMP_Pairing_Failed &rArr; EVT_aci_gap_pairing_complete &rArr; ACI_GAP_PAIRING_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Get_Data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Send_Pairing_DHKey_Check
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Compute_DHKey_Check
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Start_Encryption
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Send_Pairing_Failed
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[55f]"></a>SMP_SC_Pairing_End</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, smp_sc.o(.text.SMP_SC_Pairing_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SMP_SC_Pairing_End &rArr; ble_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Is_Another_SC_Pairing_Ongoing
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Update_Pairing_Stats
</UL>

<P><STRONG><a name="[557]"></a>SMP_SC_Pairing_Public_Key_Rx_Handler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, smp_sc.o(.text.SMP_SC_Pairing_Public_Key_Rx_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = SMP_SC_Pairing_Public_Key_Rx_Handler &rArr; SMP_Send_Pairing_Failed &rArr; SMP_Pairing_Failed &rArr; EVT_aci_gap_pairing_complete &rArr; ACI_GAP_PAIRING_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_GENERATE_DHKEY
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Get_Data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Send_Pairing_Failed
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Loop
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[55a]"></a>SMP_SC_Pairing_Start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, smp_sc.o(.text.SMP_SC_Pairing_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SMP_SC_Pairing_Start &rArr; SMP_Is_Another_SC_Pairing_Ongoing
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Is_Another_SC_Pairing_Ongoing
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[550]"></a>SMP_SC_Phase_2_Process</STRONG> (Thumb, 228 bytes, Stack size 88 bytes, smp_sc.o(.text.SMP_SC_Phase_2_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = SMP_SC_Phase_2_Process &rArr; SMP_Send_Pairing_Failed &rArr; SMP_Pairing_Failed &rArr; EVT_aci_gap_pairing_complete &rArr; ACI_GAP_PAIRING_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f5_Keys
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Phase_2AS2_Set_Addresses
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Send_Pairing_DHKey_Check
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Compute_DHKey_Check
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Send_Pairing_Failed
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[54e]"></a>SMP_SC_Public_Key_Exchanged</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, smp_sc.o(.text.SMP_SC_Public_Key_Exchanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SMP_SC_Public_Key_Exchanged &rArr; SMP_SC_Send_Pairing_Public_Key &rArr; SMP_Send_PDU &rArr; L2C_Send_Data &rArr; LECTRL_SendAclDataFromHostToController &rArr; LECTRL_SendAclDataToLL &rArr; ll_intf_acl_data_from_host_to_cntrlr &rArr; conn_mngr_send_pkt &rArr; evnt_schdlr_add_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Send_Pairing_Public_Key
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Local_Public_Key_Unavailable
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[551]"></a>SMP_SC_Public_Key_Generation_Process</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, smp_sc.o(.text.SMP_SC_Public_Key_Generation_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SMP_SC_Public_Key_Generation_Process &rArr; HCI_LE_READ_LOCAL_P256_PUBLIC_KEY &rArr; BLEPLAT_PkaStartP256Key &rArr; BPKA_StartP256Key &rArr; HW_PKA_P256_StartEccScalarMul &rArr; HW_PKA_WriteOperand
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_READ_LOCAL_P256_PUBLIC_KEY
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process
</UL>

<P><STRONG><a name="[53d]"></a>SMP_SR_Security_Req_TX_Complete_Handler</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, smp_pair.o(.text.SMP_SR_Security_Req_TX_Complete_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_L2cap_Data_Handler
</UL>

<P><STRONG><a name="[36e]"></a>SMP_Save_GATT_Data</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, smp.o(.text.SMP_Save_GATT_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = SMP_Save_GATT_Data &rArr; SDB_Write_Gatt_Data &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Is_Bonded
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Write_Gatt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Store_Server_Database
</UL>

<P><STRONG><a name="[4a1]"></a>SMP_Send_PDU</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, smp_pair.o(.text.SMP_Send_PDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SMP_Send_PDU &rArr; L2C_Send_Data &rArr; LECTRL_SendAclDataFromHostToController &rArr; LECTRL_SendAclDataToLL &rArr; ll_intf_acl_data_from_host_to_cntrlr &rArr; conn_mngr_send_pkt &rArr; evnt_schdlr_add_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Reset_Timer
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Release
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Send_Pairing_DHKey_Check
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Send_Pairing_Public_Key
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Send_Pairing_Failed
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[531]"></a>SMP_Send_Pairing_Failed</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, smp_pair.o(.text.SMP_Send_Pairing_Failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = SMP_Send_Pairing_Failed &rArr; SMP_Pairing_Failed &rArr; EVT_aci_gap_pairing_complete &rArr; ACI_GAP_PAIRING_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Send_PDU
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Failed
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Generate_DHkey_Complete_Handler
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Pairing_DHKey_Check_Rx_Handler
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Pairing_Public_Key_Rx_Handler
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Phase_2_Process
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Enable_Encryption
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[295]"></a>SMP_Timeout_Cb</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, smp_pair.o(.text.SMP_Timeout_Cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SMP_Timeout_Cb &rArr; SMP_Update_Pairing_Stats &rArr; SMP_SC_Pairing_End &rArr; ble_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Update_Pairing_Stats
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLATCB_TimerExpiry
</UL>

<P><STRONG><a name="[27a]"></a>SMP_Validate_Signed_Packet</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, smp_sign.o(.text.SMP_Validate_Signed_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SMP_Validate_Signed_Packet &rArr; SMA_CMAC_Generate_Tag &rArr; BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Get_Data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Get_Remote_Device
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_CMAC_Generate_Tag
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Handle_Write_Cmd
</UL>

<P><STRONG><a name="[a5]"></a>SNVMA_FlashManagerCallback</STRONG> (Thumb, 5172 bytes, Stack size 32 bytes, simple_nvm_arbiter.o(.text.SNVMA_FlashManagerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = SNVMA_FlashManagerCallback &rArr; StartFlashWrite &rArr; FM_Write &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFlashWrite
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvokeBufferCallback
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrcOk
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Erase
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simple_nvm_arbiter.o(.text.SNVMA_Init)
</UL>
<P><STRONG><a name="[43b]"></a>SNVMA_Init</STRONG> (Thumb, 960 bytes, Stack size 56 bytes, simple_nvm_arbiter.o(.text.SNVMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = SNVMA_Init &rArr; IsCrcOk &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrcOk
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_EraseSectors
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_RegisterHandle
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[22e]"></a>SNVMA_Register</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, simple_nvm_arbiter.o(.text.SNVMA_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = SNVMA_Register &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[22f]"></a>SNVMA_Restore</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, simple_nvm_arbiter.o(.text.SNVMA_Restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = SNVMA_Restore &rArr; IsCrcOk &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCrcOk
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[22b]"></a>SNVMA_Write</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, simple_nvm_arbiter.o(.text.SNVMA_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = SNVMA_Write &rArr; StartFlashWrite &rArr; FM_Write &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartFlashWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_HostNvmStore
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_NvmCallback
</UL>

<P><STRONG><a name="[564]"></a>SVCCTL_App_Notification</STRONG> (Thumb, 1344 bytes, Stack size 56 bytes, app_ble.o(.text.SVCCTL_App_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = SVCCTL_App_Notification &rArr; APP_BLE_Procedure_Gap_Peripheral &rArr; aci_gap_set_discoverable &rArr; ACI_GAP_SET_DISCOVERABLE &rArr; OUTLINED_FUNCTION_3 &rArr; GAP_Adv_Legacy_Start &rArr; HCI_LE_SET_ADVERTISING_ENABLE &rArr; ll_intf_le_set_adv_enable &rArr; non_conn_mngr_adv_enable &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_confirm_yesno
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_allow_rebond
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_resp
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_APP_EvtRx
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_APP_EvtRx
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_APP_EvtRx
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_APP_EvtRx
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_APP_EvtRx
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_APP_EvtRx
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Procedure_Gap_Peripheral
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_StartWithPeriod
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_UserEvtRx
</UL>

<P><STRONG><a name="[23f]"></a>SVCCTL_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, svc_ctl.o(.text.SVCCTL_Init))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[2d8]"></a>SVCCTL_RegisterSvcHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, svc_ctl.o(.text.SVCCTL_RegisterSvcHandler))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_Init
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_Init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_Init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Init
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_Init
</UL>

<P><STRONG><a name="[2d2]"></a>SVCCTL_UserEvtRx</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, svc_ctl.o(.text.SVCCTL_UserEvtRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = SVCCTL_UserEvtRx &rArr; SVCCTL_App_Notification &rArr; APP_BLE_Procedure_Gap_Peripheral &rArr; aci_gap_set_discoverable &rArr; ACI_GAP_SET_DISCOVERABLE &rArr; OUTLINED_FUNCTION_3 &rArr; GAP_Adv_Legacy_Start &rArr; HCI_LE_SET_ADVERTISING_ENABLE &rArr; ll_intf_le_set_adv_enable &rArr; non_conn_mngr_adv_enable &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_UserEvtRx
</UL>

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbaxx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[216]"></a>SYSTEM_DEBUG_SIGNAL_RESET</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtdebug.o(.text.SYSTEM_DEBUG_SIGNAL_RESET))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_Init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_Init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setsystemclock
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_hserdy_isr
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_RequestIpState
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_Run
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setup
</UL>

<P><STRONG><a name="[215]"></a>SYSTEM_DEBUG_SIGNAL_SET</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtdebug.o(.text.SYSTEM_DEBUG_SIGNAL_SET))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_Init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_Init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setsystemclock
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_hserdy_isr
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_RequestTemperature
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_RequestIpState
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_Run
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setup
</UL>

<P><STRONG><a name="[56f]"></a>Serial_CMD_Interpreter_CmdExecute</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_entry.o(.text.Serial_CMD_Interpreter_CmdExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = Serial_CMD_Interpreter_CmdExecute &rArr; APP_BSP_SerialCmdExecute &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BSP_SerialCmdExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Rx_Callback
</UL>

<P><STRONG><a name="[436]"></a>Serial_CMD_Interpreter_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, serial_cmd_interpreter.o(.text.Serial_CMD_Interpreter_Init))
<BR><BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_StartRxProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wbaxx_it.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[577]"></a>SystemClock_Config</STRONG> (Thumb, 170 bytes, Stack size 104 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, system_stm32wbaxx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_pllrdy_isr
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setsystemclock
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_hserdy_isr
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setup
</UL>

<P><STRONG><a name="[54]"></a>SystemInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, system_stm32wbaxx.o(.text.SystemInit))
<BR>[Address Reference Count : 2]<UL><LI> startup_stm32wba55xx.o(.text)
<LI> stm32wbaxx_resethandler_mdk-arm.o(.text)
</UL>
<P><STRONG><a name="[438]"></a>TEMPMEAS_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, temp_measurement.o(.text.TEMPMEAS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TEMPMEAS_Init &rArr; ADCCTRL_RegisterHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_RegisterHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[ca]"></a>TEMPMEAS_RequestTemperatureMeasurement</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, temp_measurement.o(.text.TEMPMEAS_RequestTemperatureMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = TEMPMEAS_RequestTemperatureMeasurement &rArr; ll_intf_cmn_set_temperature_value &rArr; llhwc_cmn_set_temperature_value &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_cmn_set_temperature_value
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_RequestTemperature
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_RequestIpState
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_bg_temperature_measurement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_sys_if.o(.text.ll_sys_config_params)
</UL>
<P><STRONG><a name="[3f]"></a>TIM16_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32wbaxx_it.o(.text.TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM16_IRQHandler &rArr; SCM_HSE_SW_HSERDY_isr &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_HSE_SW_HSERDY_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>TIMER_IF_Convert_Tick2ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_Convert_Tick2ms))
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[e8]"></a>TIMER_IF_Convert_ms2Tick</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timer_if.o(.text.TIMER_IF_Convert_ms2Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[e7]"></a>TIMER_IF_GetMinimumTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_GetMinimumTimeout))
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[e4]"></a>TIMER_IF_GetTimerContext</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_GetTimerContext))
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[e5]"></a>TIMER_IF_GetTimerElapsedTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_GetTimerElapsedTime))
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[e6]"></a>TIMER_IF_GetTimerValue</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_GetTimerValue))
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[e0]"></a>TIMER_IF_Init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, timer_if.o(.text.TIMER_IF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER_IF_Init &rArr; HAL_RTCEx_BKUPWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_EnableBypassShadow
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[e3]"></a>TIMER_IF_SetTimerContext</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_SetTimerContext))
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[e1]"></a>TIMER_IF_StartTimer</STRONG> (Thumb, 102 bytes, Stack size 72 bytes, timer_if.o(.text.TIMER_IF_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = TIMER_IF_StartTimer &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[e2]"></a>TIMER_IF_StopTimer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timer_if.o(.text.TIMER_IF_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER_IF_StopTimer &rArr; HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[569]"></a>TS_APP_EvtRx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ts_app.o(.text.TS_APP_EvtRx))
<BR><BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[244]"></a>TS_APP_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ts_app.o(.text.TS_APP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360 + Unknown Stack Size
<LI>Call Chain = TS_APP_Init &rArr; TS_Init &rArr; aci_gatt_add_char &rArr; ACI_GATT_ADD_CHAR &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[57f]"></a>TS_Init</STRONG> (Thumb, 584 bytes, Stack size 80 bytes, ts.o(.text.TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = TS_Init &rArr; aci_gatt_add_char &rArr; ACI_GATT_ADD_CHAR &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_RegisterSvcHandler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_APP_Init
</UL>

<P><STRONG><a name="[580]"></a>TS_Notification</STRONG> (Thumb, 676 bytes, Stack size 40 bytes, ts_app.o(.text.TS_Notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = TS_Notification &rArr; TS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_byte_array_to_float
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_float_to_byte_array
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_UpdateValue
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_EventHandler
</UL>

<P><STRONG><a name="[581]"></a>TS_UpdateValue</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, ts.o(.text.TS_UpdateValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = TS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Ts_test_resp_code_SendNotification
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Ts_test_status_SendNotification
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Notification
</UL>

<P><STRONG><a name="[3a3]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 546 bytes, Stack size 8 bytes, stm32wbaxx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[3a5]"></a>UART_CheckIdleState</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, stm32wbaxx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[eb]"></a>UART_DeInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, adv_trace_usart_if.o(.text.UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_DeInit &rArr; HAL_UART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adv_trace_usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P><STRONG><a name="[ea]"></a>UART_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, adv_trace_usart_if.o(.text.UART_Init))
<BR>[Address Reference Count : 1]<UL><LI> adv_trace_usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P><STRONG><a name="[3a4]"></a>UART_SetConfig</STRONG> (Thumb, 988 bytes, Stack size 24 bytes, stm32wbaxx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK7Freq
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ec]"></a>UART_StartRx</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, adv_trace_usart_if.o(.text.UART_StartRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_StartRx &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adv_trace_usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P><STRONG><a name="[3a7]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 610 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.UART_Start_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[ed]"></a>UART_TransmitDMA</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, adv_trace_usart_if.o(.text.UART_TransmitDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_TransmitDMA &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adv_trace_usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P><STRONG><a name="[582]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 838 bytes, Stack size 24 bytes, stm32wbaxx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[3a]"></a>USART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wbaxx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>US_TO_SLP_TMR_PROTECTED</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.US_TO_SLP_TMR_PROTECTED))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = US_TO_SLP_TMR_PROTECTED &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_gnrc_evnt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evnt_schdlr.o(.text.evnt_schdlr_rgstr_evnt)
</UL>
<P><STRONG><a name="[42f]"></a>UTIL_ADV_TRACE_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UTIL_ADV_TRACE_Init &rArr; UTIL_MEM_set_8 &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_set_8
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Init
</UL>

<P><STRONG><a name="[57e]"></a>UTIL_ADV_TRACE_PostSendHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_entry.o(.text.UTIL_ADV_TRACE_PostSendHook))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_TxCpltCallback
</UL>

<P><STRONG><a name="[57d]"></a>UTIL_ADV_TRACE_PreSendHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_entry.o(.text.UTIL_ADV_TRACE_PreSendHook))
<BR><BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Send
</UL>

<P><STRONG><a name="[430]"></a>UTIL_ADV_TRACE_Send</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UTIL_ADV_TRACE_Send &rArr; TRACE_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>

<P><STRONG><a name="[570]"></a>UTIL_ADV_TRACE_StartRxProcess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_StartRxProcess))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_CMD_Interpreter_Init
</UL>

<P><STRONG><a name="[588]"></a>UTIL_MEM_set_8</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32_mem.o(.text.UTIL_MEM_set_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UTIL_MEM_set_8 &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_Init
</UL>

<P><STRONG><a name="[227]"></a>UTIL_MM_GetBuffer</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, stm32_mm.o(.text.UTIL_MM_GetBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTIL_MM_GetBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_WrapperAllocate
</UL>

<P><STRONG><a name="[229]"></a>UTIL_MM_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32_mm.o(.text.UTIL_MM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_MM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_WrapperInit
</UL>

<P><STRONG><a name="[228]"></a>UTIL_MM_ReleaseBuffer</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, stm32_mm.o(.text.UTIL_MM_ReleaseBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_MM_ReleaseBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_WrapperFree
</UL>

<P><STRONG><a name="[58b]"></a>UTIL_SEQ_CatchWarning</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_CatchWarning))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[58d]"></a>UTIL_SEQ_Idle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_entry.o(.text.UTIL_SEQ_Idle))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[58e]"></a>UTIL_SEQ_PostIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_entry.o(.text.UTIL_SEQ_PostIdle))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[58a]"></a>UTIL_SEQ_PostTask</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_PostTask))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[58c]"></a>UTIL_SEQ_PreIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_entry.o(.text.UTIL_SEQ_PreIdle))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[589]"></a>UTIL_SEQ_PreTask</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_PreTask))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[22d]"></a>UTIL_SEQ_RegTask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_RegTask))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_APP_Init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_APP_Init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_APP_Init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_APP_Init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_config_params
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_bg_process_init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Init
</UL>

<P><STRONG><a name="[43e]"></a>UTIL_SEQ_Run</STRONG> (Thumb, 476 bytes, Stack size 40 bytes, stm32_seq.o(.text.UTIL_SEQ_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UTIL_SEQ_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PostIdle
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PreIdle
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Idle
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_CatchWarning
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PostTask
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PreTask
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Process
</UL>

<P><STRONG><a name="[565]"></a>UTIL_SEQ_SetEvt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_SetEvt))
<BR><BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[226]"></a>UTIL_SEQ_SetTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_SetTask))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECB_Indication
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Cancel_Req
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_UserEvtRx
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ProcessRequest
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_ProcessRequest
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWCB_RNG_Process
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BPKACB_Process
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostStack_Process
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_schedule_bg_process_isr
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_schedule_bg_process
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_bg_temperature_measurement
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Callback
</UL>

<P><STRONG><a name="[240]"></a>UTIL_TIMER_Create</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stm32_timer.o(.text.UTIL_TIMER_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UTIL_TIMER_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BSP_ButtonInit
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Start
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTS_ReqWindow
</UL>

<P><STRONG><a name="[394]"></a>UTIL_TIMER_IRQ_Handler</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32_timer.o(.text.UTIL_TIMER_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>

<P><STRONG><a name="[434]"></a>UTIL_TIMER_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32_timer.o(.text.UTIL_TIMER_Init))
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[2af]"></a>UTIL_TIMER_Start</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, stm32_timer.o(.text.UTIL_TIMER_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UTIL_TIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_StartWithPeriod
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Start
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_started_callback
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_IRQ_Handler
</UL>

<P><STRONG><a name="[249]"></a>UTIL_TIMER_StartWithPeriod</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, stm32_timer.o(.text.UTIL_TIMER_StartWithPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UTIL_TIMER_StartWithPeriod &rArr; UTIL_TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Callback
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[2ae]"></a>UTIL_TIMER_Stop</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, stm32_timer.o(.text.UTIL_TIMER_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UTIL_TIMER_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_TriggerActions
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Stop
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TIMER_Start
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTS_RelWindow
</UL>

<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wbaxx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wba55xx.o(RESET)
</UL>
<P><STRONG><a name="[56d]"></a>aci_gap_allow_rebond</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleplat.o(.text.aci_gap_allow_rebond))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = aci_gap_allow_rebond &rArr; BleStackCB_Process &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_ALLOW_REBOND
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[23c]"></a>aci_gap_configure_filter_accept_list</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleplat.o(.text.aci_gap_configure_filter_accept_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = aci_gap_configure_filter_accept_list &rArr; BleStackCB_Process &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_CONFIGURE_FILTER_ACCEPT_LIST
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[24b]"></a>aci_gap_delete_ad_type</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleplat.o(.text.aci_gap_delete_ad_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = aci_gap_delete_ad_type &rArr; BleStackCB_Process &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_DELETE_AD_TYPE
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Procedure_Gap_Peripheral
</UL>

<P><STRONG><a name="[237]"></a>aci_gap_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bleplat.o(.text.aci_gap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320 + Unknown Stack Size
<LI>Call Chain = aci_gap_init &rArr; ACI_GAP_INIT &rArr; GATT_Gap_Add_Service &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[56e]"></a>aci_gap_numeric_comparison_value_confirm_yesno</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleplat.o(.text.aci_gap_numeric_comparison_value_confirm_yesno))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = aci_gap_numeric_comparison_value_confirm_yesno &rArr; BleStackCB_Process &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_NUMERIC_COMPARISON_VALUE_CONFIRM_YESNO
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[56c]"></a>aci_gap_pass_key_resp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleplat.o(.text.aci_gap_pass_key_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = aci_gap_pass_key_resp &rArr; BleStackCB_Process &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_PASS_KEY_RESP
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_App_Notification
</UL>

<P><STRONG><a name="[23b]"></a>aci_gap_set_authentication_requirement</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, bleplat.o(.text.aci_gap_set_authentication_requirement))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = aci_gap_set_authentication_requirement &rArr; BleStackCB_Process &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_SET_AUTHENTICATION_REQUIREMENT
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[24a]"></a>aci_gap_set_discoverable</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, bleplat.o(.text.aci_gap_set_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = aci_gap_set_discoverable &rArr; ACI_GAP_SET_DISCOVERABLE &rArr; OUTLINED_FUNCTION_3 &rArr; GAP_Adv_Legacy_Start &rArr; HCI_LE_SET_ADVERTISING_ENABLE &rArr; ll_intf_le_set_adv_enable &rArr; non_conn_mngr_adv_enable &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_SET_DISCOVERABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Procedure_Gap_Peripheral
</UL>

<P><STRONG><a name="[23a]"></a>aci_gap_set_io_capability</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleplat.o(.text.aci_gap_set_io_capability))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = aci_gap_set_io_capability &rArr; BleStackCB_Process &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_SET_IO_CAPABILITY
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[24d]"></a>aci_gap_set_non_discoverable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleplat.o(.text.aci_gap_set_non_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = aci_gap_set_non_discoverable &rArr; BleStackCB_Process &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_SET_NON_DISCOVERABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Procedure_Gap_Peripheral
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adv_Cancel
</UL>

<P><STRONG><a name="[24c]"></a>aci_gap_update_adv_data</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleplat.o(.text.aci_gap_update_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = aci_gap_update_adv_data &rArr; BleStackCB_Process &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_UPDATE_ADV_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Procedure_Gap_Peripheral
</UL>

<P><STRONG><a name="[23d]"></a>aci_gatt_add_char</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, bleplat.o(.text.aci_gatt_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = aci_gatt_add_char &rArr; ACI_GATT_ADD_CHAR &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ADD_CHAR
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_Init
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_Init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_Init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Init
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_Init
</UL>

<P><STRONG><a name="[2d9]"></a>aci_gatt_add_service</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bleplat.o(.text.aci_gatt_add_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = aci_gatt_add_service &rArr; ACI_GATT_ADD_SERVICE &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ADD_SERVICE
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_Init
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_Init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_Init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Init
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_Init
</UL>

<P><STRONG><a name="[2d6]"></a>aci_gatt_allow_read</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleplat.o(.text.aci_gatt_allow_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = aci_gatt_allow_read &rArr; ACI_GATT_ALLOW_READ &rArr; GATT_Read_Permit_Resp &rArr; ATT_Build_Read_By_Type_Rsp &rArr; GATT_Read_Multi_Permit_Req_Event &rArr; EVT_aci_gatt_read_multi_permit_req &rArr; ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ALLOW_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_EventHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_EventHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_EventHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_EventHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_EventHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_EventHandler
</UL>

<P><STRONG><a name="[509]"></a>aci_gatt_confirm_indication</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleplat.o(.text.aci_gatt_confirm_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = aci_gatt_confirm_indication &rArr; BleStackCB_Process &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_CONFIRM_INDICATION
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_EventHandler
</UL>

<P><STRONG><a name="[236]"></a>aci_gatt_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleplat.o(.text.aci_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264 + Unknown Stack Size
<LI>Call Chain = aci_gatt_init &rArr; ACI_GATT_INIT &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[238]"></a>aci_gatt_update_char_value</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bleplat.o(.text.aci_gatt_update_char_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_UPDATE_CHAR_VALUE
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_UpdateValue
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_UpdateValue
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_UpdateValue
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_UpdateValue
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_UpdateValue
</UL>

<P><STRONG><a name="[247]"></a>aci_hal_set_radio_activity_mask</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleplat.o(.text.aci_hal_set_radio_activity_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = aci_hal_set_radio_activity_mask &rArr; BleStackCB_Process &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_HAL_SET_RADIO_ACTIVITY_MASK
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[235]"></a>aci_hal_set_tx_power_level</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleplat.o(.text.aci_hal_set_tx_power_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = aci_hal_set_tx_power_level &rArr; BleStackCB_Process &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_HAL_SET_TX_POWER_LEVEL
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[231]"></a>aci_hal_write_config_data</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleplat.o(.text.aci_hal_write_config_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = aci_hal_write_config_data &rArr; BleStackCB_Process &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_HAL_WRITE_CONFIG_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[24e]"></a>aci_l2cap_connection_parameter_update_req</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bleplat.o(.text.aci_l2cap_connection_parameter_update_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = aci_l2cap_connection_parameter_update_req &rArr; BleStackCB_Process &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Procedure_Gap_Peripheral
</UL>

<P><STRONG><a name="[4ce]"></a>allocate_data_packet</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, pkt_mem_if.o(.text.allocate_data_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = allocate_data_packet &rArr; os_shrd_mem_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_shrd_mem_alloc
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_alloc
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_conn_evnt_param
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_adv_param
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_33
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
</UL>

<P><STRONG><a name="[32a]"></a>assert_failed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text.assert_failed))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_ConfigChannelAttributes
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableWakeUpPin
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_HSESetTrimming
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableFifoMode
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_PrivilegeModeSet
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RAMCFG_Init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DeInit
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RAMCFG_GetWaitState
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RAMCFG_ConfigWaitState
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_DeInit
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Polynomial_Set
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Burst
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXTI_GetHandle
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_reset
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_config_params
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_Assert
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_ClockInit
</UL>

<P><STRONG><a name="[6bc]"></a>ble_mem_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ble_mem_cfg.o(.text.ble_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_init
</UL>

<P><STRONG><a name="[6bd]"></a>ble_mem_shared_reset</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ble_mem_cfg.o(.text.ble_mem_shared_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_mem_shared_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_init
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_reset
</UL>

<P><STRONG><a name="[20a]"></a>ble_memcmp</STRONG> (Thumb, 176 bytes, Stack size 20 bytes, mem_utils.o(.text.ble_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ble_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_clr_fw_reslvng_list
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Rep_Attempts_Timeout_Cb
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Rep_Attempts_Protection
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Pairing_DHKey_Check_Rx_Handler
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Pairing_Public_Key_Rx_Handler
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_OOB_SC_Authentication_Stage_1
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Check_Remote_OOB_Data_Presence
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Write_Sec_Record
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RndAddr_Check_Resolvable_Address
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Gatt_Record
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Get_Change_Vs_Server_Database
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_By_Type_Rsp
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Cmp_Data
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RndAddr_Generate_Non_Resolvable_Address
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Read_Sec_Record
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_interrupt
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_data_length_update_received
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_src_address
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_srch_fw_reslvng_list
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_rsln
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_post_timer_evnt_clbk
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_update_rpa_src_addr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_cbk
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Search_Rep_Attempts_List
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Validate_Signed_Packet
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_init
</UL>

<P><STRONG><a name="[5a]"></a>ble_memcpy</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, mem_utils.o(.text.ble_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECB_Indication
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStack_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ADD_SERVICE
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_DELETE_AD_TYPE
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_UPDATE_ADV_DATA
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_GENERATE_DHKEY
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_READ_LOCAL_P256_PUBLIC_KEY
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_select_tx_power_mode
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_param_req
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enqueue_host_control
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_encryption_req
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_128_encrypt
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_local_chnl_classification
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_reset
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_set_adv_params
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_adv_params
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_set_adv_data
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_set_bd_address
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_read_cntrlr_ver_info
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_reset
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_end_of_activity_evnt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_trm_key_rqst_evnt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_data_length_chg_event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_le_dir_adv_report_pkt
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_le_adv_report_pkt
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_update_ststic
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_conn_evnt_en_encry
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_conn_evnt_param
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_ch_idx_algo_2
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_GATT_Attribute_Modified
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Get_Data
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_WRITE_PERMIT_REQ_EVENT
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_L2CAP_COMMAND_REJECT_EVENT
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_L2CAP_PROC_TIMEOUT_EVENT
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_PROC_COMPLETE_EVENT
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_WARNING_EVENT
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_DIRECTED_ADVERTISING_REPORT_EVENT
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_GENERATE_DHKEY_COMPLETE_EVENT
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_READ_LOCAL_P256_PUBLIC_KEY_COMPLETE_EVENT
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LONG_TERM_KEY_REQUEST_EVENT
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_READ_REMOTE_FEATURES_PAGE_0_COMPLETE_EVENT
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_CONNECTION_COMPLETE_EVENT
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy_n_bytes
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_alloc_handle
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Generate_DHkey_Complete_Handler
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Read_Local_P256key_Complete_Handler
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Phase_2AS2_Set_Addresses
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_STK
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Compute_Confirm_Value
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Rep_Attempts_Protection
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_LTK_Request_Handler
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Phase_2_Process
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Set_Data
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Compute_EDIV
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_LP_Get_TK
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Request
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_LP_Compute_Confirm_Value
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Success
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Get_OOB_SC_Random
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Write_Gatt_Data
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Write_Sec_Record
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Store
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Get_Change_Vs_Server_Database
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_By_Type_Rsp
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_UUID
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Update_Char_Value_Core
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Desc_Core
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RndAddr_Generate_Non_Resolvable_Address
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Own_Address
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Legacy_SetData
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Legacy_Start
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgData_Write
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SET_ADVERTISING_PARAMETERS
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_conn_empty_pkts
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_parse_data_cntrl
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_chnl_map_received
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_param_req_received
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_conn_param_received
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_conn_param
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_data_length_update_received
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_form_cntrl_pdu
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_master_conn_timers
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_slave_conn_timers
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_set_random_address
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_src_address
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_check_update_prcdur
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_slave_start_connection
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_calc_num_of_used_data_chnls
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_hw_reslvng_list
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_rsln
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_parse_conn_req
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_gen
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_parse_nconn_adv
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_cbk
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_slot_durations
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RndAddr_Calculate_Address_Hash
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_CMAC_Generate_Tag
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Validate_Signed_Packet
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Copy_Data
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Get_UUID128_From_Read_By_Type_Req
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_By_Grp_Type_Rsp
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RndAddr_Generate_Static_Address
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeDirectedAdvertisingReportEvent
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeAdvertisingReportEvent
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_init
</UL>
<BR>[Address Reference Count : 10]<UL><LI> hci.o(.text.hci_read_rmt_ver_info_cmplt_evnt)
<LI> hci.o(.text.hci_le_read_rmt_used_page_0_features_cmplt_evnt)
<LI> gatt_server.o(.text.GATT_Add_Char_Core)
<LI> smp.o(.text.SMP_Connection_Complete_Handler)
<LI> le_ctrl.o(.text.LECTRL_Reset)
<LI> smp_pair.o(.text.SMP_Pairing_Process)
<LI> api.o(.text.HCI_LE_ENHANCED_CONNECTION_COMPLETE_EVENT)
<LI> prvcy_mngr.o(.text.prvcy_mngr_add_rmv_clr_fw_reslvng_list)
<LI> sm_algo.o(.text.SMA_Compute_Confirm_Value)
<LI> acl.o(.text.ACL_Append)
</UL>
<P><STRONG><a name="[5a6]"></a>ble_memcpy_n_bytes</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mem_utils.o(.text.ble_memcpy_n_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ble_memcpy_n_bytes &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto
</UL>

<P><STRONG><a name="[28e]"></a>ble_memset</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, mem_utils.o(.text.ble_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RESET
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLATCB_PkaComplete
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_get_link_status
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_features
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_clr_fw_reslvng_list
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_reset
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_reset
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_reset
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_reset
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hci_init
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_update_ststic
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_init
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_alloc_evnt
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_conn_evnt_param
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_adv_param
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_phy_clbr_state
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_Reset
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CfgData_Init
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_alloc_handle
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Compute_DHKey_Check
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Compute_Confirm_Value
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Pairing_End
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Compute_EDIV
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_LP_Get_TK
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Request
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Success
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Crop_Key
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Reset_Remote_Device
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_OOB_SC_Authentication_Stage_1
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Clear_Remote_OOB_Data
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Store_Server_Database
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Core
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SET_ADVERTISING_PARAMETERS
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_AllocateACLDataInLL
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_27
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_conn_empty_pkts
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_form_cntrl_pdu
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_data_packet
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_form_data_pdu
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_init_acl
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_rsln
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_gen
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_cbk
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_reset
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RndAddr_Calculate_Address_Hash
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Search_Rep_Attempts_List
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_CMAC_Generate_Tag
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Reset_Bearer
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_NumberOfCompletedPacketsEvent
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_init_context
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_init
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset_rco_clbr
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset_slptmr_src
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_tx_power_params_init
</UL>

<P><STRONG><a name="[5a7]"></a>ble_time_add</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_time.o(.text.ble_time_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_time_add
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
</UL>

<P><STRONG><a name="[4a8]"></a>ble_time_add_uint</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_time.o(.text.ble_time_add_uint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_time_add_uint &rArr; ble_time_add
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_conn_params_updtd
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_check_scan_on_air
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_updt_clbr_evnt_when_temp_rcvd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_phy_clbr_done_clbk
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_master_conn_params
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_evnt_done
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lw_isr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_hg_isr
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_master_conn_timers
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_slave_conn_timers
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_validate_and_update_swto_remaining_time
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_set_slave_conn_timers
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_slave_start_connection
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_scan
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_evnt_start_time
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hndl_missed_evnt
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_intrvl_to_evnt_time_stamp
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_event
</UL>

<P><STRONG><a name="[4b3]"></a>ble_time_cmp_raw_reading</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ble_time.o(.text.ble_time_cmp_raw_reading))
<BR><BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stp_dtm
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_get_remaining_time_for_next_event
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_near_evnts
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_hndl_runtime_clbr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_done
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lw_isr
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_clbr_seq_done_isr
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_scan
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hndl_missed_evnt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nxt_when_idle_evnt
</UL>

<P><STRONG><a name="[596]"></a>ble_time_comp</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ble_time.o(.text.ble_time_comp))
<BR><BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_check_scan_on_air
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_validate_and_update_swto_remaining_time
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_diff_us
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_scan
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_event
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv
</UL>

<P><STRONG><a name="[5ab]"></a>ble_time_diff_us</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_time.o(.text.ble_time_diff_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_time_diff_us &rArr; ble_time_ordered_diff_us_overflow
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_comp
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_ordered_diff_us_overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_master_conn_params
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_priority
</UL>

<P><STRONG><a name="[5ad]"></a>ble_time_ordered_diff_us</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ble_time.o(.text.ble_time_ordered_diff_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_time_ordered_diff_us &rArr; ble_time_ordered_diff_us_overflow
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_ordered_diff_us_overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_near_evnts
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_slave_conn_timers
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_calc_wndw_widening
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_max_pkts_to_send
</UL>

<P><STRONG><a name="[65d]"></a>ble_time_overflow_diff</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_time.o(.text.ble_time_overflow_diff))
<BR><BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_clock_accuracy_req
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stp_dtm
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_get_remaining_time_for_next_event
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_near_evnts
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_evnt_clbk
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_strtd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_done
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_scan
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hndl_missed_evnt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nxt_when_idle_evnt
</UL>

<P><STRONG><a name="[5ae]"></a>ble_time_rmv</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ble_time.o(.text.ble_time_rmv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_time_rmv
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_comp
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv_fine
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv_uint
</UL>

<P><STRONG><a name="[5b0]"></a>ble_time_rmv_uint</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ble_time.o(.text.ble_time_rmv_uint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_time_rmv_uint &rArr; ble_time_rmv
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_get_remaining_time_for_next_event
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_updt_clbr_evnt_when_temp_rcvd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_evnt_clbk
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_strtd
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_slave_conn_timers
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_set_slave_conn_timers
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_scan
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hndl_missed_evnt
</UL>

<P><STRONG><a name="[48f]"></a>ble_time_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_time.o(.text.ble_time_set))
<BR><BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_conn_params_updtd
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_error_cbk
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_master_conn_timers
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_validate_and_update_swto_remaining_time
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_slave_start_connection
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_scan
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_intrvl_to_evnt_time_stamp
</UL>

<P><STRONG><a name="[b3]"></a>bsp_assert</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp.o(.text.bsp_assert))
<BR><BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set_prio
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_gnrc_evnt_cmplt
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_remove_conditional_event
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_send_pkt
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_set_event_handle_busy
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event_first
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_default_ll_queue_full
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_form_hdr
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_event_on_air_polling
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_current_hw_steps
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buff_hdr
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_evnt
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_configure_acl_params
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_mngr_get_state_type
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_evnt_notify
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_get_evnt_on_air_time
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_abortd
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_ll_timer_init
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_alloc_handle
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_process_evnt_clbk
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_AllocateACLDataInLL
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_alloc_desc
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_master_conn_params
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_conn_evnt_done
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_sm_mode_from_event_type
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_features_received
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_form_cntrl_pdu
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_data_packet
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_set_req_chnls_in_min_chnls_prcdr
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_instant_ctrl_init
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_calc_conn_tx_rx_durn_per_pkt
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_process_pkt
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_remove_pta_params
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_init_acl
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_recalculate_instant
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_stop_modulation_mode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_run_phy_sequence
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_strt_vco_pll_clbr
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_read_updt_vco_pll_clbr
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_free_tmr
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_mngr_alloc_state_mchn
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_evnt_intrvl
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hndl_missed_evnt
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_priority
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_rco_isr
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_start_stop_runtime_rco_clbr
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_update_rco_timer
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pool_free
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pool_alloc
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_ordered_diff_us_overflow
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 6]<UL><LI> conn_mngr.o(.text.conn_mngr_disconnect)
<LI> multi_role_greedy.o(.text.evnt_on_air)
<LI> multi_role_greedy.o(.text.hndl_missed_evnt)
<LI> pdu_trnsprt_hndlr.o(.text.pdu_trnsprt_hndlr_parse_data_cntrl)
<LI> llhwc_cmn.o(.text.llhwc_cmn_evnt_notify)
<LI> mem_manager.o(.text.mem_pool_init)
</UL>
<P><STRONG><a name="[5b2]"></a>bsp_control_aclk</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(.text.bsp_control_aclk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_radio_ack_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_control_aclk
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset
</UL>

<P><STRONG><a name="[72e]"></a>bsp_control_hclk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text.bsp_control_hclk))
<BR><BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_control_hclk
</UL>

<P><STRONG><a name="[591]"></a>bsp_debug_gpio_clear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(.text.bsp_debug_gpio_clear))
<BR><BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_DEBUG_SIGNAL_RESET
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_handle_all_events
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_process_event
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_dp_slp_mode
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_acl_data_from_host_to_cntrlr
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event_first
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_free_ll_pkt_hndlr
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_dp_slp_mode
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stop_scan
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_evnt_updtd
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_evnt
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_conn_evnt_param
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_set
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_ch_idx_algo_2
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_near_evnts
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_timer_callback
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_phy_clbr_done_clbk
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_strtd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_post_timer_evnt_clbk
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_updt_conn_param_evnt_clbk
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_process_evnt_clbk
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_hndl_runtime_clbr
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_init_clbr
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_wait_for_evnt_on_air
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_clr_isr
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_conn_evnt_done
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_done
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_adv_done
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_post_timer_evnt_clbk
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_clbr_seq_done_isr
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_read_updt_vco_pll_clbr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_post_timer_evnt_clbk
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_cbk
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hndl_missed_evnt
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_conflict_queue
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_pta_set_enable
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_pta_set_params
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_rco_clbr_timer_cbk
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_rco_isr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_lw_isr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_hg_isr
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_start_stop_runtime_rco_clbr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_isr
</UL>

<P><STRONG><a name="[49e]"></a>bsp_debug_gpio_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(.text.bsp_debug_gpio_set))
<BR><BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_DEBUG_SIGNAL_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_handle_all_events
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_process_event
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_dp_slp_mode
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_acl_data_from_host_to_cntrlr
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_free_ll_pkt_hndlr
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_dp_slp_mode
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stop_scan
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_evnt_updtd
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_evnt
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_conn_evnt_param
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_set
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_ch_idx_algo_2
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_near_evnts
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_timer_callback
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_exec
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_strtd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_post_timer_evnt_clbk
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_updt_conn_param_evnt_clbk
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_process_evnt_clbk
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_hndl_runtime_clbr
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_init_clbr
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_wait_for_evnt_on_air
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_clr_isr
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_conn_evnt_done
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_done
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_adv_done
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_post_timer_evnt_clbk
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_clbr_seq_done_isr
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_strt_vco_pll_clbr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_post_timer_evnt_clbk
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_cbk
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hndl_missed_evnt
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_conflict_queue
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_pta_set_enable
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_pta_set_params
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_rco_clbr_timer_cbk
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_rco_isr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_lw_isr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_hg_isr
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_start_stop_runtime_rco_clbr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_isr
</UL>

<P><STRONG><a name="[497]"></a>bsp_debug_gpio_toggle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(.text.bsp_debug_gpio_toggle))
<BR><BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_DEBUG_SIGNAL_TOGGLE
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_init
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_trigger_sleep_clock_accuracy_update
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_clock_accuracy_req
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_send_pkt
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_clr_fw_reslvng_list
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_trm_key_rqst_evnt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_conn_param_req_event
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_select_tx_power_mode
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_set_dp_slp_mode
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_near_evnts
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_strt_stp
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_clr_isr
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lw_isr
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_init
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_start_stop_runtime_rco_clbr
</UL>

<P><STRONG><a name="[5b7]"></a>bsp_delay_us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(.text.bsp_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_delay_us &rArr; ll_sys_delay_us &rArr; LINKLAYER_PLAT_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_hg_isr
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset
</UL>

<P><STRONG><a name="[5b9]"></a>bsp_evnt_not</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp.o(.text.bsp_evnt_not))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsp_evnt_not &rArr; ll_sys_radio_evt_not &rArr; LINKLAYER_PLAT_StopRadioEvt &rArr; scm_notifyradiostate &rArr; scm_setsystemclock &rArr; SwitchHse16toHse32 &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_radio_evt_not
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_evnt_notify
</UL>

<P><STRONG><a name="[5bb]"></a>bsp_evnt_schldr_timing_update_not</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(.text.bsp_evnt_schldr_timing_update_not))
<BR><BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_schldr_timing_update_not
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_config_schdling_time
</UL>

<P><STRONG><a name="[5bd]"></a>bsp_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp.o(.text.bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_init &rArr; ll_sys_init &rArr; LINKLAYER_PLAT_ClockInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_shared_init
</UL>

<P><STRONG><a name="[5bf]"></a>bsp_intr_set_pri</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp.o(.text.bsp_intr_set_pri))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_intr_set_pri &rArr; ll_sys_setup_radio_sw_low_intr &rArr; LINKLAYER_PLAT_SetupSwLowIT &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_setup_radio_sw_low_intr
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_setup_radio_intr
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_init
</UL>

<P><STRONG><a name="[6b7]"></a>bsp_is_ptr_in_ble_mem</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp.o(.text.bsp_is_ptr_in_ble_mem))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_free_ll_pkt_hndlr
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto
</UL>

<P><STRONG><a name="[5c2]"></a>bsp_rco_clbr_not</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp.o(.text.bsp_rco_clbr_not))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bsp_rco_clbr_not &rArr; ll_sys_rco_clbr_not &rArr; LINKLAYER_PLAT_RCOStartClbr &rArr; scm_setsystemclock &rArr; SwitchHse16toHse32 &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_rco_clbr_not
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_hw_rco_clbr_enable
</UL>

<P><STRONG><a name="[5c4]"></a>bsp_request_temperature</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(.text.bsp_request_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = bsp_request_temperature &rArr; ll_sys_request_temperature &rArr; LINKLAYER_PLAT_RequestTemperature &rArr; ll_sys_bg_temperature_measurement &rArr; TEMPMEAS_RequestTemperatureMeasurement &rArr; ll_intf_cmn_set_temperature_value &rArr; llhwc_cmn_set_temperature_value &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_request_temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_request_temperature
</UL>

<P><STRONG><a name="[5c6]"></a>bsp_set_phy_clbr_state</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp.o(.text.bsp_set_phy_clbr_state))
<BR><BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_assert
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_phy_stop_clbr
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_phy_start_clbr
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_notify_phy_clbr_state
</UL>

<P><STRONG><a name="[5c9]"></a>bsp_switch_to_lw_isr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(.text.bsp_switch_to_lw_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_switch_to_lw_isr &rArr; ll_sys_radio_sw_low_intr_trigger &rArr; LINKLAYER_PLAT_TriggerSwLowIT &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_radio_sw_low_intr_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_hg_isr
</UL>

<P><STRONG><a name="[5cb]"></a>bsp_wait_for_busclkrdy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(.text.bsp_wait_for_busclkrdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_wait_for_busclkrdy &rArr; ll_sys_radio_wait_for_busclkrdy &rArr; LINKLAYER_PLAT_WaitHclkRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_radio_wait_for_busclkrdy
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_current_hw_steps
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
</UL>

<P><STRONG><a name="[b5]"></a>conn_mngr_check_conn_id</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, conn_mngr.o(.text.conn_mngr_check_conn_id))
<BR>[Address Reference Count : 2]<UL><LI> evnt_schdlr.o(.text.evnt_schdlr_hndl_next_evnt)
<LI> conn_mngr.o(.text.conn_mngr_disconnect)
</UL>
<P><STRONG><a name="[600]"></a>conn_mngr_compare_chnl_maps</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, conn_mngr.o(.text.conn_mngr_compare_chnl_maps))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = conn_mngr_compare_chnl_maps
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_update_ststic
</UL>

<P><STRONG><a name="[5d2]"></a>conn_mngr_disconnect</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, conn_mngr.o(.text.conn_mngr_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = conn_mngr_disconnect &rArr; conn_mngr_free_handle &rArr; evnt_schdlr_unrgstr_evnt &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_remove_conditional_event
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_mngr_get_state_type
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_specific_irq
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_specific_irq
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_free_all_timers
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_addr_rsl_enable
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_update_local_clk_acc
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_free_handle
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_edit_indicators
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_mngr_update_state
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_process_evnt_clbk
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_chnl_map_received
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_conn_param_received
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_disconnect_received
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_mngr_termination_recevied_clbk
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_process_pkt
</UL>

<P><STRONG><a name="[5d9]"></a>conn_mngr_free_handle</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, conn_mngr.o(.text.conn_mngr_free_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = conn_mngr_free_handle &rArr; evnt_schdlr_unrgstr_evnt &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_free_all_timers
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_remove_pta_params
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
</UL>

<P><STRONG><a name="[5dd]"></a>conn_mngr_get_link_status</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, conn_mngr.o(.text.conn_mngr_get_link_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = conn_mngr_get_link_status
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_get_link_status
</UL>

<P><STRONG><a name="[5e1]"></a>conn_mngr_get_ping_timeout_value</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, conn_mngr.o(.text.conn_mngr_get_ping_timeout_value))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_process_evnt_clbk
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_received
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[6cb]"></a>conn_mngr_get_run_conn_no</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, conn_mngr.o(.text.conn_mngr_get_run_conn_no))
<BR><BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_sleep_clock_accuracy
</UL>

<P><STRONG><a name="[5de]"></a>conn_mngr_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, conn_mngr.o(.text.conn_mngr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = conn_mngr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_handle_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_init
</UL>

<P><STRONG><a name="[5eb]"></a>conn_mngr_reset</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, conn_mngr.o(.text.conn_mngr_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = conn_mngr_reset &rArr; evnt_schdlr_unrgstr_evnt &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_handle_remove
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_free_all_timers
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_reset
</UL>

<P><STRONG><a name="[467]"></a>conn_mngr_send_le_phy_update_complete_event</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, conn_mngr.o(.text.conn_mngr_send_le_phy_update_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = conn_mngr_send_le_phy_update_complete_event
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_process_evnt_clbk
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ll_phy_update_ind
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[5ed]"></a>conn_mngr_send_pkt</STRONG> (Thumb, 704 bytes, Stack size 56 bytes, conn_mngr.o(.text.conn_mngr_send_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = conn_mngr_send_pkt &rArr; evnt_schdlr_add_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_alloc
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_add_data_pkt
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buff_hdr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_form_data_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_acl_data_from_host_to_cntrlr
</UL>

<P><STRONG><a name="[5f0]"></a>conn_mngr_set_conn_tx_power_level</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, conn_mngr.o(.text.conn_mngr_set_conn_tx_power_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = conn_mngr_set_conn_tx_power_level &rArr; ll_tx_pwr_if_get_tx_pwr_table_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_get_tx_pwr_table_offset
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_set_conn_tx_power_level
</UL>

<P><STRONG><a name="[5f2]"></a>conn_mngr_slave_start_connection</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, conn_mngr.o(.text.conn_mngr_slave_start_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = conn_mngr_slave_start_connection &rArr; conn_mngr_start_connection &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_slp_clk_accuracy
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_set
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_mngr_get_state_type
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_start_connection
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_alloc_handle
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
</UL>

<P><STRONG><a name="[5f5]"></a>conn_mngr_sprvsn_timer_custom_set</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, conn_mngr.o(.text.conn_mngr_sprvsn_timer_custom_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = conn_mngr_sprvsn_timer_custom_set &rArr; os_timer_set &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_slp_clk_accuracy
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sca_ppm
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_validate_and_update_swto_remaining_time
</UL>

<P><STRONG><a name="[4d7]"></a>conn_mngr_sprvsn_timer_set</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, conn_mngr.o(.text.conn_mngr_sprvsn_timer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = conn_mngr_sprvsn_timer_set &rArr; os_timer_set &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_slp_clk_accuracy
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sca_ppm
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>

<P><STRONG><a name="[5fc]"></a>conn_mngr_trigger_sleep_clock_accuracy_update</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, conn_mngr.o(.text.conn_mngr_trigger_sleep_clock_accuracy_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = conn_mngr_trigger_sleep_clock_accuracy_update &rArr; llcp_clock_accuracy_req &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_clock_accuracy_req
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_sleep_clock_accuracy
</UL>

<P><STRONG><a name="[5d6]"></a>conn_mngr_update_local_clk_acc</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, conn_mngr.o(.text.conn_mngr_update_local_clk_acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = conn_mngr_update_local_clk_acc &rArr; evnt_utils_update_sleep_clock_accuracy &rArr; conn_mngr_update_sca_for_running_conn
</UL>
<BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_update_sleep_clock_accuracy
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_slp_clk_accuracy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_clk_acc_rsp_recieved
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
</UL>

<P><STRONG><a name="[68b]"></a>conn_mngr_update_sca_for_running_conn</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, conn_mngr.o(.text.conn_mngr_update_sca_for_running_conn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = conn_mngr_update_sca_for_running_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_update_sleep_clock_accuracy
</UL>

<P><STRONG><a name="[5fe]"></a>conn_mngr_update_ststic</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, conn_mngr.o(.text.conn_mngr_update_ststic))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = conn_mngr_update_ststic &rArr; llcp_update_chnl_map &rArr; llcp_update_chnl_map_per_connection &rArr; llcp_instant_ctrl_init &rArr; os_timer_create &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_chnl_map
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_local_chnl_classification
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_compare_chnl_maps
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
</UL>

<P><STRONG><a name="[2ea]"></a>convert_byte_array_to_float</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user_utils.o(.text.convert_byte_array_to_float))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_Notification
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Notification
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_Notification
</UL>

<P><STRONG><a name="[2e7]"></a>convert_float_to_byte_array</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, user_utils.o(.text.convert_float_to_byte_array))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_Cups_setpoint_p2_rw_SendNotification
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_Notification
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_opening_per_ReadUpdate
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_outlet_pres_pd2_ReadUpdate
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_inlet_pres_pd1_ReadUpdate
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p1t1_ReadUpdate
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p2t2_ReadUpdate
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_flowtemp_ReadUpdate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_opening_per_SendNotification
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_outlet_pres_pd2_SendNotification
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_inlet_pres_pd1_SendNotification
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p1t1_SendNotification
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_p2t2_SendNotification
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Cs_flowtemp_SendNotification
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Notification
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_Notification
</UL>

<P><STRONG><a name="[666]"></a>db_calc_rssi_compensated_value</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, database.o(.text.db_calc_rssi_compensated_value))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
</UL>

<P><STRONG><a name="[702]"></a>db_check_encryption</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, database.o(.text.db_check_encryption))
<BR><BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_encryption_req
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_received
</UL>

<P><STRONG><a name="[606]"></a>db_get_advertising_channel_tx_power</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, database.o(.text.db_get_advertising_channel_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = db_get_advertising_channel_tx_power
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_read_adv_channel_tx_power
</UL>

<P><STRONG><a name="[5d1]"></a>db_get_le_feature_info</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, database.o(.text.db_get_le_feature_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = db_get_le_feature_info &rArr; OUTLINED_FUNCTION_2 &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_is_le_power_class_1_supported
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_encryption_req
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_alloc_handle
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feature_exchange_init
</UL>

<P><STRONG><a name="[5ff]"></a>db_get_local_chnl_classification</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, database.o(.text.db_get_local_chnl_classification))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = db_get_local_chnl_classification &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_update_ststic
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_check_update_prcdur
</UL>

<P><STRONG><a name="[608]"></a>db_get_local_vrsn_info</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, database.o(.text.db_get_local_vrsn_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = db_get_local_vrsn_info
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_read_local_ver_info
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_version_exchange_init
</UL>

<P><STRONG><a name="[6cd]"></a>db_get_phy_conf_tx_pwr</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, database.o(.text.db_get_phy_conf_tx_pwr))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_write_tx_pwr
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_set_conn_tx_power_level
</UL>

<P><STRONG><a name="[49c]"></a>db_get_radiative_tx_pwr</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, database.o(.text.db_get_radiative_tx_pwr))
<BR><BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>

<P><STRONG><a name="[5f3]"></a>db_get_slp_clk_accuracy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, database.o(.text.db_get_slp_clk_accuracy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = db_get_slp_clk_accuracy
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_sleep_clock_accuracy
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_update_local_clk_acc
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_slave_start_connection
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_sprvsn_timer_custom_set
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_sprvsn_timer_set
</UL>

<P><STRONG><a name="[609]"></a>db_get_src_address</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, database.o(.text.db_get_src_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = db_get_src_address &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_enable
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
</UL>

<P><STRONG><a name="[6fe]"></a>db_get_suggested_data_length</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, database.o(.text.db_get_suggested_data_length))
<BR><BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_data_length_update_received
</UL>

<P><STRONG><a name="[6fd]"></a>db_get_suggested_data_length_trgrd_flg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, database.o(.text.db_get_suggested_data_length_trgrd_flg))
<BR><BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_data_length_update_received
</UL>

<P><STRONG><a name="[645]"></a>db_get_tx_power_value</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, database.o(.text.db_get_tx_power_value))
<BR><BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_conn_evnt_param
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_init_param
</UL>

<P><STRONG><a name="[712]"></a>db_le_get_default_phy_cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, database.o(.text.db_le_get_default_phy_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[6c7]"></a>db_le_set_default_phy_cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, database.o(.text.db_le_set_default_phy_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_default_phy_cmd
</UL>

<P><STRONG><a name="[60a]"></a>db_reset</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, database.o(.text.db_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = db_reset &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_get_tx_pwr_table_offset
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_init
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_reset
</UL>

<P><STRONG><a name="[60b]"></a>db_set_bd_address</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, database.o(.text.db_set_bd_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = db_set_bd_address &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_write_bd_addr
</UL>

<P><STRONG><a name="[60c]"></a>db_set_random_address</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, database.o(.text.db_set_random_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = db_set_random_address &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_set_random_address
</UL>

<P><STRONG><a name="[68a]"></a>db_set_slp_clk_accuracy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, database.o(.text.db_set_slp_clk_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_update_sleep_clock_accuracy
</UL>

<P><STRONG><a name="[6cf]"></a>db_set_tx_power_value</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, database.o(.text.db_set_tx_power_value))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_write_tx_pwr
</UL>

<P><STRONG><a name="[449]"></a>disable_specific_irq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, critical_section.o(.text.disable_specific_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disable_specific_irq &rArr; ll_sys_disable_specific_irq &rArr; LINKLAYER_PLAT_DisableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_disable_specific_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enqueue_host_control
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_dp_slp_mode
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_config_schdling_time
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_check_scan_on_air
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_phy_clbr_state
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_recalculate_instant
</UL>

<P><STRONG><a name="[6dd]"></a>emngr_can_mcu_sleep</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, event_manager.o(.text.emngr_can_mcu_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = emngr_can_mcu_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_bg_process
</UL>

<P><STRONG><a name="[60e]"></a>emngr_del_event</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, event_manager.o(.text.emngr_del_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_delete_node
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>

<P><STRONG><a name="[610]"></a>emngr_get_event</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, event_manager.o(.text.emngr_get_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = emngr_get_event &rArr; queue_dequeue &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_dequeue
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_process_event
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_reset
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_reset
</UL>

<P><STRONG><a name="[672]"></a>emngr_get_handle_events</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, event_manager.o(.text.emngr_get_handle_events))
<BR><BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_queue_send_pckt
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_reset
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_strtd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lw_isr
</UL>

<P><STRONG><a name="[612]"></a>emngr_handle_all_events</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, event_manager.o(.text.emngr_handle_all_events))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = emngr_handle_all_events &rArr; emngr_process_event &rArr; emngr_get_event &rArr; queue_dequeue &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_process_event
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_bg_process
</UL>

<P><STRONG><a name="[615]"></a>emngr_handle_event</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, event_manager.o(.text.emngr_handle_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = emngr_handle_event &rArr; emngr_process_event &rArr; emngr_get_event &rArr; queue_dequeue &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_release
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_process_event
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lw_isr
</UL>

<P><STRONG><a name="[c6]"></a>emngr_handle_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, event_manager.o(.text.emngr_handle_init))
<BR><BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_init
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.text.hci_init_events_queues)
</UL>
<P><STRONG><a name="[5ec]"></a>emngr_handle_remove</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, event_manager.o(.text.emngr_handle_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = emngr_handle_remove &rArr; queue_free &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_reset
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_phy_clbr_done_clbk
</UL>

<P><STRONG><a name="[618]"></a>emngr_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, event_manager.o(.text.emngr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = emngr_init &rArr; emngr_reset &rArr; queue_free &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_create
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_shared_init
</UL>

<P><STRONG><a name="[692]"></a>emngr_peak_frst_event</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, event_manager.o(.text.emngr_peak_frst_event))
<BR><BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>

<P><STRONG><a name="[4a5]"></a>emngr_post_event</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, event_manager.o(.text.emngr_post_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = emngr_post_event &rArr; queue_enqueue &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_release_isr
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_enqueue
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_le_set_phy_cmd
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_version
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_queue_send_pckt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_strtd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_post_timer_evnt_clbk
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_conn_evnt_done
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_done
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_adv_done
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_post_timer_evnt_clbk
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_slave_conn_timers
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_event
</UL>

<P><STRONG><a name="[620]"></a>emngr_post_event_first</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, event_manager.o(.text.emngr_post_event_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = emngr_post_event_first &rArr; queue_insert_frst &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_insert_frst
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_release_isr
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_post_event_cbk
</UL>

<P><STRONG><a name="[622]"></a>emngr_process_conditional_event</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, event_manager.o(.text.emngr_process_conditional_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = emngr_process_conditional_event &rArr; OUTLINED_FUNCTION_1 &rArr; queue_delete &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_specific_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
</UL>

<P><STRONG><a name="[614]"></a>emngr_process_event</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, event_manager.o(.text.emngr_process_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = emngr_process_event &rArr; emngr_get_event &rArr; queue_dequeue &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_get_event
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_handle_all_events
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_handle_event
</UL>

<P><STRONG><a name="[5d8]"></a>emngr_remove_conditional_event</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, event_manager.o(.text.emngr_remove_conditional_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = emngr_remove_conditional_event &rArr; OUTLINED_FUNCTION_1 &rArr; queue_delete &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_specific_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_clear_event
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_enable
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
</UL>

<P><STRONG><a name="[619]"></a>emngr_reset</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, event_manager.o(.text.emngr_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = emngr_reset &rArr; queue_free &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_init
</UL>

<P><STRONG><a name="[624]"></a>emngr_set_event_handle_busy</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, event_manager.o(.text.emngr_set_event_handle_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = emngr_set_event_handle_busy &rArr; os_semaphore_release
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_release
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_chng_evnt_hndlr_state
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_post_event_cbk
</UL>

<P><STRONG><a name="[488]"></a>enable_specific_irq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, critical_section.o(.text.enable_specific_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enable_specific_irq &rArr; ll_sys_enable_specific_irq &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_enable_specific_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_remove_conditional_event
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enqueue_host_control
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_dp_slp_mode
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_check_scan_on_air
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_phy_clbr_state
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_process_conditional_event
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_strtd
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_recalculate_instant
</UL>

<P><STRONG><a name="[643]"></a>evnt_count_adv_channels</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, evnt_utils.o(.text.evnt_count_adv_channels))
<BR><BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[626]"></a>evnt_schdlr_add_ctrl_pkt</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, evnt_schdlr.o(.text.evnt_schdlr_add_ctrl_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = evnt_schdlr_add_ctrl_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_enqueue
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
</UL>

<P><STRONG><a name="[5ef]"></a>evnt_schdlr_add_data_pkt</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, evnt_schdlr.o(.text.evnt_schdlr_add_data_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = evnt_schdlr_add_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_enqueue
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_dequeue
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_send_pkt
</UL>

<P><STRONG><a name="[629]"></a>evnt_schdlr_alloc_evnt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, evnt_utils.o(.text.evnt_schdlr_alloc_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = evnt_schdlr_alloc_evnt &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_alloc
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_evnt
</UL>

<P><STRONG><a name="[62a]"></a>evnt_schdlr_backoff_prcdr</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, evnt_utils.o(.text.evnt_schdlr_backoff_prcdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = evnt_schdlr_backoff_prcdr &rArr; llhwc_gen_rnd_num &rArr; gen_rnd_num &rArr; ll_sys_get_rng &rArr; LINKLAYER_PLAT_GetRNG &rArr; HW_RNG_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_gen_rnd_num
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
</UL>

<P><STRONG><a name="[62b]"></a>evnt_schdlr_cal_conn_eff_rx_time</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, evnt_utils.o(.text.evnt_schdlr_cal_conn_eff_rx_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = evnt_schdlr_cal_conn_eff_rx_time &rArr; evnt_schdlr_calc_conn_duration &rArr; evnt_utils_calc_conn_tx_rx_durn_per_pkt
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_calc_conn_duration
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_master_conn_timers
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_slave_conn_timers
</UL>

<P><STRONG><a name="[62c]"></a>evnt_schdlr_calc_adv_max_dur</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, evnt_utils.o(.text.evnt_schdlr_calc_adv_max_dur))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = evnt_schdlr_calc_adv_max_dur
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_calc_prim_adv_durn_on_air
</UL>

<P><STRONG><a name="[59a]"></a>evnt_schdlr_calc_conn_duration</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, evnt_utils.o(.text.evnt_schdlr_calc_conn_duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = evnt_schdlr_calc_conn_duration &rArr; evnt_utils_calc_conn_tx_rx_durn_per_pkt
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_calc_conn_tx_rx_durn_per_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_slave_conn_timers
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_cal_conn_eff_rx_time
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_set_slave_conn_timers
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updt_conn_evnt_durn
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
</UL>

<P><STRONG><a name="[594]"></a>evnt_schdlr_calc_prim_adv_durn_on_air</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, evnt_utils.o(.text.evnt_schdlr_calc_prim_adv_durn_on_air))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = evnt_schdlr_calc_prim_adv_durn_on_air &rArr; evnt_schdlr_calc_adv_max_dur
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_adv_chnls_switch_time
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_calc_adv_max_dur
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
</UL>

<P><STRONG><a name="[602]"></a>evnt_schdlr_calc_win_offset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, evnt_utils.o(.text.evnt_schdlr_calc_win_offset))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_updt_conn_param_evnt_clbk
</UL>

<P><STRONG><a name="[62e]"></a>evnt_schdlr_calc_wndw_widening</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, evnt_utils.o(.text.evnt_schdlr_calc_wndw_widening))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = evnt_schdlr_calc_wndw_widening &rArr; ble_time_ordered_diff_us &rArr; ble_time_ordered_diff_us_overflow
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_ordered_diff_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_slave_conn_timers
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_set_slave_conn_timers
</UL>

<P><STRONG><a name="[62f]"></a>evnt_schdlr_call_end_of_activity_callback</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, evnt_schdlr.o(.text.evnt_schdlr_call_end_of_activity_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = evnt_schdlr_call_end_of_activity_callback &rArr; evnt_schdlr_get_end_of_activity_state
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_get_end_of_activity_state
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
</UL>

<P><STRONG><a name="[677]"></a>evnt_schdlr_check_if_evnt_exist</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, multi_role_greedy.o(.text.evnt_schdlr_check_if_evnt_exist))
<BR><BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_evnt
</UL>

<P><STRONG><a name="[605]"></a>evnt_schdlr_choose_suitable_intrv</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, multi_role_greedy.o(.text.evnt_schdlr_choose_suitable_intrv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = evnt_schdlr_choose_suitable_intrv
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optm_conn_param
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_param_req
</UL>

<P><STRONG><a name="[be]"></a>evnt_schdlr_config_schdling_time</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, evnt_schdlr.o(.text.evnt_schdlr_config_schdling_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = evnt_schdlr_config_schdling_time &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_evnt_schldr_timing_update_not
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_specific_irq
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_config_schdling_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evnt_schdlr.o(.text.evnt_schdlr_init)
</UL>
<P><STRONG><a name="[4c3]"></a>evnt_schdlr_conn_params_updtd</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, evnt_schdlr.o(.text.evnt_schdlr_conn_params_updtd))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = evnt_schdlr_conn_params_updtd &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_set
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[724]"></a>evnt_schdlr_conn_parm_req</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, evnt_utils.o(.text.evnt_schdlr_conn_parm_req))
<BR><BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_param_req
</UL>

<P><STRONG><a name="[6b6]"></a>evnt_schdlr_ctrl_rx_dtp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.evnt_schdlr_ctrl_rx_dtp))
<BR><BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_ctrl_rx_dtp
</UL>

<P><STRONG><a name="[634]"></a>evnt_schdlr_event_on_air_polling</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, evnt_schdlr.o(.text.evnt_schdlr_event_on_air_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = evnt_schdlr_event_on_air_polling &rArr; evnt_schdlr_count_rem_hw_steps &rArr; llhwc_get_current_hw_steps &rArr; bsp_wait_for_busclkrdy &rArr; ll_sys_radio_wait_for_busclkrdy &rArr; LINKLAYER_PLAT_WaitHclkRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_is_event_on_air_cleared
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_current_hw_steps
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_convert_to_hw_steps
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_count_rem_hw_steps
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_get_evnt_on_air_time
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_ble_wait_for_evnt_on_air
</UL>

<P><STRONG><a name="[5db]"></a>evnt_schdlr_evnt_updtd</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, evnt_schdlr.o(.text.evnt_schdlr_evnt_updtd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = evnt_schdlr_evnt_updtd &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_gnrc_evnt_cmplt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_error_cbk
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_cbk
</UL>

<P><STRONG><a name="[59c]"></a>evnt_schdlr_free_evnt</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, evnt_utils.o(.text.evnt_schdlr_free_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = evnt_schdlr_free_evnt &rArr; free_buff_hdr &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buff_hdr
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_evnt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_reset
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_intrvl_to_evnt_time_stamp
</UL>

<P><STRONG><a name="[630]"></a>evnt_schdlr_get_end_of_activity_state</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, evnt_schdlr.o(.text.evnt_schdlr_get_end_of_activity_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = evnt_schdlr_get_end_of_activity_state
</UL>
<BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_call_end_of_activity_callback
</UL>

<P><STRONG><a name="[649]"></a>evnt_schdlr_get_master_conn_anchor_point</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, multi_role_greedy.o(.text.evnt_schdlr_get_master_conn_anchor_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = evnt_schdlr_get_master_conn_anchor_point &rArr; get_slot_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[686]"></a>evnt_schdlr_get_pckt_durn_on_air</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, evnt_utils.o(.text.evnt_schdlr_get_pckt_durn_on_air))
<BR><BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_master_conn_params
</UL>

<P><STRONG><a name="[658]"></a>evnt_schdlr_get_remaining_time_for_next_event</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, evnt_schdlr.o(.text.evnt_schdlr_get_remaining_time_for_next_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = evnt_schdlr_get_remaining_time_for_next_event &rArr; os_timer_get_earliest_time &rArr; os_timer_get_current_time &rArr; get_current_time &rArr; llhwc_slptmr_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_is_rco_clbr_running
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_dtm_curr_mode
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_get_earliest_time
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_overflow_diff
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_cmp_raw_reading
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv_uint
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_get_remaining_time_for_next_event
</UL>

<P><STRONG><a name="[5cd]"></a>evnt_schdlr_get_rx_dtp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.evnt_schdlr_get_rx_dtp))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_max_pkts_to_send
</UL>

<P><STRONG><a name="[50c]"></a>evnt_schdlr_gnrc_evnt_cmplt</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, evnt_schdlr.o(.text.evnt_schdlr_gnrc_evnt_cmplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = evnt_schdlr_gnrc_evnt_cmplt &rArr; evnt_schdlr_unrgstr_evnt &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_evnt_updtd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTS_RelWindow
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_phy_clbr_done_clbk
</UL>

<P><STRONG><a name="[631]"></a>evnt_schdlr_hndl_next_evnt</STRONG> (Thumb, 944 bytes, Stack size 96 bytes, evnt_schdlr.o(.text.evnt_schdlr_hndl_next_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_phy_clbr_state
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_evnt_notify
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_comp
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_num_of_prdc_clbr_chnls
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_overflow_diff
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_cmp_raw_reading
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_reset_sw_overflow
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_process_conditional_event
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_is_dp_slp_enabled
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_specific_irq
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_specific_irq
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv_uint
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_temperature_value
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_conn_params_updtd
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_reset
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_evnt_updtd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_config_schdling_time
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_evnt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_timer_callback
</UL>

<P><STRONG><a name="[66a]"></a>evnt_schdlr_init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, evnt_schdlr.o(.text.evnt_schdlr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = evnt_schdlr_init &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_rgstr_evnt_schdlr_timing_update_cb
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_rgstr_evnt_schdlr_cb
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_handle_init
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_multi_role_instance
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_init
</UL>

<P><STRONG><a name="[66b]"></a>evnt_schdlr_multi_role_instance</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, multi_role_greedy.o(.text.evnt_schdlr_multi_role_instance))
<BR><BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_init
</UL>

<P><STRONG><a name="[6f0]"></a>evnt_schdlr_optm_conn_param</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, evnt_utils.o(.text.evnt_schdlr_optm_conn_param))
<BR><BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_conn_param
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_check_update_prcdur
</UL>

<P><STRONG><a name="[673]"></a>evnt_schdlr_reset</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, evnt_schdlr.o(.text.evnt_schdlr_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = evnt_schdlr_reset &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_get_event
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_get_handle_events
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_reset
</UL>

<P><STRONG><a name="[6c1]"></a>evnt_schdlr_rgstr_end_of_activity_cbk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.evnt_schdlr_rgstr_end_of_activity_cbk))
<BR><BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_init
</UL>

<P><STRONG><a name="[5fb]"></a>evnt_schdlr_rgstr_error_cbk_evnt_cmplt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, evnt_schdlr.o(.text.evnt_schdlr_rgstr_error_cbk_evnt_cmplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evnt_schdlr_rgstr_error_cbk_evnt_cmplt
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_start_connection
</UL>

<P><STRONG><a name="[4d2]"></a>evnt_schdlr_rgstr_evnt</STRONG> (Thumb, 688 bytes, Stack size 40 bytes, evnt_schdlr.o(.text.evnt_schdlr_rgstr_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set_prio
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_check_if_evnt_exist
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_free_evnt
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_controller_activity
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_check_scan_on_air
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_alloc_evnt
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_enable
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_prdc_clbr_evnt
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_start_connection
</UL>

<P><STRONG><a name="[50d]"></a>evnt_schdlr_rgstr_gnrc_evnt</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, evnt_schdlr.o(.text.evnt_schdlr_rgstr_gnrc_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = evnt_schdlr_rgstr_gnrc_evnt &rArr; OUTLINED_FUNCTION_4 &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US_TO_SLP_TMR_PROTECTED
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTS_ReqWindow
</UL>

<P><STRONG><a name="[678]"></a>evnt_schdlr_rgstr_prdc_clbr_evnt</STRONG> (Thumb, 44 bytes, Stack size 88 bytes, evnt_schdlr.o(.text.evnt_schdlr_rgstr_prdc_clbr_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = evnt_schdlr_rgstr_prdc_clbr_evnt &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_evnt
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_schdr_clbr_cbks
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_prdc_clbr_init
</UL>

<P><STRONG><a name="[67a]"></a>evnt_schdlr_rgstr_wait_for_evnt_cmplt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, evnt_schdlr.o(.text.evnt_schdlr_rgstr_wait_for_evnt_cmplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evnt_schdlr_rgstr_wait_for_evnt_cmplt
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_disconnect_received
</UL>

<P><STRONG><a name="[67b]"></a>evnt_schdlr_select_tx_power_mode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, evnt_schdlr.o(.text.evnt_schdlr_select_tx_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = evnt_schdlr_select_tx_power_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_select_tx_power_table
</UL>

<P><STRONG><a name="[67c]"></a>evnt_schdlr_send_pndng_data_pkt</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, evnt_schdlr.o(.text.evnt_schdlr_send_pndng_data_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = evnt_schdlr_send_pndng_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_enqueue
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_encryption
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_process_pkt
</UL>

<P><STRONG><a name="[67d]"></a>evnt_schdlr_set_dp_slp_mode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, evnt_schdlr.o(.text.evnt_schdlr_set_dp_slp_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = evnt_schdlr_set_dp_slp_mode &rArr; llhwc_cmn_set_dp_slp_mode &rArr; llhwc_cmn_reset_slp_params &rArr; llhwc_phy_init &rArr; llhwc_phy_init_clbr &rArr; llhwc_phy_strt_vco_pll_clbr &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_dp_slp_mode
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_dp_slp_mode
</UL>

<P><STRONG><a name="[6dc]"></a>evnt_schdlr_set_end_of_activity_mask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.evnt_schdlr_set_end_of_activity_mask))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_set_end_of_activity_mask
</UL>

<P><STRONG><a name="[67f]"></a>evnt_schdlr_set_phy_clbr_params</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.evnt_schdlr_set_phy_clbr_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = evnt_schdlr_set_phy_clbr_params &rArr; llhwc_prdc_clbr_init &rArr; evnt_schdlr_rgstr_prdc_clbr_evnt &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_prdc_clbr_init
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_prdc_clbr_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_init
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_reset
</UL>

<P><STRONG><a name="[793]"></a>evnt_schdlr_set_pndg_evnts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.evnt_schdlr_set_pndg_evnts))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
</UL>

<P><STRONG><a name="[681]"></a>evnt_schdlr_set_prdc_clbr_exce_state</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, evnt_schdlr.o(.text.evnt_schdlr_set_prdc_clbr_exce_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evnt_schdlr_set_prdc_clbr_exce_state
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_timer_callback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lw_isr
</UL>

<P><STRONG><a name="[59b]"></a>evnt_schdlr_set_slave_conn_timers</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, evnt_utils.o(.text.evnt_schdlr_set_slave_conn_timers))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = evnt_schdlr_set_slave_conn_timers &rArr; evnt_schdlr_calc_conn_duration &rArr; evnt_utils_calc_conn_tx_rx_durn_per_pkt
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv_uint
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_calc_conn_duration
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_calc_wndw_widening
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sca_ppm
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
</UL>

<P><STRONG><a name="[5d4]"></a>evnt_schdlr_unrgstr_evnt</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, evnt_schdlr.o(.text.evnt_schdlr_unrgstr_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + In Cycle
<LI>Call Chain = evnt_schdlr_unrgstr_evnt &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop_free
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_handle_event
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_current_hw_steps
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_convert_to_hw_steps
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stop_scan
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_free_evnt
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_controller_activity
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_get_handle_events
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_specific_irq
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_count_rem_hw_steps
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_get_evnt_on_air_time
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_gnrc_evnt_cmplt
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_enable
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_reset
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_reset
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_prdc_clbr_deinit
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_free_handle
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
</UL>

<P><STRONG><a name="[684]"></a>evnt_schdlr_update_master_conn_params</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, multi_role_greedy.o(.text.evnt_schdlr_update_master_conn_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = evnt_schdlr_update_master_conn_params &rArr; ble_time_add_uint &rArr; ble_time_add
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_hw_setup_time
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_get_pckt_durn_on_air
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_get_payload_lngth
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_diff_us
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_hg_isr
</UL>

<P><STRONG><a name="[5a0]"></a>evnt_schdlr_update_master_conn_timers</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, evnt_utils.o(.text.evnt_schdlr_update_master_conn_timers))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = evnt_schdlr_update_master_conn_timers &rArr; evnt_utils_validate_and_update_swto_remaining_time &rArr; conn_mngr_sprvsn_timer_custom_set &rArr; os_timer_set &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_set
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_updt_evnt_slot_dur
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_validate_and_update_swto_remaining_time
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_cal_conn_eff_rx_time
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_ch_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_intrvl_to_evnt_time_stamp
</UL>

<P><STRONG><a name="[5a1]"></a>evnt_schdlr_update_slave_conn_timers</STRONG> (Thumb, 456 bytes, Stack size 48 bytes, evnt_utils.o(.text.evnt_schdlr_update_slave_conn_timers))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = evnt_schdlr_update_slave_conn_timers &rArr; evnt_utils_validate_and_update_swto_remaining_time &rArr; conn_mngr_sprvsn_timer_custom_set &rArr; os_timer_set &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_ordered_diff_us
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv_uint
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_validate_and_update_swto_remaining_time
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_cal_conn_eff_rx_time
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_calc_conn_duration
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_calc_wndw_widening
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_ch_idx
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sca_ppm
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_intrvl_to_evnt_time_stamp
</UL>

<P><STRONG><a name="[689]"></a>evnt_schdlr_updt_clbr_evnt_when_temp_rcvd</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, evnt_schdlr.o(.text.evnt_schdlr_updt_clbr_evnt_when_temp_rcvd))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = evnt_schdlr_updt_clbr_evnt_when_temp_rcvd &rArr; llhwc_slptmr_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv_uint
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_temperature_value
</UL>

<P><STRONG><a name="[5ea]"></a>evnt_schdlr_updt_conn_evnt_durn</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.evnt_schdlr_updt_conn_evnt_durn))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_process_evnt_clbk
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_data_length_update_received
</UL>

<P><STRONG><a name="[688]"></a>evnt_schdlr_updt_evnt_slot_dur</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, evnt_utils.o(.text.evnt_schdlr_updt_evnt_slot_dur))
<BR><BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_master_conn_timers
</UL>

<P><STRONG><a name="[5e7]"></a>evnt_util_is_connect_setup</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, evnt_utils.o(.text.evnt_util_is_connect_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = evnt_util_is_connect_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_process_evnt_clbk
</UL>

<P><STRONG><a name="[5cf]"></a>evnt_utils_calc_conn_tx_rx_durn_per_pkt</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, evnt_utils.o(.text.evnt_utils_calc_conn_tx_rx_durn_per_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = evnt_utils_calc_conn_tx_rx_durn_per_pkt
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_calc_conn_duration
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_max_pkts_to_send
</UL>

<P><STRONG><a name="[674]"></a>evnt_utils_check_scan_on_air</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, evnt_utils.o(.text.evnt_utils_check_scan_on_air))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = evnt_utils_check_scan_on_air &rArr; ble_time_add_uint &rArr; ble_time_add
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stop_scan
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_comp
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_specific_irq
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_specific_irq
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_evnt
</UL>

<P><STRONG><a name="[63f]"></a>evnt_utils_does_ble_evnt_require_ccm</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, evnt_utils.o(.text.evnt_utils_does_ble_evnt_require_ccm))
<BR><BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[6ef]"></a>evnt_utils_get_conn_instant_offset</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, evnt_utils.o(.text.evnt_utils_get_conn_instant_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evnt_utils_get_conn_instant_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_check_update_prcdur
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_recalculate_instant
</UL>

<P><STRONG><a name="[7bb]"></a>evnt_utils_is_evnt_starved</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, evnt_utils.o(.text.evnt_utils_is_evnt_starved))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evnt_utils_is_evnt_starved
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_event
</UL>

<P><STRONG><a name="[662]"></a>evnt_utils_reset_sw_overflow</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, evnt_utils.o(.text.evnt_utils_reset_sw_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = evnt_utils_reset_sw_overflow
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
</UL>

<P><STRONG><a name="[5fd]"></a>evnt_utils_update_sleep_clock_accuracy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, evnt_utils.o(.text.evnt_utils_update_sleep_clock_accuracy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evnt_utils_update_sleep_clock_accuracy &rArr; conn_mngr_update_sca_for_running_conn
</UL>
<BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_set_slp_clk_accuracy
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_update_sca_for_running_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_sleep_clock_accuracy
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_update_local_clk_acc
</UL>

<P><STRONG><a name="[687]"></a>evnt_utils_validate_and_update_swto_remaining_time</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, evnt_utils.o(.text.evnt_utils_validate_and_update_swto_remaining_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = evnt_utils_validate_and_update_swto_remaining_time &rArr; conn_mngr_sprvsn_timer_custom_set &rArr; os_timer_set &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_set
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_comp
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_sprvsn_timer_custom_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_master_conn_timers
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_slave_conn_timers
</UL>

<P><STRONG><a name="[16d]"></a>exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text.exit))
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12c]"></a>extend_gnrc_evnt_durn_chk</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, multi_role_greedy.o(.text.extend_gnrc_evnt_durn_chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = extend_gnrc_evnt_durn_chk &rArr; recheck_conflicting &rArr; OUTLINED_FUNCTION_6 &rArr; add_intrvl_to_evnt_time_stamp &rArr; evnt_schdlr_update_slave_conn_timers &rArr; evnt_utils_validate_and_update_swto_remaining_time &rArr; conn_mngr_sprvsn_timer_custom_set &rArr; os_timer_set &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recheck_conflicting
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_conflict_queue
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_priority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[475]"></a>free_buff_hdr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pkt_mem_if.o(.text.free_buff_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = free_buff_hdr &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_send_pkt
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_free_evnt
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_conn_evnt_done
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_done
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_adv_done
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_mngr_termination_recevied_clbk
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_process_pkt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_cbk
</UL>

<P><STRONG><a name="[68d]"></a>gen_rnd_num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp.o(.text.gen_rnd_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gen_rnd_num &rArr; ll_sys_get_rng &rArr; LINKLAYER_PLAT_GetRNG &rArr; HW_RNG_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_get_rng
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_gen_rnd_num
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_rmv_rand_add
</UL>

<P><STRONG><a name="[5d7]"></a>get_addr_rsl_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, prvcy_mngr.o(.text.get_addr_rsl_enable))
<BR><BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
</UL>

<P><STRONG><a name="[68f]"></a>get_current_time</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, hw_ll_timer.o(.text.get_current_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = get_current_time &rArr; llhwc_slptmr_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_get_current_time
</UL>

<P><STRONG><a name="[7a0]"></a>get_nxt_data_packet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pkt_mem_if.o(.text.get_nxt_data_packet))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_cbk
</UL>

<P><STRONG><a name="[642]"></a>get_pkt_data</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, evnt_utils.o(.text.get_pkt_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_pkt_data
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[789]"></a>get_pool_index</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, mem_manager.o(.text.get_pool_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_pool_index
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pool_free
</UL>

<P><STRONG><a name="[75f]"></a>get_pwr_domain</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.get_pwr_domain))
<BR><BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
</UL>

<P><STRONG><a name="[5f6]"></a>get_sca_ppm</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, evnt_utils.o(.text.get_sca_ppm))
<BR><BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_slave_conn_timers
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_set_slave_conn_timers
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_sprvsn_timer_custom_set
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_sprvsn_timer_set
</UL>

<P><STRONG><a name="[0]"></a>hci_default_ll_queue_full</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hci.o(.text.hci_default_ll_queue_full))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.data.hci_ll_queue_full_cbk)
</UL>
<P><STRONG><a name="[109]"></a>hci_end_of_activity_evnt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hci.o(.text.hci_end_of_activity_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = hci_end_of_activity_evnt &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[694]"></a>hci_event_get_queue_id</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, hci.o(.text.hci_event_get_queue_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hci_event_get_queue_id
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_post_event_cbk
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_queue_send_pckt
</UL>

<P><STRONG><a name="[6e1]"></a>hci_get_dis_tbl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hci.o(.text.hci_get_dis_tbl))
<BR><BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_ble_cntrl_init
</UL>

<P><STRONG><a name="[6bb]"></a>hci_init_events_queues</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hci.o(.text.hci_init_events_queues))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hci_init_events_queues
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_init
</UL>

<P><STRONG><a name="[239]"></a>hci_le_set_default_phy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bleplat.o(.text.hci_le_set_default_phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = hci_le_set_default_phy &rArr; BleStackCB_Process &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SET_DEFAULT_PHY
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[6db]"></a>hci_ll_set_custom_event_mask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hci.o(.text.hci_ll_set_custom_event_mask))
<BR><BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_set_custom_event_mask
</UL>

<P><STRONG><a name="[695]"></a>hci_ll_set_event_mask</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hci.o(.text.hci_ll_set_event_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hci_ll_set_event_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_set_event_mask
</UL>

<P><STRONG><a name="[697]"></a>hci_ll_set_event_mask_page2</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hci.o(.text.hci_ll_set_event_mask_page2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_ll_set_event_mask_page2
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_set_event_mask_page2
</UL>

<P><STRONG><a name="[69a]"></a>hci_ll_set_le_event_mask</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hci.o(.text.hci_ll_set_le_event_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_ll_set_le_event_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_set_le_event_mask
</UL>

<P><STRONG><a name="[c5]"></a>hci_post_event_cbk</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hci.o(.text.hci_post_event_cbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hci_post_event_cbk &rArr; emngr_post_event_first &rArr; queue_insert_frst &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_set_event_handle_busy
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event_first
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_get_queue_id
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.text.hci_init_events_queues)
</UL>
<P><STRONG><a name="[c7]"></a>hci_queue_send_pckt</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, hci.o(.text.hci_queue_send_pckt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hci_queue_send_pckt &rArr; emngr_post_event &rArr; queue_enqueue &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_free_ll_pkt_hndlr
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_get_queue_id
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_get_handle_events
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_intf.o(.text.ll_intf_init)
</UL>
<P><STRONG><a name="[23e]"></a>hci_read_local_version_information</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bleplat.o(.text.hci_read_local_version_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = hci_read_local_version_information &rArr; BleStackCB_Process &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_READ_LOCAL_VERSION_INFORMATION
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BLE_Init
</UL>

<P><STRONG><a name="[6d7]"></a>hci_rgstr_hst_cbk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hci.o(.text.hci_rgstr_hst_cbk))
<BR><BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_rgstr_hst_cbk
</UL>

<P><STRONG><a name="[6d9]"></a>hci_rgstr_hst_cbk_ll_queue_full</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hci.o(.text.hci_rgstr_hst_cbk_ll_queue_full))
<BR><BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_rgstr_hst_cbk_ll_queue_full
</UL>

<P><STRONG><a name="[69b]"></a>hw_ll_timer_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hw_ll_timer.o(.text.hw_ll_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hw_ll_timer_init &rArr; llhwc_slptmr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
</UL>

<P><STRONG><a name="[69d]"></a>hw_ll_timer_start</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hw_ll_timer.o(.text.hw_ll_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerHandler
</UL>

<P><STRONG><a name="[69e]"></a>hw_ll_timer_stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hw_ll_timer.o(.text.hw_ll_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hw_ll_timer_stop &rArr; llhwc_slptmr_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
</UL>

<P><STRONG><a name="[73f]"></a>intr_hndlr_reg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_wrapper.o(.text.intr_hndlr_reg))
<BR><BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_init
</UL>

<P><STRONG><a name="[16e]"></a>is_boot_from_standby</STRONG> (Thumb, 102 bytes, Stack size 4 bytes, stm32_lpm_if.o(.text.is_boot_from_standby))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = is_boot_from_standby
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[6a0]"></a>ll_cmn_clr_isr</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.ll_cmn_clr_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ll_cmn_clr_isr &rArr; llhwc_phy_clbr_seq_done_isr &rArr; llhwc_phy_clbr_cmpltd_release_grant &rArr; llhwc_phy_run_pre_post_phy_clbr &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_is_phy_driver_busy
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_phy_clbr_state
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_clbr_seq_done_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stp_dtm
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_ble_wait_for_evnt_on_air
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_isr
</UL>

<P><STRONG><a name="[d0]"></a>ll_cmn_hg_isr</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.ll_cmn_hg_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ll_cmn_hg_isr &rArr; os_timer_is_any_near_sw_timer_hg_prio &rArr; os_timer_get_current_time &rArr; get_current_time &rArr; llhwc_slptmr_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_switch_to_lw_isr
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_is_any_near_sw_timer_hg_prio
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_is_phy_clbr_done_pnding
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_wrapper_is_rtos_used
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_process_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llhwc_cmn.o(.text.llhwc_cmn_init)
</UL>
<P><STRONG><a name="[d1]"></a>ll_cmn_lw_isr</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.ll_cmn_lw_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ll_cmn_lw_isr &rArr; llhwc_cmn_rco_isr &rArr; llhwc_cmn_update_rco_timer &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_is_phy_clbr_done_pnding
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_exec_clbr_done_clbk
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_rco_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llhwc_cmn.o(.text.llhwc_cmn_init)
</UL>
<P><STRONG><a name="[6a9]"></a>ll_hci_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hci.o(.text.ll_hci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ll_hci_init &rArr; ble_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_init
</UL>

<P><STRONG><a name="[410]"></a>ll_intf_acl_data_from_host_to_cntrlr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ll_intf.o(.text.ll_intf_acl_data_from_host_to_cntrlr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ll_intf_acl_data_from_host_to_cntrlr &rArr; conn_mngr_send_pkt &rArr; evnt_schdlr_add_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_send_pkt
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_free_ll_pkt_hndlr
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_SendAclDataToLL
</UL>

<P><STRONG><a name="[3ff]"></a>ll_intf_alloc_ll_pkt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_intf.o(.text.ll_intf_alloc_ll_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ll_intf_alloc_ll_pkt &rArr; os_shrd_mem_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_shrd_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_AllocateACLDataInLL
</UL>

<P><STRONG><a name="[2aa]"></a>ll_intf_chng_evnt_hndlr_state</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ll_intf.o(.text.ll_intf_chng_evnt_hndlr_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ll_intf_chng_evnt_hndlr_state &rArr; emngr_set_event_handle_busy &rArr; os_semaphore_release
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_set_event_handle_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ResumeFlowProcessCallback
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_Process
</UL>

<P><STRONG><a name="[401]"></a>ll_intf_clear_event</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ll_intf.o(.text.ll_intf_clear_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ll_intf_clear_event &rArr; emngr_remove_conditional_event &rArr; OUTLINED_FUNCTION_1 &rArr; queue_delete &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_remove_conditional_event
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_DisconnectionComplete
</UL>

<P><STRONG><a name="[6aa]"></a>ll_intf_cmn_config_ll_ctx_params</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_intf_cmn.o(.text.ll_intf_cmn_config_ll_ctx_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ll_intf_cmn_config_ll_ctx_params &rArr; llhwc_cmn_sys_configure_ll_ctx
</UL>
<BR>[Calls]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_sys_configure_ll_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_config_params
</UL>

<P><STRONG><a name="[42c]"></a>ll_intf_cmn_get_slptmr_value</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp.o(.text.ll_intf_cmn_get_slptmr_value))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_WaitHclkRdy
</UL>

<P><STRONG><a name="[6ac]"></a>ll_intf_cmn_le_select_slp_clk_src</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_intf_cmn.o(.text.ll_intf_cmn_le_select_slp_clk_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ll_intf_cmn_le_select_slp_clk_src &rArr; llhwc_cmn_le_select_slp_clk_src &rArr; llhwc_cmn_reset_rco_clbr &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_le_select_slp_clk_src
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_reset
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_config_params
</UL>

<P><STRONG><a name="[6ae]"></a>ll_intf_cmn_le_set_dp_slp_mode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_intf_cmn.o(.text.ll_intf_cmn_le_set_dp_slp_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ll_intf_cmn_le_set_dp_slp_mode &rArr; ll_intf_le_set_dp_slp_mode &rArr; evnt_schdlr_set_dp_slp_mode &rArr; llhwc_cmn_set_dp_slp_mode &rArr; llhwc_cmn_reset_slp_params &rArr; llhwc_phy_init &rArr; llhwc_phy_init_clbr &rArr; llhwc_phy_strt_vco_pll_clbr &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_dp_slp_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_dp_slp_exit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_dp_slp_wakeup_evt_clbk
</UL>

<P><STRONG><a name="[6b0]"></a>ll_intf_cmn_select_tx_power_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_intf_cmn.o(.text.ll_intf_cmn_select_tx_power_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ll_intf_cmn_select_tx_power_table &rArr; ll_intf_select_tx_power_table &rArr; ll_tx_pwr_if_select_tx_power_mode &rArr; llhwc_phy_patch_tx_power_mode_phy_reg &rArr; llhwc_phy_seq_ram_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_select_tx_power_table
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_config_params
</UL>

<P><STRONG><a name="[6b2]"></a>ll_intf_cmn_set_temperature_sensor_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_intf_cmn.o(.text.ll_intf_cmn_set_temperature_sensor_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ll_intf_cmn_set_temperature_sensor_state &rArr; llhwc_cmn_set_temperature_sensor_state &rArr; llhwc_cmn_request_temperature &rArr; bsp_request_temperature &rArr; ll_sys_request_temperature &rArr; LINKLAYER_PLAT_RequestTemperature &rArr; ll_sys_bg_temperature_measurement &rArr; TEMPMEAS_RequestTemperatureMeasurement &rArr; ll_intf_cmn_set_temperature_value &rArr; llhwc_cmn_set_temperature_value &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_temperature_sensor_state
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_config_params
</UL>

<P><STRONG><a name="[579]"></a>ll_intf_cmn_set_temperature_value</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ll_intf_cmn.o(.text.ll_intf_cmn_set_temperature_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ll_intf_cmn_set_temperature_value &rArr; llhwc_cmn_set_temperature_value &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_temperature_value
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPMEAS_RequestTemperatureMeasurement
</UL>

<P><STRONG><a name="[6b5]"></a>ll_intf_config_schdling_time</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ll_intf.o(.text.ll_intf_config_schdling_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = ll_intf_config_schdling_time &rArr; evnt_schdlr_config_schdling_time &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_config_schdling_time
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_config_BLE_schldr_timings
</UL>

<P><STRONG><a name="[411]"></a>ll_intf_ctrl_rx_dtp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ll_intf.o(.text.ll_intf_ctrl_rx_dtp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_intf_ctrl_rx_dtp
</UL>
<BR>[Calls]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_ctrl_rx_dtp
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_SetRxAclControl
</UL>

<P><STRONG><a name="[413]"></a>ll_intf_free_ll_pkt_hndlr</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ll_intf.o(.text.ll_intf_free_ll_pkt_hndlr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ll_intf_free_ll_pkt_hndlr &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_is_ptr_in_ble_mem
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_remove_conditional_event
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_acl_data_from_host_to_cntrlr
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_queue_send_pckt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_UpperLayerCallback
</UL>

<P><STRONG><a name="[1f3]"></a>ll_intf_get_link_status</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ll_intf.o(.text.ll_intf_get_link_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ll_intf_get_link_status &rArr; conn_mngr_get_link_status
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_get_link_status
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_get_link_status
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_dtm_curr_mode
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_HAL_SET_TX_POWER_LEVEL
</UL>

<P><STRONG><a name="[6b9]"></a>ll_intf_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ll_intf.o(.text.ll_intf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = ll_intf_init &rArr; evnt_schdlr_set_phy_clbr_params &rArr; llhwc_prdc_clbr_init &rArr; evnt_schdlr_rgstr_prdc_clbr_evnt &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_init
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_reset
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_reset
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_reset
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mem_shared_reset
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mem_init
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_shared_init
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init_events_queues
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hci_init
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_end_of_activity_cbk
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_set_phy_clbr_params
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_init
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_ble_cntrl_init
</UL>

<P><STRONG><a name="[3ae]"></a>ll_intf_le_add_device_white_list</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ll_intf.o(.text.ll_intf_le_add_device_white_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ll_intf_le_add_device_white_list &rArr; non_conn_mngr_add_rmv_clr_device_white_list &rArr; llhwc_lst_search &rArr; llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_add_rmv_clr_device_white_list
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ADD_DEVICE_TO_FILTER_ACCEPT_LIST
</UL>

<P><STRONG><a name="[3b1]"></a>ll_intf_le_clear_white_list</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ll_intf.o(.text.ll_intf_le_clear_white_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ll_intf_le_clear_white_list &rArr; non_conn_mngr_add_rmv_clr_device_white_list &rArr; llhwc_lst_search &rArr; llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_add_rmv_clr_device_white_list
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_CLEAR_FILTER_ACCEPT_LIST
</UL>

<P><STRONG><a name="[412]"></a>ll_intf_le_get_remaining_time_for_next_event</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_intf.o(.text.ll_intf_le_get_remaining_time_for_next_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ll_intf_le_get_remaining_time_for_next_event &rArr; evnt_schdlr_get_remaining_time_for_next_event &rArr; os_timer_get_earliest_time &rArr; os_timer_get_current_time &rArr; get_current_time &rArr; llhwc_slptmr_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_get_remaining_time_for_next_event
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_UpperLayerCallback
</UL>

<P><STRONG><a name="[3c5]"></a>ll_intf_le_read_adv_channel_tx_power</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ll_intf.o(.text.ll_intf_le_read_adv_channel_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ll_intf_le_read_adv_channel_tx_power &rArr; db_get_advertising_channel_tx_power
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_advertising_channel_tx_power
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_READ_ADVERTISING_PHYSICAL_CHANNEL_TX_POWER
</UL>

<P><STRONG><a name="[3cb]"></a>ll_intf_le_set_addr_rsln_enble</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_intf.o(.text.ll_intf_le_set_addr_rsln_enble))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ll_intf_le_set_addr_rsln_enble &rArr; prvcy_mngr_set_addr_rsln_enble &rArr; non_conn_mngr_event_status_check
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_set_addr_rsln_enble
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SET_ADDRESS_RESOLUTION_ENABLE
</UL>

<P><STRONG><a name="[3cc]"></a>ll_intf_le_set_adv_data</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ll_intf.o(.text.ll_intf_le_set_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ll_intf_le_set_adv_data &rArr; non_conn_mngr_set_adv_data &rArr; prvcy_mngr_RPA_Regeneration &rArr; prvcy_mngr_addr_gen &rArr; llhwc_128_encrypt &rArr; llhwc_cmn_crypto &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_set_adv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SET_ADVERTISING_DATA
</UL>

<P><STRONG><a name="[3cd]"></a>ll_intf_le_set_adv_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ll_intf.o(.text.ll_intf_le_set_adv_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = ll_intf_le_set_adv_enable &rArr; non_conn_mngr_adv_enable &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SET_ADVERTISING_ENABLE
</UL>

<P><STRONG><a name="[3ce]"></a>ll_intf_le_set_adv_params</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, ll_intf.o(.text.ll_intf_le_set_adv_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ll_intf_le_set_adv_params &rArr; non_conn_mngr_set_adv_params &rArr; non_conn_mngr_adv_manage_connection_ctx_allocation &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_set_adv_params
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SET_ADVERTISING_PARAMETERS
</UL>

<P><STRONG><a name="[3d0]"></a>ll_intf_le_set_default_phy_cmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ll_intf.o(.text.ll_intf_le_set_default_phy_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_intf_le_set_default_phy_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_le_set_default_phy_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SET_DEFAULT_PHY
</UL>

<P><STRONG><a name="[6af]"></a>ll_intf_le_set_dp_slp_mode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ll_intf.o(.text.ll_intf_le_set_dp_slp_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ll_intf_le_set_dp_slp_mode &rArr; evnt_schdlr_set_dp_slp_mode &rArr; llhwc_cmn_set_dp_slp_mode &rArr; llhwc_cmn_reset_slp_params &rArr; llhwc_phy_init &rArr; llhwc_phy_init_clbr &rArr; llhwc_phy_strt_vco_pll_clbr &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_set_dp_slp_mode
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_cmn_le_set_dp_slp_mode
</UL>

<P><STRONG><a name="[3d1]"></a>ll_intf_le_set_random_addr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ll_intf.o(.text.ll_intf_le_set_random_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ll_intf_le_set_random_addr &rArr; non_conn_mngr_set_random_address &rArr; db_set_random_address &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_set_random_address
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SET_RANDOM_ADDRESS
</UL>

<P><STRONG><a name="[3d2]"></a>ll_intf_le_set_scan_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ll_intf.o(.text.ll_intf_le_set_scan_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = ll_intf_le_set_scan_enable &rArr; non_conn_mngr_scan_enable &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SET_SCAN_ENABLE
</UL>

<P><STRONG><a name="[6ca]"></a>ll_intf_le_set_sleep_clock_accuracy</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ll_intf.o(.text.ll_intf_le_set_sleep_clock_accuracy))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ll_intf_le_set_sleep_clock_accuracy &rArr; conn_mngr_trigger_sleep_clock_accuracy_update &rArr; llcp_clock_accuracy_req &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_trigger_sleep_clock_accuracy_update
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_update_sleep_clock_accuracy
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_get_run_conn_no
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_slp_clk_accuracy
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_reset
</UL>

<P><STRONG><a name="[3ba]"></a>ll_intf_le_strt_encrpt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ll_intf.o(.text.ll_intf_le_strt_encrpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ll_intf_le_strt_encrpt &rArr; llcp_encryption_req &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_encryption_req
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ENABLE_ENCRYPTION
</UL>

<P><STRONG><a name="[1f2]"></a>ll_intf_le_write_tx_pwr</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ll_intf.o(.text.ll_intf_le_write_tx_pwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ll_intf_le_write_tx_pwr &rArr; ll_tx_pwr_if_get_tx_pwr_table_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_set_tx_power_value
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_get_tx_pwr_table_offset
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_get_min_max_supprtd_tx_power_levels
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_phy_conf_tx_pwr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_HAL_SET_TX_POWER_LEVEL
</UL>

<P><STRONG><a name="[3c2]"></a>ll_intf_rcvd_long_trm_key</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ll_intf.o(.text.ll_intf_rcvd_long_trm_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ll_intf_rcvd_long_trm_key &rArr; llcp_start_encryption &rArr; llcp_disconnect &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_encryption
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LONG_TERM_KEY_REQUEST_NEGATIVE_REPLY
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LONG_TERM_KEY_REQUEST_REPLY
</UL>

<P><STRONG><a name="[3d4]"></a>ll_intf_read_local_ver_info</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ll_intf.o(.text.ll_intf_read_local_ver_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ll_intf_read_local_ver_info &rArr; db_get_local_vrsn_info
</UL>
<BR>[Calls]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_local_vrsn_info
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_READ_LOCAL_VERSION_INFORMATION
</UL>

<P><STRONG><a name="[40e]"></a>ll_intf_reset</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ll_intf.o(.text.ll_intf_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ll_intf_reset &rArr; evnt_schdlr_set_phy_clbr_params &rArr; llhwc_prdc_clbr_init &rArr; evnt_schdlr_rgstr_prdc_clbr_evnt &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stop_augmented_mode
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_reset
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_mngr_reset
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stp_dtm
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_is_dtm_enabled
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_reset
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_reset
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_reset
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_reset
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_mem_shared_reset
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_free_ll_pkt_hndlr
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_dp_slp_mode
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_set_phy_clbr_params
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_get_event
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_reset
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_controller_activity
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_get_handle_events
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_is_in_augmented_mode
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_is_dp_slp_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_Reset
</UL>

<P><STRONG><a name="[6d6]"></a>ll_intf_rgstr_hst_cbk</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ll_intf.o(.text.ll_intf_rgstr_hst_cbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_intf_rgstr_hst_cbk
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rgstr_hst_cbk
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_ble_cntrl_init
</UL>

<P><STRONG><a name="[6d8]"></a>ll_intf_rgstr_hst_cbk_ll_queue_full</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ll_intf.o(.text.ll_intf_rgstr_hst_cbk_ll_queue_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_intf_rgstr_hst_cbk_ll_queue_full
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rgstr_hst_cbk_ll_queue_full
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_ble_cntrl_init
</UL>

<P><STRONG><a name="[6b1]"></a>ll_intf_select_tx_power_table</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ll_intf.o(.text.ll_intf_select_tx_power_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ll_intf_select_tx_power_table &rArr; ll_tx_pwr_if_select_tx_power_mode &rArr; llhwc_phy_patch_tx_power_mode_phy_reg &rArr; llhwc_phy_seq_ram_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_select_tx_power_mode
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_select_tx_power_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_cmn_select_tx_power_table
</UL>

<P><STRONG><a name="[1f5]"></a>ll_intf_set_conn_tx_power_level</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ll_intf.o(.text.ll_intf_set_conn_tx_power_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ll_intf_set_conn_tx_power_level &rArr; conn_mngr_set_conn_tx_power_level &rArr; ll_tx_pwr_if_get_tx_pwr_table_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_set_conn_tx_power_level
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_phy_conf_tx_pwr
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_HAL_SET_TX_POWER_LEVEL
</UL>

<P><STRONG><a name="[40d]"></a>ll_intf_set_custom_event_mask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_intf.o(.text.ll_intf_set_custom_event_mask))
<BR><BR>[Calls]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_ll_set_custom_event_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_Reset
</UL>

<P><STRONG><a name="[1f0]"></a>ll_intf_set_end_of_activity_mask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ll_intf.o(.text.ll_intf_set_end_of_activity_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_intf_set_end_of_activity_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_set_end_of_activity_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_HAL_SET_RADIO_ACTIVITY_MASK
</UL>

<P><STRONG><a name="[40b]"></a>ll_intf_set_event_mask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_intf.o(.text.ll_intf_set_event_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ll_intf_set_event_mask &rArr; hci_ll_set_event_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_ll_set_event_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_Reset
</UL>

<P><STRONG><a name="[40c]"></a>ll_intf_set_event_mask_page2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_intf.o(.text.ll_intf_set_event_mask_page2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_intf_set_event_mask_page2 &rArr; hci_ll_set_event_mask_page2
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_ll_set_event_mask_page2
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_Reset
</UL>

<P><STRONG><a name="[403]"></a>ll_intf_set_le_event_mask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_intf.o(.text.ll_intf_set_le_event_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_intf_set_le_event_mask &rArr; hci_ll_set_le_event_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_ll_set_le_event_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_Reset
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LE_Event_Unmask
</UL>

<P><STRONG><a name="[203]"></a>ll_intf_write_bd_addr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_intf.o(.text.ll_intf_write_bd_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ll_intf_write_bd_addr &rArr; db_set_bd_address &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_set_bd_address
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_WRITE_CONFIG_DATA
</UL>

<P><STRONG><a name="[7bf]"></a>ll_mem_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mem_cfg.o(.text.ll_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ll_mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_shared_init
</UL>

<P><STRONG><a name="[5b1]"></a>ll_sys_assert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_sys_intf.o(.text.ll_sys_assert))
<BR><BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_ble_cntrl_init
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_set_phy_clbr_state
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rco_clbr_not
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_evnt_not
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>

<P><STRONG><a name="[c8]"></a>ll_sys_bg_process</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ll_sys_intf.o(.text.ll_sys_bg_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = ll_sys_bg_process &rArr; HostStack_Process &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HostStack_Process
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_schedule_bg_process
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_handle_all_events
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_can_mcu_sleep
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_dp_slp_exit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_sys_if.o(.text.ll_sys_bg_process_init)
</UL>
<P><STRONG><a name="[6e0]"></a>ll_sys_bg_process_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ll_sys_if.o(.text.ll_sys_bg_process_init))
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_ble_cntrl_init
</UL>

<P><STRONG><a name="[423]"></a>ll_sys_bg_temperature_measurement</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ll_sys_if.o(.text.ll_sys_bg_temperature_measurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ll_sys_bg_temperature_measurement &rArr; TEMPMEAS_RequestTemperatureMeasurement &rArr; ll_intf_cmn_set_temperature_value &rArr; llhwc_cmn_set_temperature_value &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPMEAS_RequestTemperatureMeasurement
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_RequestTemperature
</UL>

<P><STRONG><a name="[404]"></a>ll_sys_ble_cntrl_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ll_sys_startup.o(.text.ll_sys_ble_cntrl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = ll_sys_ble_cntrl_init &rArr; ll_intf_init &rArr; evnt_schdlr_set_phy_clbr_params &rArr; llhwc_prdc_clbr_init &rArr; evnt_schdlr_rgstr_prdc_clbr_evnt &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_config_params
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_bg_process_init
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_rgstr_hst_cbk_ll_queue_full
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_rgstr_hst_cbk
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_init
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_get_dis_tbl
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_assert
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_dp_slp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LL_Init
</UL>

<P><STRONG><a name="[6e4]"></a>ll_sys_config_BLE_schldr_timings</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, bsp.o(.text.ll_sys_config_BLE_schldr_timings))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = ll_sys_config_BLE_schldr_timings &rArr; ll_intf_config_schdling_time &rArr; evnt_schdlr_config_schdling_time &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_config_schdling_time
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_reset
</UL>

<P><STRONG><a name="[6e3]"></a>ll_sys_config_params</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ll_sys_if.o(.text.ll_sys_config_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ll_sys_config_params &rArr; ll_intf_cmn_le_select_slp_clk_src &rArr; llhwc_cmn_le_select_slp_clk_src &rArr; llhwc_cmn_reset_rco_clbr &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_cmn_select_tx_power_table
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_cmn_set_temperature_sensor_state
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_cmn_le_select_slp_clk_src
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_cmn_config_ll_ctx_params
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_ble_cntrl_init
</UL>

<P><STRONG><a name="[5b8]"></a>ll_sys_delay_us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_sys_intf.o(.text.ll_sys_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_sys_delay_us &rArr; LINKLAYER_PLAT_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_us
</UL>

<P><STRONG><a name="[60d]"></a>ll_sys_disable_specific_irq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_sys_cs.o(.text.ll_sys_disable_specific_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ll_sys_disable_specific_irq &rArr; LINKLAYER_PLAT_DisableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_DisableSpecificIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_specific_irq
</UL>

<P><STRONG><a name="[6de]"></a>ll_sys_dp_slp_exit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ll_sys_dp_slp.o(.text.ll_sys_dp_slp_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ll_sys_dp_slp_exit &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_DisableRadioIT
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_EnableRadioIT
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_tmr_state
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_cmn_le_set_dp_slp_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_bg_process
</UL>

<P><STRONG><a name="[6e2]"></a>ll_sys_dp_slp_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ll_sys_dp_slp.o(.text.ll_sys_dp_slp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ll_sys_dp_slp_init &rArr; os_timer_create &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set_prio
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_ble_cntrl_init
</UL>

<P><STRONG><a name="[cb]"></a>ll_sys_dp_slp_wakeup_evt_clbk</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ll_sys_dp_slp.o(.text.ll_sys_dp_slp_wakeup_evt_clbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ll_sys_dp_slp_wakeup_evt_clbk &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_DisableRadioIT
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_EnableRadioIT
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_tmr_state
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_cmn_le_set_dp_slp_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_sys_dp_slp.o(.text.ll_sys_dp_slp_init)
</UL>
<P><STRONG><a name="[625]"></a>ll_sys_enable_specific_irq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_sys_cs.o(.text.ll_sys_enable_specific_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ll_sys_enable_specific_irq &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_specific_irq
</UL>

<P><STRONG><a name="[1f4]"></a>ll_sys_get_concurrent_state_machines_num</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_sys_intf.o(.text.ll_sys_get_concurrent_state_machines_num))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_HAL_SET_TX_POWER_LEVEL
</UL>

<P><STRONG><a name="[68e]"></a>ll_sys_get_rng</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_sys_intf.o(.text.ll_sys_get_rng))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ll_sys_get_rng &rArr; LINKLAYER_PLAT_GetRNG &rArr; HW_RNG_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_GetRNG
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_rnd_num
</UL>

<P><STRONG><a name="[5be]"></a>ll_sys_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_sys_intf.o(.text.ll_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ll_sys_init &rArr; LINKLAYER_PLAT_ClockInit
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[5c7]"></a>ll_sys_phy_start_clbr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_sys_cs.o(.text.ll_sys_phy_start_clbr))
<BR><BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_PhyStartClbr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_set_phy_clbr_state
</UL>

<P><STRONG><a name="[5c8]"></a>ll_sys_phy_stop_clbr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_sys_cs.o(.text.ll_sys_phy_stop_clbr))
<BR><BR>[Calls]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_PhyStopClbr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_set_phy_clbr_state
</UL>

<P><STRONG><a name="[5b3]"></a>ll_sys_radio_ack_ctrl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_sys_intf.o(.text.ll_sys_radio_ack_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_AclkCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_control_aclk
</UL>

<P><STRONG><a name="[5ba]"></a>ll_sys_radio_evt_not</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_sys_intf.o(.text.ll_sys_radio_evt_not))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ll_sys_radio_evt_not &rArr; LINKLAYER_PLAT_StopRadioEvt &rArr; scm_notifyradiostate &rArr; scm_setsystemclock &rArr; SwitchHse16toHse32 &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_StopRadioEvt
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_StartRadioEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_evnt_not
</UL>

<P><STRONG><a name="[5ca]"></a>ll_sys_radio_sw_low_intr_trigger</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_sys_intf.o(.text.ll_sys_radio_sw_low_intr_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ll_sys_radio_sw_low_intr_trigger &rArr; LINKLAYER_PLAT_TriggerSwLowIT &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_TriggerSwLowIT
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_switch_to_lw_isr
</UL>

<P><STRONG><a name="[5cc]"></a>ll_sys_radio_wait_for_busclkrdy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_sys_intf.o(.text.ll_sys_radio_wait_for_busclkrdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ll_sys_radio_wait_for_busclkrdy &rArr; LINKLAYER_PLAT_WaitHclkRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_WaitHclkRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wait_for_busclkrdy
</UL>

<P><STRONG><a name="[5c3]"></a>ll_sys_rco_clbr_not</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_sys_intf.o(.text.ll_sys_rco_clbr_not))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ll_sys_rco_clbr_not &rArr; LINKLAYER_PLAT_RCOStartClbr &rArr; scm_setsystemclock &rArr; SwitchHse16toHse32 &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_RCOStopClbr
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_RCOStartClbr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rco_clbr_not
</UL>

<P><STRONG><a name="[5c5]"></a>ll_sys_request_temperature</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_sys_intf.o(.text.ll_sys_request_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ll_sys_request_temperature &rArr; LINKLAYER_PLAT_RequestTemperature &rArr; ll_sys_bg_temperature_measurement &rArr; TEMPMEAS_RequestTemperatureMeasurement &rArr; ll_intf_cmn_set_temperature_value &rArr; llhwc_cmn_set_temperature_value &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_RequestTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_request_temperature
</UL>

<P><STRONG><a name="[40f]"></a>ll_sys_reset</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ll_sys_if.o(.text.ll_sys_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = ll_sys_reset &rArr; ll_sys_config_BLE_schldr_timings &rArr; ll_intf_config_schdling_time &rArr; evnt_schdlr_config_schdling_time &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_config_BLE_schldr_timings
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_sleep_clock_accuracy
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_cmn_le_select_slp_clk_src
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_Reset
</UL>

<P><STRONG><a name="[6df]"></a>ll_sys_schedule_bg_process</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_sys_if.o(.text.ll_sys_schedule_bg_process))
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_bg_process
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_release
</UL>

<P><STRONG><a name="[6e9]"></a>ll_sys_schedule_bg_process_isr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_sys_if.o(.text.ll_sys_schedule_bg_process_isr))
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_release_isr
</UL>

<P><STRONG><a name="[5bc]"></a>ll_sys_schldr_timing_update_not</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_sys_intf.o(.text.ll_sys_schldr_timing_update_not))
<BR><BR>[Calls]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_SCHLDR_TIMING_UPDATE_NOT
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_evnt_schldr_timing_update_not
</UL>

<P><STRONG><a name="[5c0]"></a>ll_sys_setup_radio_intr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_sys_intf.o(.text.ll_sys_setup_radio_intr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ll_sys_setup_radio_intr &rArr; LINKLAYER_PLAT_SetupRadioIT &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_SetupRadioIT
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_intr_set_pri
</UL>

<P><STRONG><a name="[5c1]"></a>ll_sys_setup_radio_sw_low_intr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_sys_intf.o(.text.ll_sys_setup_radio_sw_low_intr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ll_sys_setup_radio_sw_low_intr &rArr; LINKLAYER_PLAT_SetupSwLowIT &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_SetupSwLowIT
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_intr_set_pri
</UL>

<P><STRONG><a name="[735]"></a>ll_tx_pwr_if_epa_enable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ll_tx_pwr_if.o(.text.ll_tx_pwr_if_epa_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ll_tx_pwr_if_epa_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_evnt_notify
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_strt_stp
</UL>

<P><STRONG><a name="[6ce]"></a>ll_tx_pwr_if_get_min_max_supprtd_tx_power_levels</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ll_tx_pwr_if.o(.text.ll_tx_pwr_if_get_min_max_supprtd_tx_power_levels))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ll_tx_pwr_if_get_min_max_supprtd_tx_power_levels
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_write_tx_pwr
</UL>

<P><STRONG><a name="[5f1]"></a>ll_tx_pwr_if_get_tx_pwr_table_offset</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ll_tx_pwr_if.o(.text.ll_tx_pwr_if_get_tx_pwr_table_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ll_tx_pwr_if_get_tx_pwr_table_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_write_tx_pwr
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_set_conn_tx_power_level
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_reset
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_tx_pwr_params_config
</UL>

<P><STRONG><a name="[607]"></a>ll_tx_pwr_if_is_le_power_class_1_supported</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ll_tx_pwr_if.o(.text.ll_tx_pwr_if_is_le_power_class_1_supported))
<BR><BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_le_feature_info
</UL>

<P><STRONG><a name="[6da]"></a>ll_tx_pwr_if_select_tx_power_mode</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ll_tx_pwr_if.o(.text.ll_tx_pwr_if_select_tx_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ll_tx_pwr_if_select_tx_power_mode &rArr; llhwc_phy_patch_tx_power_mode_phy_reg &rArr; llhwc_phy_seq_ram_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_patch_tx_power_mode_phy_reg
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_set_initial_tx_power_levels
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_select_tx_power_table
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_tx_power_params_init
</UL>

<P><STRONG><a name="[6ec]"></a>ll_tx_pwr_if_set_initial_tx_power_levels</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ll_tx_pwr_if.o(.text.ll_tx_pwr_if_set_initial_tx_power_levels))
<BR><BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_select_tx_power_mode
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_tx_power_params_init
</UL>

<P><STRONG><a name="[6ed]"></a>ll_tx_pwr_if_tx_power_params_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ll_tx_pwr_if.o(.text.ll_tx_pwr_if_tx_power_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ll_tx_pwr_if_tx_power_params_init &rArr; ll_tx_pwr_if_select_tx_power_mode &rArr; llhwc_phy_patch_tx_power_mode_phy_reg &rArr; llhwc_phy_seq_ram_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_select_tx_power_mode
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_set_initial_tx_power_levels
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_init
</UL>

<P><STRONG><a name="[47c]"></a>ll_tx_pwr_if_tx_pwr_params_config</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ll_tx_pwr_if.o(.text.ll_tx_pwr_if_tx_pwr_params_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ll_tx_pwr_if_tx_pwr_params_config &rArr; llhwc_phy_set_tx_pwr &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_get_tx_pwr_table_offset
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_tx_pwr
</UL>
<BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_adv_param
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
</UL>

<P><STRONG><a name="[5df]"></a>llcp_check_update_prcdur</STRONG> (Thumb, 380 bytes, Stack size 72 bytes, llcp_mngr.o(.text.llcp_check_update_prcdur))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = llcp_check_update_prcdur &rArr; OUTLINED_FUNCTION_10 &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_local_chnl_classification
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_set_req_chnls_in_min_chnls_prcdr
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_get_instant_time
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_get_conn_instant_offset
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_optm_conn_param
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
</UL>

<P><STRONG><a name="[5e5]"></a>llcp_clock_accuracy_req</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, llcp_mngr.o(.text.llcp_clock_accuracy_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = llcp_clock_accuracy_req &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_overflow_diff
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_trigger_sleep_clock_accuracy_update
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_re_exec_host_control
</UL>

<P><STRONG><a name="[6fa]"></a>llcp_data_length_update</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, llcp_mngr.o(.text.llcp_data_length_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = llcp_data_length_update &rArr; llcp_data_length_init &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_data_length_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_re_exec_host_control
</UL>

<P><STRONG><a name="[6fb]"></a>llcp_data_length_update_received</STRONG> (Thumb, 556 bytes, Stack size 56 bytes, llcp_mngr.o(.text.llcp_data_length_update_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = llcp_data_length_update_received &rArr; llcp_data_length_init &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_suggested_data_length
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_updt_conn_evnt_durn
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_27
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_data_length_init
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_suggested_data_length_trgrd_flg
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[6ff]"></a>llcp_disconnect</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, llcp_mngr.o(.text.llcp_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = llcp_disconnect &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_mngr_get_state_type
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_encryption
</UL>

<P><STRONG><a name="[700]"></a>llcp_disconnect_received</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, llcp_mngr.o(.text.llcp_disconnect_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = llcp_disconnect_received &rArr; conn_mngr_disconnect &rArr; conn_mngr_free_handle &rArr; evnt_schdlr_unrgstr_evnt &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_wait_for_evnt_cmplt
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[701]"></a>llcp_enc_req_received</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, llcp_mngr.o(.text.llcp_enc_req_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = llcp_enc_req_received &rArr; OUTLINED_FUNCTION_5 &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_gen_rnd_num
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_init
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_check_encryption
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[703]"></a>llcp_enc_rsp_received</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, llcp_mngr.o(.text.llcp_enc_rsp_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = llcp_enc_rsp_received &rArr; llhwc_128_encrypt &rArr; llhwc_cmn_crypto &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_128_encrypt
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[6cc]"></a>llcp_encryption_req</STRONG> (Thumb, 272 bytes, Stack size 80 bytes, llcp_mngr.o(.text.llcp_encryption_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = llcp_encryption_req &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enqueue_host_control
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_le_feature_info
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_gen_rnd_num
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_check_encryption
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_strt_encrpt
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_re_exec_host_control
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_process_pkt
</UL>

<P><STRONG><a name="[706]"></a>llcp_enqueue_host_control</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, llcp_mngr.o(.text.llcp_enqueue_host_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = llcp_enqueue_host_control &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_alloc
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_specific_irq
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_specific_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_encryption_req
</UL>

<P><STRONG><a name="[709]"></a>llcp_le_set_phy_cmd</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, llcp_mngr.o(.text.llcp_le_set_phy_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = llcp_le_set_phy_cmd &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_re_exec_host_control
</UL>

<P><STRONG><a name="[70c]"></a>llcp_pause_enc_req_received</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, llcp_mngr.o(.text.llcp_pause_enc_req_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = llcp_pause_enc_req_received &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[70d]"></a>llcp_ping_received</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, llcp_mngr.o(.text.llcp_ping_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = llcp_ping_received &rArr; OUTLINED_FUNCTION_5 &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_get_ping_timeout_value
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[5e8]"></a>llcp_ping_req</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llcp_mngr.o(.text.llcp_ping_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = llcp_ping_req &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_process_evnt_clbk
</UL>

<P><STRONG><a name="[71f]"></a>llcp_pram_ngtv_rply</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, llcp_mngr.o(.text.llcp_pram_ngtv_rply))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = llcp_pram_ngtv_rply &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop_free
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_param_req_received
</UL>

<P><STRONG><a name="[71a]"></a>llcp_pram_pstv_rply</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, llcp_mngr.o(.text.llcp_pram_pstv_rply))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = llcp_pram_pstv_rply &rArr; llcp_update_conn_param &rArr; OUTLINED_FUNCTION_5 &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop_free
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_conn_param
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_param_req_received
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_re_exec_host_control
</UL>

<P><STRONG><a name="[478]"></a>llcp_process_pkt</STRONG> (Thumb, 640 bytes, Stack size 32 bytes, llcp_mngr.o(.text.llcp_process_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = llcp_process_pkt &rArr; llcp_pkt_received &rArr;  llcp_pkt_received (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_encryption_req
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_send_pndng_data_pkt
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop_free
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buff_hdr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_req_lng_trm_key
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_recalculate_instant
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
</UL>

<P><STRONG><a name="[5e2]"></a>llcp_re_exec_host_control</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, llcp_mngr.o(.text.llcp_re_exec_host_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = llcp_re_exec_host_control &rArr; llcp_update_param_req &rArr; llcp_update_conn_param &rArr; OUTLINED_FUNCTION_5 &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_clock_accuracy_req
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_le_set_phy_cmd
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_param_req
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_features
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_version
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pram_pstv_rply
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_data_length_update
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_encryption_req
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
</UL>

<P><STRONG><a name="[722]"></a>llcp_read_remote_features</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, llcp_mngr.o(.text.llcp_read_remote_features))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = llcp_read_remote_features &rArr; llcp_feature_exchange_init &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feature_exchange_init
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_re_exec_host_control
</UL>

<P><STRONG><a name="[710]"></a>llcp_read_remote_features_received</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, llcp_mngr.o(.text.llcp_read_remote_features_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = llcp_read_remote_features_received &rArr; llcp_feature_exchange_init &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feature_exchange_init
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[5e3]"></a>llcp_read_remote_version</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, llcp_mngr.o(.text.llcp_read_remote_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = llcp_read_remote_version &rArr; llcp_version_exchange_init &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_version_exchange_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_re_exec_host_control
</UL>

<P><STRONG><a name="[718]"></a>llcp_read_remote_version_received</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, llcp_mngr.o(.text.llcp_read_remote_version_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = llcp_read_remote_version_received &rArr; llcp_version_exchange_init &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_version_exchange_init
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_27
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[5e6]"></a>llcp_recalculate_instant</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, llcp_mngr.o(.text.llcp_recalculate_instant))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = llcp_recalculate_instant &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_specific_irq
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_specific_irq
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_get_instant_time
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_get_conn_instant_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_process_evnt_clbk
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_process_pkt
</UL>

<P><STRONG><a name="[721]"></a>llcp_req_lng_trm_key</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, llcp_mngr.o(.text.llcp_req_lng_trm_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = llcp_req_lng_trm_key &rArr; OUTLINED_FUNCTION_10 &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_process_pkt
</UL>

<P><STRONG><a name="[6f2]"></a>llcp_set_req_chnls_in_min_chnls_prcdr</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, llcp_mngr.o(.text.llcp_set_req_chnls_in_min_chnls_prcdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = llcp_set_req_chnls_in_min_chnls_prcdr &rArr; OUTLINED_FUNCTION_26 &rArr; utils_calc_num_of_used_data_chnls &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_check_update_prcdur
</UL>

<P><STRONG><a name="[6d0]"></a>llcp_start_encryption</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, llcp_mngr.o(.text.llcp_start_encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = llcp_start_encryption &rArr; llcp_disconnect &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_128_encrypt
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_disconnect
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_send_pndng_data_pkt
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_rcvd_long_trm_key
</UL>

<P><STRONG><a name="[601]"></a>llcp_update_chnl_map</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, llcp_mngr.o(.text.llcp_update_chnl_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = llcp_update_chnl_map &rArr; llcp_update_chnl_map_per_connection &rArr; llcp_instant_ctrl_init &rArr; os_timer_create &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_chnl_map_per_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_update_ststic
</UL>

<P><STRONG><a name="[5e4]"></a>llcp_update_chnl_map_per_connection</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, llcp_mngr.o(.text.llcp_update_chnl_map_per_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = llcp_update_chnl_map_per_connection &rArr; llcp_instant_ctrl_init &rArr; os_timer_create &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_instant_ctrl_init
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_chnl_map
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_process_evnt_clbk
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[716]"></a>llcp_update_chnl_map_received</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, llcp_mngr.o(.text.llcp_update_chnl_map_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = llcp_update_chnl_map_received &rArr; conn_mngr_disconnect &rArr; conn_mngr_free_handle &rArr; evnt_schdlr_unrgstr_evnt &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_instant_ctrl_init
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_get_instant_time
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[71e]"></a>llcp_update_conn_param</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, llcp_mngr.o(.text.llcp_update_conn_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = llcp_update_conn_param &rArr; OUTLINED_FUNCTION_5 &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop_free
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_instant_ctrl_init
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_eff_max_tx_time
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_27
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_optm_conn_param
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_param_req
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pram_pstv_rply
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[715]"></a>llcp_update_conn_param_received</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, llcp_mngr.o(.text.llcp_update_conn_param_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = llcp_update_conn_param_received &rArr; conn_mngr_disconnect &rArr; conn_mngr_free_handle &rArr; evnt_schdlr_unrgstr_evnt &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop_free
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_instant_ctrl_init
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_get_instant_time
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[603]"></a>llcp_update_param_req</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, llcp_mngr.o(.text.llcp_update_param_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = llcp_update_param_req &rArr; llcp_update_conn_param &rArr; OUTLINED_FUNCTION_5 &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_conn_param
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_conn_parm_req
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_updt_conn_param_evnt_clbk
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_re_exec_host_control
</UL>

<P><STRONG><a name="[719]"></a>llcp_update_param_req_received</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, llcp_mngr.o(.text.llcp_update_param_req_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = llcp_update_param_req_received &rArr; llcp_pram_pstv_rply &rArr; llcp_update_conn_param &rArr; OUTLINED_FUNCTION_5 &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pram_ngtv_rply
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pram_pstv_rply
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[704]"></a>llhwc_128_encrypt</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, llhwc.o(.text.llhwc_128_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = llhwc_128_encrypt &rArr; llhwc_cmn_crypto &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_encryption
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_rsp_received
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_rsln
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_gen
</UL>

<P><STRONG><a name="[7b4]"></a>llhwc_addr_rsln_en</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, llhwc.o(.text.llhwc_addr_rsln_en))
<BR><BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_set_addr_rsln_enble
</UL>

<P><STRONG><a name="[d6]"></a>llhwc_ble_wait_for_evnt_on_air</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, llhwc.o(.text.llhwc_ble_wait_for_evnt_on_air))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = llhwc_ble_wait_for_evnt_on_air &rArr; llhwc_hg_isr &rArr; non_conn_mngr_interrupt &rArr; llhwc_lst_search &rArr; llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_event_on_air_polling
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stop_scan
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_is_phy_driver_busy
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_clr_isr
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_phy_driver_stop
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lw_isr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_hg_isr
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_29
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llhwc.o(.text.llhwc_init)
</UL>
<P><STRONG><a name="[4d0]"></a>llhwc_cmn_alloc_desc</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, llhwc_cmn.o(.text.llhwc_cmn_alloc_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llhwc_cmn_alloc_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_conn_evnt_param
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_adv_param
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_35
</UL>

<P><STRONG><a name="[470]"></a>llhwc_cmn_control_aclk</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.llhwc_cmn_control_aclk))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_control_aclk
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_ch_idx_algo_2
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_read_and_stop_ed
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_strt_stp
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_phy_driver_stop
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_updt_lst_ofsts
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_sm_done_isr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lw_isr
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_write_cfg_fifo_batch
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_run_pre_post_phy_clbr
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_strt_vco_pll_clbr
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_rco_isr
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_hw_rco_clbr_enable
</UL>

<P><STRONG><a name="[72d]"></a>llhwc_cmn_control_hclk</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.llhwc_cmn_control_hclk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llhwc_cmn_control_hclk
</UL>
<BR>[Calls]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_control_hclk
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset
</UL>

<P><STRONG><a name="[725]"></a>llhwc_cmn_crypto</STRONG> (Thumb, 1252 bytes, Stack size 88 bytes, llhwc_cmn.o(.text.llhwc_cmn_crypto))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = llhwc_cmn_crypto &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_is_ptr_in_ble_mem
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_control_aclk
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_pwr_switch
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_specific_irq
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_specific_irq
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy_n_bytes
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_polling
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto_aes_done
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_free_desc
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto_aes_start
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_alloc_desc
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_wait_for_evnt_on_air
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_128_encrypt
</UL>

<P><STRONG><a name="[732]"></a>llhwc_cmn_crypto_aes_done</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.llhwc_cmn_crypto_aes_done))
<BR><BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_conn_evnt_done
</UL>

<P><STRONG><a name="[731]"></a>llhwc_cmn_crypto_aes_start</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.llhwc_cmn_crypto_aes_start))
<BR><BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_conn_evnt_en_encry
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto
</UL>

<P><STRONG><a name="[494]"></a>llhwc_cmn_evnt_notify</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, llhwc_cmn.o(.text.llhwc_cmn_evnt_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = llhwc_cmn_evnt_notify &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_evnt_not
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_phy_strt_state
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_notify_phy_clbr_state
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_pwr_switch
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_epa_enable
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_strt_stp
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_temperature_value
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stp_dtm
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_exec
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_init
</UL>

<P><STRONG><a name="[727]"></a>llhwc_cmn_free_desc</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, llhwc_cmn.o(.text.llhwc_cmn_free_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llhwc_cmn_free_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_dtm_done
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_conn_evnt_done
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_done
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_adv_done
</UL>

<P><STRONG><a name="[736]"></a>llhwc_cmn_get_actual_sw_set_point</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.llhwc_cmn_get_actual_sw_set_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = llhwc_cmn_get_actual_sw_set_point &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_get_earliest_hw_time
</UL>

<P><STRONG><a name="[737]"></a>llhwc_cmn_get_desc</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llhwc_cmn.o(.text.llhwc_cmn_get_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llhwc_cmn_get_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stp_dtm
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_init_param
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_conn_evnt_done
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_done
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
</UL>

<P><STRONG><a name="[738]"></a>llhwc_cmn_get_enc_desc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, llhwc_cmn.o(.text.llhwc_cmn_get_enc_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llhwc_cmn_get_enc_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_conn_evnt_en_encry
</UL>

<P><STRONG><a name="[73c]"></a>llhwc_cmn_init</STRONG> (Thumb, 288 bytes, Stack size 72 bytes, llhwc_cmn.o(.text.llhwc_cmn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = llhwc_cmn_init &rArr; llhwc_cmn_reset &rArr; llhwc_cmn_reset_rco_clbr &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_intr_set_pri
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_read_cntrlr_ver_info
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_hndlr_reg
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_cfg_time
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_init_context
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_initial_rco_clbr
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_tx_power_params_init
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_shared_init
</UL>

<P><STRONG><a name="[740]"></a>llhwc_cmn_initial_rco_clbr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.llhwc_cmn_initial_rco_clbr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = llhwc_cmn_initial_rco_clbr &rArr; llhwc_cmn_hw_rco_clbr &rArr; llhwc_cmn_hw_rco_clbr_enable &rArr; bsp_rco_clbr_not &rArr; ll_sys_rco_clbr_not &rArr; LINKLAYER_PLAT_RCOStartClbr &rArr; scm_setsystemclock &rArr; SwitchHse16toHse32 &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_rgstr_timer_activity_cbk
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_hw_rco_clbr
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_le_select_slp_clk_src
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_init
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_start_stop_runtime_rco_clbr
</UL>

<P><STRONG><a name="[660]"></a>llhwc_cmn_is_dp_slp_enabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.llhwc_cmn_is_dp_slp_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_reset
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_updt_lst_ofsts
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
</UL>

<P><STRONG><a name="[65b]"></a>llhwc_cmn_is_rco_clbr_running</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.llhwc_cmn_is_rco_clbr_running))
<BR><BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_get_remaining_time_for_next_event
</UL>

<P><STRONG><a name="[6ad]"></a>llhwc_cmn_le_select_slp_clk_src</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.llhwc_cmn_le_select_slp_clk_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = llhwc_cmn_le_select_slp_clk_src &rArr; llhwc_cmn_reset_rco_clbr &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_initial_rco_clbr
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset_rco_clbr
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset_slptmr_src
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_cmn_le_select_slp_clk_src
</UL>

<P><STRONG><a name="[66f]"></a>llhwc_cmn_notify_phy_clbr_state</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.llhwc_cmn_notify_phy_clbr_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llhwc_cmn_notify_phy_clbr_state
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_set_phy_clbr_state
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_evnt_notify
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_evnt_clbk
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_phy_clbr_done_clbk
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_strtd
</UL>

<P><STRONG><a name="[7b7]"></a>llhwc_cmn_pta_get_rx_reject_counter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.llhwc_cmn_pta_get_rx_reject_counter))
<BR><BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_ble_event_complete
</UL>

<P><STRONG><a name="[7b6]"></a>llhwc_cmn_pta_get_tx_reject_counter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.llhwc_cmn_pta_get_tx_reject_counter))
<BR><BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_ble_event_complete
</UL>

<P><STRONG><a name="[746]"></a>llhwc_cmn_pta_set_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llhwc_cmn.o(.text.llhwc_cmn_pta_set_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llhwc_cmn_pta_set_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_recover_from_deep_sleep
</UL>

<P><STRONG><a name="[747]"></a>llhwc_cmn_pta_set_params</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.llhwc_cmn_pta_set_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llhwc_cmn_pta_set_params
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_configure_acl_params
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_configure_adv_params
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_configure_init_params
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_configure_non_prdc_scan_params
</UL>

<P><STRONG><a name="[d3]"></a>llhwc_cmn_rco_clbr_timer_cbk</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, llhwc_cmn.o(.text.llhwc_cmn_rco_clbr_timer_cbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = llhwc_cmn_rco_clbr_timer_cbk &rArr; llhwc_cmn_hw_rco_clbr &rArr; llhwc_cmn_hw_rco_clbr_enable &rArr; bsp_rco_clbr_not &rArr; ll_sys_rco_clbr_not &rArr; LINKLAYER_PLAT_RCOStartClbr &rArr; scm_setsystemclock &rArr; SwitchHse16toHse32 &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_hw_rco_clbr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llhwc_cmn.o(.text.llhwc_cmn_start_stop_runtime_rco_clbr)
</UL>
<P><STRONG><a name="[6a8]"></a>llhwc_cmn_rco_isr</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, llhwc_cmn.o(.text.llhwc_cmn_rco_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = llhwc_cmn_rco_isr &rArr; llhwc_cmn_update_rco_timer &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_control_aclk
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_update_rco_timer
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_hw_rco_compnstn_enable
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_hw_rco_clbr_enable
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_lw_isr
</UL>

<P><STRONG><a name="[742]"></a>llhwc_cmn_read_cntrlr_ver_info</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, llhwc_cmn.o(.text.llhwc_cmn_read_cntrlr_ver_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = llhwc_cmn_read_cntrlr_ver_info &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_init
</UL>

<P><STRONG><a name="[75c]"></a>llhwc_cmn_reg_isr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.llhwc_cmn_reg_isr))
<BR><BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init
</UL>

<P><STRONG><a name="[63e]"></a>llhwc_cmn_request_temperature</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.llhwc_cmn_request_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = llhwc_cmn_request_temperature &rArr; bsp_request_temperature &rArr; ll_sys_request_temperature &rArr; LINKLAYER_PLAT_RequestTemperature &rArr; ll_sys_bg_temperature_measurement &rArr; TEMPMEAS_RequestTemperatureMeasurement &rArr; ll_intf_cmn_set_temperature_value &rArr; llhwc_cmn_set_temperature_value &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_request_temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_temperature_sensor_state
</UL>

<P><STRONG><a name="[73e]"></a>llhwc_cmn_reset</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.llhwc_cmn_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = llhwc_cmn_reset &rArr; llhwc_cmn_reset_rco_clbr &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_control_aclk
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_us
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset_rco_clbr
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset_slptmr_src
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_control_hclk
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset_slp_params
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_init
</UL>

<P><STRONG><a name="[745]"></a>llhwc_cmn_reset_rco_clbr</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.llhwc_cmn_reset_rco_clbr))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = llhwc_cmn_reset_rco_clbr &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_free
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_hw_rco_clbr_enable
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_le_select_slp_clk_src
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_start_stop_runtime_rco_clbr
</UL>

<P><STRONG><a name="[744]"></a>llhwc_cmn_reset_slptmr_src</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, llhwc_cmn.o(.text.llhwc_cmn_reset_slptmr_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = llhwc_cmn_reset_slptmr_src &rArr; ble_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_le_select_slp_clk_src
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_start_stop_runtime_rco_clbr
</UL>

<P><STRONG><a name="[66d]"></a>llhwc_cmn_rgstr_evnt_schdlr_timing_update_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.llhwc_cmn_rgstr_evnt_schdlr_timing_update_cb))
<BR><BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_init
</UL>

<P><STRONG><a name="[676]"></a>llhwc_cmn_set_controller_activity</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.llhwc_cmn_set_controller_activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = llhwc_cmn_set_controller_activity &rArr; llhwc_cmn_start_stop_runtime_rco_clbr &rArr; llhwc_cmn_reset_rco_clbr &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_start_stop_runtime_rco_clbr
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_reset
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_evnt
</UL>

<P><STRONG><a name="[67e]"></a>llhwc_cmn_set_dp_slp_mode</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, llhwc_cmn.o(.text.llhwc_cmn_set_dp_slp_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = llhwc_cmn_set_dp_slp_mode &rArr; llhwc_cmn_reset_slp_params &rArr; llhwc_phy_init &rArr; llhwc_phy_init_clbr &rArr; llhwc_phy_strt_vco_pll_clbr &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_pwr_switch
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_specific_irq
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_specific_irq
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_recover_from_ll_dp_slp
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_recover_from_deep_sleep
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset_slp_params
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_reset
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_set_dp_slp_mode
</UL>

<P><STRONG><a name="[4b9]"></a>llhwc_cmn_set_phy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.llhwc_cmn_set_phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = llhwc_cmn_set_phy &rArr; OUTLINED_FUNCTION_2 &rArr; llhwc_phy_get_ltncy
</UL>
<BR>[Calls]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_sequenc_ram_ofst
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
</UL>

<P><STRONG><a name="[6b3]"></a>llhwc_cmn_set_temperature_sensor_state</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.llhwc_cmn_set_temperature_sensor_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = llhwc_cmn_set_temperature_sensor_state &rArr; llhwc_cmn_request_temperature &rArr; bsp_request_temperature &rArr; ll_sys_request_temperature &rArr; LINKLAYER_PLAT_RequestTemperature &rArr; ll_sys_bg_temperature_measurement &rArr; TEMPMEAS_RequestTemperatureMeasurement &rArr; ll_intf_cmn_set_temperature_value &rArr; llhwc_cmn_set_temperature_value &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_request_temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_cmn_set_temperature_sensor_state
</UL>

<P><STRONG><a name="[6b4]"></a>llhwc_cmn_set_temperature_value</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.llhwc_cmn_set_temperature_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + In Cycle
<LI>Call Chain = llhwc_cmn_set_temperature_value &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_phy_clbr_state
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_evnt_notify
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_updt_clbr_evnt_when_temp_rcvd
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_init_clbr
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_cmn_set_temperature_value
</UL>

<P><STRONG><a name="[64d]"></a>llhwc_cmn_skip_hw_cmp_unit_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.llhwc_cmn_skip_hw_cmp_unit_enable))
<BR><BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[63d]"></a>llhwc_cmn_slptmr_hw_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.llhwc_cmn_slptmr_hw_enable))
<BR><BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[6ab]"></a>llhwc_cmn_sys_configure_ll_ctx</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.llhwc_cmn_sys_configure_ll_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llhwc_cmn_sys_configure_ll_ctx
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_wrapper_is_rtos_used
</UL>
<BR>[Called By]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_cmn_config_ll_ctx_params
</UL>

<P><STRONG><a name="[655]"></a>llhwc_conn_evnt_en_encry</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, llhwc.o(.text.llhwc_conn_evnt_en_encry))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = llhwc_conn_evnt_en_encry &rArr; llhwc_cmn_get_enc_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto_aes_start
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_get_enc_desc
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[636]"></a>llhwc_convert_to_hw_steps</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.llhwc_convert_to_hw_steps))
<BR><BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_event_on_air_polling
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
</UL>

<P><STRONG><a name="[657]"></a>llhwc_enable_augment_event</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llhwc.o(.text.llhwc_enable_augment_event))
<BR><BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[59f]"></a>llhwc_gen_rnd_num</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, llhwc.o(.text.llhwc_gen_rnd_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = llhwc_gen_rnd_num &rArr; gen_rnd_num &rArr; ll_sys_get_rng &rArr; LINKLAYER_PLAT_GetRNG &rArr; HW_RNG_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_rnd_num
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_scn_chnl_phy_arbitrate
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_encryption_req
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_received
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_backoff_prcdr
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_gen
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_cbk
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_evnt_intrvl
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_intrvl_to_evnt_time_stamp
</UL>

<P><STRONG><a name="[64f]"></a>llhwc_get_access_adrs_time</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llhwc.o(.text.llhwc_get_access_adrs_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llhwc_get_access_adrs_time
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[5f8]"></a>llhwc_get_ch_idx</STRONG> (Thumb, 176 bytes, Stack size 20 bytes, llhwc.o(.text.llhwc_get_ch_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = llhwc_get_ch_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_start_connection
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_master_conn_timers
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_slave_conn_timers
</UL>

<P><STRONG><a name="[648]"></a>llhwc_get_ch_idx_algo_2</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, llhwc.o(.text.llhwc_get_ch_idx_algo_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = llhwc_get_ch_idx_algo_2 &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_control_aclk
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_get_nxt_event_chnl
</UL>

<P><STRONG><a name="[633]"></a>llhwc_get_current_hw_steps</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, llhwc_cmn.o(.text.llhwc_get_current_hw_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llhwc_get_current_hw_steps &rArr; bsp_wait_for_busclkrdy &rArr; ll_sys_radio_wait_for_busclkrdy &rArr; LINKLAYER_PLAT_WaitHclkRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wait_for_busclkrdy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_event_on_air_polling
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_count_rem_hw_steps
</UL>

<P><STRONG><a name="[65a]"></a>llhwc_get_dtm_curr_mode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, llhwc.o(.text.llhwc_get_dtm_curr_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llhwc_get_dtm_curr_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_get_link_status
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_get_remaining_time_for_next_event
</UL>

<P><STRONG><a name="[756]"></a>llhwc_get_hw_phy_latency</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, llhwc_cmn.o(.text.llhwc_get_hw_phy_latency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llhwc_get_hw_phy_latency
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_hw_setup_time
</UL>

<P><STRONG><a name="[46a]"></a>llhwc_get_hw_setup_time</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, llhwc_cmn.o(.text.llhwc_get_hw_setup_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llhwc_get_hw_setup_time &rArr; llhwc_get_hw_phy_latency
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_hw_phy_latency
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_master_conn_params
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hndl_missed_evnt
</UL>

<P><STRONG><a name="[597]"></a>llhwc_get_num_of_prdc_clbr_chnls</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llhwc.o(.text.llhwc_get_num_of_prdc_clbr_chnls))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llhwc_get_num_of_prdc_clbr_chnls &rArr; llhwc_phy_get_num_of_prdc_clbr_chnls
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_num_of_prdc_clbr_chnls
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nxt_when_idle_evnt
</UL>

<P><STRONG><a name="[592]"></a>llhwc_get_prdc_clbr_evnt_cfg_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llhwc.o(.text.llhwc_get_prdc_clbr_evnt_cfg_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = llhwc_get_prdc_clbr_evnt_cfg_time &rArr; llhwc_phy_get_prdc_clbr_cfg_time
</UL>
<BR>[Calls]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_prdc_clbr_cfg_time
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
</UL>

<P><STRONG><a name="[65e]"></a>llhwc_goto_sleep</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, llhwc.o(.text.llhwc_goto_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llhwc_goto_sleep &rArr; llhwc_pwr_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_pwr_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_near_evnts
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_conn_evnt_done
</UL>

<P><STRONG><a name="[6c0]"></a>llhwc_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, llhwc.o(.text.llhwc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = llhwc_init &rArr; llhwc_reset &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_reset
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_rgstr_func
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reg_isr
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_conn_empty_pkts
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_init
</UL>

<P><STRONG><a name="[6d1]"></a>llhwc_is_dtm_enabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, llhwc.o(.text.llhwc_is_dtm_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_enable
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_reset
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
</UL>

<P><STRONG><a name="[637]"></a>llhwc_is_event_on_air_cleared</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, llhwc.o(.text.llhwc_is_event_on_air_cleared))
<BR><BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_event_on_air_polling
</UL>

<P><STRONG><a name="[5f9]"></a>llhwc_is_in_augmented_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llhwc.o(.text.llhwc_is_in_augmented_mode))
<BR><BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_reset
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_start_connection
</UL>

<P><STRONG><a name="[457]"></a>llhwc_lst_add_rmv_dev</STRONG> (Thumb, 480 bytes, Stack size 64 bytes, llhwc.o(.text.llhwc_lst_add_rmv_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = llhwc_lst_add_rmv_dev &rArr; llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_pwr_switch
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_is_dp_slp_enabled
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_wait_for_evnt_on_air
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pwr_domain
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_updt_lst_ofsts
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_add_rmv_clr_device_white_list
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_clr_fw_reslvng_list
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_start_connection
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_hw_reslvng_list
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_remove_from_associated_lists
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_hndlr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_cbk
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>

<P><STRONG><a name="[db]"></a>llhwc_lst_clr</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, llhwc.o(.text.llhwc_lst_clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llhwc_lst_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_add_rmv_clr_device_white_list
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_enable
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_clr_fw_reslvng_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llhwc.o(.text.llhwc_reset)
</UL>
<P><STRONG><a name="[486]"></a>llhwc_lst_edit_indicators</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, llhwc.o(.text.llhwc_lst_edit_indicators))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llhwc_lst_edit_indicators
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_add_rmv_clr_device_white_list
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_start_connection
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_hw_reslvng_list
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_hndlr
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_clear_resolving_lst_indicator_bits
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_update_resolving_lst_indicator_bits
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_cbk
</UL>

<P><STRONG><a name="[7b2]"></a>llhwc_lst_read_indicators</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llhwc.o(.text.llhwc_lst_read_indicators))
<BR><BR>[Called By]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_hndlr
</UL>

<P><STRONG><a name="[764]"></a>llhwc_lst_rmv_by_loc</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, llhwc.o(.text.llhwc_lst_rmv_by_loc))
<BR><BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_add_rmv_clr_device_white_list
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_rmv_rand_add
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_hw_reslvng_list
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_remove_from_associated_lists
</UL>

<P><STRONG><a name="[763]"></a>llhwc_lst_rmv_rand_add</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, llhwc.o(.text.llhwc_lst_rmv_rand_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = llhwc_lst_rmv_rand_add &rArr; gen_rnd_num &rArr; ll_sys_get_rng &rArr; LINKLAYER_PLAT_GetRNG &rArr; HW_RNG_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_rnd_num
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_rmv_by_loc
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_remove_random_addr_list
</UL>

<P><STRONG><a name="[4e9]"></a>llhwc_lst_search</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, llhwc.o(.text.llhwc_lst_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = llhwc_lst_search &rArr; llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_pwr_switch
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_is_dp_slp_enabled
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_wait_for_evnt_on_air
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pwr_domain
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_updt_lst_ofsts
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_add_rmv_clr_device_white_list
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_interrupt
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_hw_reslvng_list
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_remove_from_associated_lists
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_hndlr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_cbk
</UL>

<P><STRONG><a name="[778]"></a>llhwc_phy_activate_scan_req</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, llhwc_phy.o(.text.llhwc_phy_activate_scan_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llhwc_phy_activate_scan_req
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
</UL>

<P><STRONG><a name="[6a2]"></a>llhwc_phy_clbr_seq_done_isr</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, llhwc_phy.o(.text.llhwc_phy_clbr_seq_done_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = llhwc_phy_clbr_seq_done_isr &rArr; llhwc_phy_clbr_cmpltd_release_grant &rArr; llhwc_phy_run_pre_post_phy_clbr &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_num_of_prdc_clbr_chnls
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_cmp_raw_reading
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_phy_driver_stop
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_nxt_clbr_ch
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_strt_vco_pll_clbr
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_clbr_cmpltd_release_grant
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_read_updt_vco_pll_clbr
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_phy_clbr_state
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_clr_isr
</UL>

<P><STRONG><a name="[75b]"></a>llhwc_phy_deactivate_scan_req</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, llhwc_phy.o(.text.llhwc_phy_deactivate_scan_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llhwc_phy_deactivate_scan_req
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_hg_isr
</UL>

<P><STRONG><a name="[6a7]"></a>llhwc_phy_exec_clbr_done_clbk</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, llhwc_phy.o(.text.llhwc_phy_exec_clbr_done_clbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llhwc_phy_exec_clbr_done_clbk &rArr; llhwc_phy_get_num_of_prdc_clbr_chnls
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_num_of_prdc_clbr_chnls
</UL>
<BR>[Called By]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_clbr_cmpltd_release_grant
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_lw_isr
</UL>

<P><STRONG><a name="[62d]"></a>llhwc_phy_get_adv_chnls_switch_time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llhwc_phy.o(.text.llhwc_phy_get_adv_chnls_switch_time))
<BR><BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_calc_prim_adv_durn_on_air
</UL>

<P><STRONG><a name="[4ae]"></a>llhwc_phy_get_ltncy</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, llhwc_phy.o(.text.llhwc_phy_get_ltncy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llhwc_phy_get_ltncy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[664]"></a>llhwc_phy_get_num_of_prdc_clbr_chnls</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, llhwc_phy.o(.text.llhwc_phy_get_num_of_prdc_clbr_chnls))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llhwc_phy_get_num_of_prdc_clbr_chnls
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_num_of_prdc_clbr_chnls
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_nxt_clbr_ch
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_clbr_seq_done_isr
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_exec_clbr_done_clbk
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_clbr_cmpltd_release_grant
</UL>

<P><STRONG><a name="[72c]"></a>llhwc_phy_get_num_rssi_octets</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, llhwc_phy.o(.text.llhwc_phy_get_num_rssi_octets))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llhwc_phy_get_num_rssi_octets
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_rssi_value
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_calc_num_rx_pkts
</UL>

<P><STRONG><a name="[769]"></a>llhwc_phy_get_nxt_clbr_ch</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, llhwc_phy.o(.text.llhwc_phy_get_nxt_clbr_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llhwc_phy_get_nxt_clbr_ch &rArr; llhwc_phy_get_num_of_prdc_clbr_chnls
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_num_of_prdc_clbr_chnls
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_hndl_runtime_clbr
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_clbr_seq_done_isr
</UL>

<P><STRONG><a name="[63c]"></a>llhwc_phy_get_nxt_seq_from_queue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, llhwc_phy.o(.text.llhwc_phy_get_nxt_seq_from_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_fill_and_trigger_sequencer_ram
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_conn_evnt_param
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_adv_param
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_init_param
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_trg_sequence_from_sequencer_ram
</UL>

<P><STRONG><a name="[6a1]"></a>llhwc_phy_get_phy_clbr_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, llhwc_phy.o(.text.llhwc_phy_get_phy_clbr_state))
<BR><BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_clr_isr
</UL>

<P><STRONG><a name="[d8]"></a>llhwc_phy_get_phy_seq_cfg_time_spi_bus</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, llhwc_phy.o(.text.llhwc_phy_get_phy_seq_cfg_time_spi_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = llhwc_phy_get_phy_seq_cfg_time_spi_bus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> llhwc_phy.o(.text.llhwc_phy_get_prdc_clbr_cfg_time)
<LI> llhwc_phy.o(.text.llhwc_phy_set_cfg_time)
</UL>
<P><STRONG><a name="[733]"></a>llhwc_phy_get_phy_strt_state</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llhwc_phy.o(.text.llhwc_phy_get_phy_strt_state))
<BR><BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stp_dtm
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_set
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_evnt_notify
</UL>

<P><STRONG><a name="[757]"></a>llhwc_phy_get_prdc_clbr_cfg_time</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, llhwc_phy.o(.text.llhwc_phy_get_prdc_clbr_cfg_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = llhwc_phy_get_prdc_clbr_cfg_time
</UL>
<BR>[Calls]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_prdc_clbr_evnt_cfg_time
</UL>

<P><STRONG><a name="[72b]"></a>llhwc_phy_get_rssi_value</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, llhwc_phy.o(.text.llhwc_phy_get_rssi_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llhwc_phy_get_rssi_value &rArr; llhwc_phy_get_num_rssi_octets
</UL>
<BR>[Calls]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_num_rssi_octets
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_calc_num_rx_pkts
</UL>

<P><STRONG><a name="[750]"></a>llhwc_phy_get_sequenc_ram_ofst</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, llhwc_phy.o(.text.llhwc_phy_get_sequenc_ram_ofst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llhwc_phy_get_sequenc_ram_ofst
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_phy
</UL>

<P><STRONG><a name="[76e]"></a>llhwc_phy_hndl_runtime_clbr</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, llhwc_phy.o(.text.llhwc_phy_hndl_runtime_clbr))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = llhwc_phy_hndl_runtime_clbr &rArr; llhwc_phy_clbr_cmpltd_release_grant &rArr; llhwc_phy_run_pre_post_phy_clbr &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_cmp_raw_reading
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_nxt_clbr_ch
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_run_pre_post_phy_clbr
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_strt_vco_pll_clbr
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_clbr_cmpltd_release_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_prdc_clbr_exec
</UL>

<P><STRONG><a name="[74c]"></a>llhwc_phy_init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, llhwc_phy.o(.text.llhwc_phy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = llhwc_phy_init &rArr; llhwc_phy_init_clbr &rArr; llhwc_phy_strt_vco_pll_clbr &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_evnt_notify
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_init_clbr
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_preemph_coeff_init
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_seq_ram_init
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_write_cfg_fifo_batch
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_run_phy_sequence
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_phy_slp_regs
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset_slp_params
</UL>

<P><STRONG><a name="[752]"></a>llhwc_phy_init_clbr</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, llhwc_phy.o(.text.llhwc_phy_init_clbr))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = llhwc_phy_init_clbr &rArr; llhwc_phy_strt_vco_pll_clbr &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_run_pre_post_phy_clbr
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_strt_vco_pll_clbr
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_read_updt_vco_pll_clbr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_temperature_value
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_init
</UL>

<P><STRONG><a name="[6a5]"></a>llhwc_phy_is_phy_clbr_done_pnding</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llhwc_phy.o(.text.llhwc_phy_is_phy_clbr_done_pnding))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_lw_isr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_hg_isr
</UL>

<P><STRONG><a name="[63b]"></a>llhwc_phy_is_phy_driver_busy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llhwc_phy.o(.text.llhwc_phy_is_phy_driver_busy))
<BR><BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_ble_wait_for_evnt_on_air
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_conn_evnt_param
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_adv_param
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_init_param
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_clr_isr
</UL>

<P><STRONG><a name="[6eb]"></a>llhwc_phy_patch_tx_power_mode_phy_reg</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, llhwc_phy.o(.text.llhwc_phy_patch_tx_power_mode_phy_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = llhwc_phy_patch_tx_power_mode_phy_reg &rArr; llhwc_phy_seq_ram_init
</UL>
<BR>[Calls]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_seq_ram_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_select_tx_power_mode
</UL>

<P><STRONG><a name="[729]"></a>llhwc_phy_phy_driver_stop</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llhwc_phy.o(.text.llhwc_phy_phy_driver_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_control_aclk
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_ble_wait_for_evnt_on_air
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_clbr_seq_done_isr
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_fill_and_trigger_sequencer_ram
</UL>

<P><STRONG><a name="[771]"></a>llhwc_phy_preemph_coeff_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llhwc_phy.o(.text.llhwc_phy_preemph_coeff_init))
<BR><BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_init
</UL>

<P><STRONG><a name="[773]"></a>llhwc_phy_read_and_stop_ed</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, llhwc_phy.o(.text.llhwc_phy_read_and_stop_ed))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = llhwc_phy_read_and_stop_ed &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_control_aclk
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_write_cfg_fifo_batch
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_run_phy_sequence
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_reset
</UL>

<P><STRONG><a name="[755]"></a>llhwc_phy_read_rssi</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, llhwc_phy.o(.text.llhwc_phy_read_rssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = llhwc_phy_read_rssi &rArr; llhwc_phy_write_cfg_fifo_batch &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_write_cfg_fifo_batch
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_dtm_done
</UL>

<P><STRONG><a name="[74e]"></a>llhwc_phy_recover_from_ll_dp_slp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, llhwc_phy.o(.text.llhwc_phy_recover_from_ll_dp_slp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = llhwc_phy_recover_from_ll_dp_slp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_run_phy_sequence
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_phy_slp_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_dp_slp_mode
</UL>

<P><STRONG><a name="[74b]"></a>llhwc_phy_reset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, llhwc_phy.o(.text.llhwc_phy_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = llhwc_phy_reset &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_run_phy_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset_slp_params
</UL>

<P><STRONG><a name="[774]"></a>llhwc_phy_reset_freq_correction_reg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llhwc_phy.o(.text.llhwc_phy_reset_freq_correction_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = llhwc_phy_reset_freq_correction_reg &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_run_phy_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stp_dtm
</UL>

<P><STRONG><a name="[da]"></a>llhwc_phy_run_phy_sequence</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, llhwc_phy.o(.text.llhwc_phy_run_phy_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_write_cfg_fifo_batch
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_trg_sequence_from_sequencer_ram
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_ch_config
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_reset_freq_correction_reg
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_read_and_stop_ed
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_strt_stp
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_tx_pwr
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_stop_modulation_mode
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_init
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_recover_from_ll_dp_slp
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_reset
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_run_pre_post_phy_clbr
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_strt_vco_pll_clbr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> llhwc_phy.o(.text.llhwc_phy_strt_stp)
<LI> llhwc_phy.o(.text.llhwc_phy_run_pre_post_phy_clbr)
</UL>
<P><STRONG><a name="[76f]"></a>llhwc_phy_seq_ram_init</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, llhwc_phy.o(.text.llhwc_phy_seq_ram_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llhwc_phy_seq_ram_init
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_patch_tx_power_mode_phy_reg
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_init
</UL>

<P><STRONG><a name="[73d]"></a>llhwc_phy_set_cfg_time</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, llhwc_phy.o(.text.llhwc_phy_set_cfg_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = llhwc_phy_set_cfg_time
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_init
</UL>

<P><STRONG><a name="[48a]"></a>llhwc_phy_set_ch_config</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, llhwc_phy.o(.text.llhwc_phy_set_ch_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = llhwc_phy_set_ch_config &rArr; llhwc_phy_stop_modulation_mode &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_stop_modulation_mode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_run_phy_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_conn_evnt_param
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_init_param
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
</UL>

<P><STRONG><a name="[777]"></a>llhwc_phy_set_ch_config_adv</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, llhwc_phy.o(.text.llhwc_phy_set_ch_config_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = llhwc_phy_set_ch_config_adv &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_trg_sequence_from_sequencer_ram
</UL>
<BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_adv_param
</UL>

<P><STRONG><a name="[665]"></a>llhwc_phy_set_phy_clbr_state</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, llhwc_phy.o(.text.llhwc_phy_set_phy_clbr_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = llhwc_phy_set_phy_clbr_state &rArr; llhwc_phy_clbr_seq_done_isr &rArr; llhwc_phy_clbr_cmpltd_release_grant &rArr; llhwc_phy_run_pre_post_phy_clbr &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_specific_irq
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_specific_irq
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_clbr_seq_done_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_temperature_value
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_prdc_clbr_init
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_prdc_clbr_deinit
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_phy_clbr_done_clbk
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_strtd
</UL>

<P><STRONG><a name="[679]"></a>llhwc_phy_set_schdr_clbr_cbks</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, llhwc_phy.o(.text.llhwc_phy_set_schdr_clbr_cbks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llhwc_phy_set_schdr_clbr_cbks
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_prdc_clbr_evnt
</UL>

<P><STRONG><a name="[6ee]"></a>llhwc_phy_set_tx_pwr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, llhwc_phy.o(.text.llhwc_phy_set_tx_pwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = llhwc_phy_set_tx_pwr &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_run_phy_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_tx_pwr_params_config
</UL>

<P><STRONG><a name="[776]"></a>llhwc_phy_stop_modulation_mode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, llhwc_phy.o(.text.llhwc_phy_stop_modulation_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llhwc_phy_stop_modulation_mode &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_wait_for_evnt_on_air
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_strt_stp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_run_phy_sequence
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_ch_config
</UL>

<P><STRONG><a name="[734]"></a>llhwc_phy_strt_stp</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, llhwc_phy.o(.text.llhwc_phy_strt_stp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_control_aclk
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_epa_enable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_run_phy_sequence
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_set
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_evnt_notify
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_sm_done_isr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lw_isr
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_stop_modulation_mode
</UL>

<P><STRONG><a name="[770]"></a>llhwc_phy_write_cfg_fifo_batch</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, llhwc_phy.o(.text.llhwc_phy_write_cfg_fifo_batch))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = llhwc_phy_write_cfg_fifo_batch &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_control_aclk
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_fifo_flush
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_read_rssi
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_read_and_stop_ed
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_run_phy_sequence
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_read_updt_vco_pll_clbr
</UL>

<P><STRONG><a name="[4bf]"></a>llhwc_polling</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, llhwc_cmn.o(.text.llhwc_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llhwc_polling
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_29
</UL>

<P><STRONG><a name="[66e]"></a>llhwc_prdc_clbr_deinit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, llhwc.o(.text.llhwc_prdc_clbr_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = llhwc_prdc_clbr_deinit &rArr; evnt_schdlr_unrgstr_evnt &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_phy_clbr_state
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_set_phy_clbr_params
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_phy_clbr_done_clbk
</UL>

<P><STRONG><a name="[671]"></a>llhwc_prdc_clbr_exec</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llhwc.o(.text.llhwc_prdc_clbr_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = llhwc_prdc_clbr_exec &rArr; llhwc_phy_hndl_runtime_clbr &rArr; llhwc_phy_clbr_cmpltd_release_grant &rArr; llhwc_phy_run_pre_post_phy_clbr &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_hndl_runtime_clbr
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_exec
</UL>

<P><STRONG><a name="[680]"></a>llhwc_prdc_clbr_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, llhwc.o(.text.llhwc_prdc_clbr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = llhwc_prdc_clbr_init &rArr; evnt_schdlr_rgstr_prdc_clbr_evnt &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_prdc_clbr_evnt
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_phy_clbr_state
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_set_phy_clbr_params
</UL>

<P><STRONG><a name="[4cc]"></a>llhwc_pwr_switch</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, llhwc_cmn.o(.text.llhwc_pwr_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llhwc_pwr_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_dp_slp_mode
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_goto_sleep
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_evnt_notify
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_exec
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_phy_clbr_done_clbk
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset_slp_params
</UL>

<P><STRONG><a name="[6d4]"></a>llhwc_reset</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, llhwc.o(.text.llhwc_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = llhwc_reset &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop_free
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_read_and_stop_ed
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_updt_lst_ofsts
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_reset
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init
</UL>

<P><STRONG><a name="[656]"></a>llhwc_reset_evnt_hndl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llhwc.o(.text.llhwc_reset_evnt_hndl))
<BR><BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[66c]"></a>llhwc_rgstr_evnt_schdlr_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llhwc.o(.text.llhwc_rgstr_evnt_schdlr_cb))
<BR><BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_init
</UL>

<P><STRONG><a name="[75d]"></a>llhwc_rgstr_func</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.llhwc_rgstr_func))
<BR><BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init
</UL>

<P><STRONG><a name="[651]"></a>llhwc_set_adv_param</STRONG> (Thumb, 676 bytes, Stack size 48 bytes, llhwc.o(.text.llhwc_set_adv_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = llhwc_set_adv_param &rArr; ll_tx_pwr_if_tx_pwr_params_config &rArr; llhwc_phy_set_tx_pwr &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_nxt_seq_from_queue
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_is_phy_driver_busy
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_alloc_desc
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_ch_config_adv
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_tx_pwr_params_config
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_32
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_sm_mode_from_event_type
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_data_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[653]"></a>llhwc_set_conn_evnt_param</STRONG> (Thumb, 1348 bytes, Stack size 64 bytes, llhwc.o(.text.llhwc_set_conn_evnt_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = llhwc_set_conn_evnt_param &rArr; llhwc_phy_set_ch_config &rArr; llhwc_phy_stop_modulation_mode &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_tx_power_value
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_nxt_seq_from_queue
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_is_phy_driver_busy
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_alloc_desc
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_ch_config
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_27
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_33
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_sm_mode_from_event_type
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_35
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_switch_rate
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_conn_empty_pkts
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_data_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[640]"></a>llhwc_set_evnt_hndl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llhwc.o(.text.llhwc_set_evnt_hndl))
<BR><BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[64c]"></a>llhwc_set_init_param</STRONG> (Thumb, 608 bytes, Stack size 48 bytes, llhwc.o(.text.llhwc_set_init_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = llhwc_set_init_param &rArr; llhwc_phy_set_ch_config &rArr; llhwc_phy_stop_modulation_mode &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_tx_power_value
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_nxt_seq_from_queue
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_is_phy_driver_busy
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_ch_config
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_get_desc
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_27
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_34
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_33
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_30
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_sm_mode_from_event_type
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_35
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[647]"></a>llhwc_set_scan_param</STRONG> (Thumb, 632 bytes, Stack size 48 bytes, llhwc.o(.text.llhwc_set_scan_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = llhwc_set_scan_param &rArr; OUTLINED_FUNCTION_13 &rArr; llhwc_phy_set_ch_config &rArr; llhwc_phy_stop_modulation_mode &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buff_hdr
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_nxt_seq_from_queue
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_is_phy_driver_busy
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_tx_pwr_params_config
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_get_desc
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_34
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_24
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_28
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_33
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_32
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_sm_mode_from_event_type
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_35
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_data_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[593]"></a>llhwc_slptmr_get</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, llhwc_cmn.o(.text.llhwc_slptmr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = llhwc_slptmr_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wait_for_busclkrdy
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_gnrc_evnt
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_clock_accuracy_req
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stp_dtm
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_get_remaining_time_for_next_event
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_updt_clbr_evnt_when_temp_rcvd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_near_evnts
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_evnt_clbk
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_exec
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_phy_clbr_done_clbk
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_strtd
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_hndl_runtime_clbr
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_clr_isr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_done
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lw_isr
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_clbr_seq_done_isr
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_scan
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_evnt_start_time
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hndl_missed_evnt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nxt_when_idle_evnt
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_intrvl_to_evnt_time_stamp
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_polling
</UL>

<P><STRONG><a name="[69c]"></a>llhwc_slptmr_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, llhwc_cmn.o(.text.llhwc_slptmr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llhwc_slptmr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_ll_timer_init
</UL>

<P><STRONG><a name="[64e]"></a>llhwc_slptmr_set</STRONG> (Thumb, 1100 bytes, Stack size 80 bytes, llhwc_cmn.o(.text.llhwc_slptmr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_phy_strt_state
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_strt_stp
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_polling
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_ll_timer_start
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_done
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
</UL>

<P><STRONG><a name="[69f]"></a>llhwc_slptmr_stop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llhwc_cmn.o(.text.llhwc_slptmr_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llhwc_slptmr_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_ll_timer_stop
</UL>

<P><STRONG><a name="[6d5]"></a>llhwc_stop_augmented_mode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llhwc.o(.text.llhwc_stop_augmented_mode))
<BR><BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_reset
</UL>

<P><STRONG><a name="[682]"></a>llhwc_stop_scan</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, llhwc.o(.text.llhwc_stop_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llhwc_stop_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_ble_wait_for_evnt_on_air
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_check_scan_on_air
</UL>

<P><STRONG><a name="[6d2]"></a>llhwc_stp_dtm</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, llhwc.o(.text.llhwc_stp_dtm))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = llhwc_stp_dtm &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_phy_strt_state
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_evnt_notify
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_overflow_diff
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_cmp_raw_reading
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_reset_freq_correction_reg
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_get_desc
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_clr_isr
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_conn_empty_pkts
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lw_isr
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_29
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_reset
</UL>

<P><STRONG><a name="[72f]"></a>llhwc_wait_for_evnt_on_air</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, llhwc_cmn.o(.text.llhwc_wait_for_evnt_on_air))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llhwc_wait_for_evnt_on_air
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_stop_modulation_mode
</UL>

<P><STRONG><a name="[16c]"></a>main</STRONG> (Thumb, 258 bytes, Stack size 72 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_APPE_Init &rArr; APP_BLE_Init &rArr; CAL_APP_Init &rArr; CAL_Init &rArr; aci_gatt_add_char &rArr; ACI_GATT_ADD_CHAR &rArr; GATT_Add_Char_Core &rArr; GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Process
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RAMCFG_Init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Config
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[786]"></a>mem_pool_alloc</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mem_manager.o(.text.mem_pool_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pool_recover_corruption
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_shrd_mem_alloc
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_alloc
</UL>

<P><STRONG><a name="[788]"></a>mem_pool_free</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mem_manager.o(.text.mem_pool_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pool_index
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
</UL>

<P><STRONG><a name="[b1]"></a>mem_pool_init</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, mem_manager.o(.text.mem_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mem_pool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ble_mem_cfg.o(.text.ble_mem_shared_reset)
<LI> mem_cfg.o(.text.ll_mem_init)
</UL>
<P><STRONG><a name="[787]"></a>mem_pool_recover_corruption</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, mem_manager.o(.text.mem_pool_recover_corruption))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pool_alloc
</UL>

<P><STRONG><a name="[6c2]"></a>non_conn_mngr_add_rmv_clr_device_white_list</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, non_conn_mngr.o(.text.non_conn_mngr_add_rmv_clr_device_white_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = non_conn_mngr_add_rmv_clr_device_white_list &rArr; llhwc_lst_search &rArr; llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_rmv_by_loc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_clr
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_srch_fw_reslvng_list
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_edit_indicators
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_remove_random_addr_list
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_clear_resolving_lst_indicator_bits
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_update_resolving_lst_indicator_bits
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_clear_white_list
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_add_device_white_list
</UL>

<P><STRONG><a name="[6c5]"></a>non_conn_mngr_adv_enable</STRONG> (Thumb, 584 bytes, Stack size 64 bytes, non_conn_mngr.o(.text.non_conn_mngr_adv_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = non_conn_mngr_adv_enable &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_shrd_mem_alloc
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_is_dtm_enabled
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_evnt
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_tx_power_value
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_src_address
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_srch_fw_reslvng_list
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_gen
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_form_nconn_adv
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_manage_connection_ctx_allocation
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_form_nconn_scan
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_mngr_alloc_state_mchn
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_get_local_rpa
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_adv_enable
</UL>

<P><STRONG><a name="[794]"></a>non_conn_mngr_adv_manage_connection_ctx_allocation</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, non_conn_mngr.o(.text.non_conn_mngr_adv_manage_connection_ctx_allocation))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = non_conn_mngr_adv_manage_connection_ctx_allocation &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_alloc
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_set_adv_params
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
</UL>

<P><STRONG><a name="[790]"></a>non_conn_mngr_check_conn_params</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, non_conn_mngr.o(.text.non_conn_mngr_check_conn_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = non_conn_mngr_check_conn_params &rArr; utils_calc_num_of_used_data_chnls &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_calc_num_of_used_data_chnls
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
</UL>

<P><STRONG><a name="[79b]"></a>non_conn_mngr_event_status_check</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, non_conn_mngr.o(.text.non_conn_mngr_event_status_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = non_conn_mngr_event_status_check
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_set_addr_rsln_enble
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_clr_fw_reslvng_list
</UL>

<P><STRONG><a name="[6b8]"></a>non_conn_mngr_get_link_status</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, non_conn_mngr.o(.text.non_conn_mngr_get_link_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = non_conn_mngr_get_link_status
</UL>
<BR>[Calls]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_get_link_status
</UL>

<P><STRONG><a name="[75a]"></a>non_conn_mngr_interrupt</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, non_conn_mngr.o(.text.non_conn_mngr_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = non_conn_mngr_interrupt &rArr; llhwc_lst_search &rArr; llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_srch_fw_reslvng_list
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_get_local_rpa
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_hg_isr
</UL>

<P><STRONG><a name="[b4]"></a>non_conn_mngr_remove_conditional_event</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, non_conn_mngr.o(.text.non_conn_mngr_remove_conditional_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = non_conn_mngr_remove_conditional_event &rArr; ll_intf_free_ll_pkt_hndlr &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_free_ll_pkt_hndlr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Address Reference Count : 3]<UL><LI> conn_mngr.o(.text.conn_mngr_disconnect)
<LI> ll_intf.o(.text.ll_intf_clear_event)
<LI> non_conn_mngr.o(.text.non_conn_mngr_scan_enable)
</UL>
<P><STRONG><a name="[48d]"></a>non_conn_mngr_remove_random_addr_list</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, non_conn_mngr.o(.text.non_conn_mngr_remove_random_addr_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = non_conn_mngr_remove_random_addr_list &rArr; llhwc_lst_rmv_rand_add &rArr; gen_rnd_num &rArr; ll_sys_get_rng &rArr; LINKLAYER_PLAT_GetRNG &rArr; HW_RNG_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_rmv_rand_add
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_clean_hwpostn_fw_lst
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_add_rmv_clr_device_white_list
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_hw_reslvng_list
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_hndlr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_cbk
</UL>

<P><STRONG><a name="[6be]"></a>non_conn_mngr_reset</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, non_conn_mngr.o(.text.non_conn_mngr_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = non_conn_mngr_reset &rArr; evnt_schdlr_unrgstr_evnt &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_init
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_reset
</UL>

<P><STRONG><a name="[6c9]"></a>non_conn_mngr_scan_enable</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, non_conn_mngr.o(.text.non_conn_mngr_scan_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = non_conn_mngr_scan_enable &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_remove_conditional_event
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_shrd_mem_alloc
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_is_dtm_enabled
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_evnt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_clr
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_src_address
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_mngr_update_state
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_form_nconn_scan
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_mngr_alloc_state_mchn
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_clear_hw_pstns
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_scan_enable
</UL>

<P><STRONG><a name="[6c4]"></a>non_conn_mngr_set_adv_data</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, non_conn_mngr.o(.text.non_conn_mngr_set_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = non_conn_mngr_set_adv_data &rArr; prvcy_mngr_RPA_Regeneration &rArr; prvcy_mngr_addr_gen &rArr; llhwc_128_encrypt &rArr; llhwc_cmn_crypto &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_shrd_mem_alloc
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_form_nconn_adv
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_RPA_Regeneration
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_adv_data
</UL>

<P><STRONG><a name="[6c6]"></a>non_conn_mngr_set_adv_params</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, non_conn_mngr.o(.text.non_conn_mngr_set_adv_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = non_conn_mngr_set_adv_params &rArr; non_conn_mngr_adv_manage_connection_ctx_allocation &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_manage_connection_ctx_allocation
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_adv_params
</UL>

<P><STRONG><a name="[6c8]"></a>non_conn_mngr_set_random_address</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, non_conn_mngr.o(.text.non_conn_mngr_set_random_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = non_conn_mngr_set_random_address &rArr; db_set_random_address &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_set_random_address
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_random_addr
</UL>

<P><STRONG><a name="[7a3]"></a>non_conn_mngr_update_rpa_src_addr</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, non_conn_mngr.o(.text.non_conn_mngr_update_rpa_src_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = non_conn_mngr_update_rpa_src_addr &rArr; prvcy_mngr_addr_gen &rArr; llhwc_128_encrypt &rArr; llhwc_cmn_crypto &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_srch_fw_reslvng_list
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_gen
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_get_local_rpa
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_post_timer_evnt_clbk
</UL>

<P><STRONG><a name="[12f]"></a>optm_conn_param</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, multi_role_greedy.o(.text.optm_conn_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = optm_conn_param &rArr; get_intrv_slot_period &rArr; update_slot_period &rArr; sort_events_table
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_choose_suitable_intrv
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_intrv_slot_period
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[de]"></a>osTimerHandler</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, ll_sw_timer.o(.text.osTimerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = osTimerHandler &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_get_active_sw_timers_number
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_ll_timer_start
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer_to_List
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stopped_and_expired_timers
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_get_current_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_sw_timer.o(.text.os_timer_init)
</UL>
<P><STRONG><a name="[61b]"></a>os_disable_isr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scheduling_intf.o(.text.os_disable_isr))
<BR><BR>[Calls]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_enqueue
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_encryption
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_reset
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event_first
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_post_event_cbk
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_get_earliest_time
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_get_remaining_time_for_next_event
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_set
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_evnt_clbk
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_get_current_time
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_free_desc
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_alloc_desc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_recover_from_dp_slp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_hg_isr
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_cfg_time
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_fill_and_trigger_sequencer_ram
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_gnrc_evnt_durn_chk
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_rco_isr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_lw_isr
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_hw_rco_compnstn_enable
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_polling
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pool_free
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pool_alloc
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_get_actual_sw_set_point
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pool_recover_corruption
</UL>

<P><STRONG><a name="[61e]"></a>os_enable_isr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scheduling_intf.o(.text.os_enable_isr))
<BR><BR>[Calls]<UL><LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_enqueue
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_encryption
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_reset
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event_first
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_post_event_cbk
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_get_earliest_time
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_get_remaining_time_for_next_event
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_set
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_evnt_clbk
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_get_current_time
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_free_desc
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_alloc_desc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_recover_from_dp_slp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_hg_isr
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_cfg_time
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_fill_and_trigger_sequencer_ram
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_gnrc_evnt_durn_chk
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_rco_isr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_lw_isr
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_hw_rco_compnstn_enable
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_polling
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pool_free
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pool_alloc
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_get_actual_sw_set_point
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pool_recover_corruption
</UL>

<P><STRONG><a name="[6e6]"></a>os_get_tmr_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_sw_timer.o(.text.os_get_tmr_state))
<BR><BR>[Called By]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_dp_slp_exit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_dp_slp_wakeup_evt_clbk
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_start_stop_runtime_rco_clbr
</UL>

<P><STRONG><a name="[3fe]"></a>os_mem_pool_alloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_mem_intf.o(.text.os_mem_pool_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_insert_frst
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_enqueue
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_send_pkt
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enqueue_host_control
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_form_hdr
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_alloc_evnt
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_alloc_handle
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_AllocateACLDataInLL
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_conn_evnt_done
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_done
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_adv_done
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_data_packet
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_manage_connection_ctx_allocation
</UL>

<P><STRONG><a name="[400]"></a>os_mem_pool_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll_mem_intf.o(.text.os_mem_pool_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_dequeue
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_send_pkt
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_reset
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_reset
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_free_ll_pkt_hndlr
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_reset
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buff_hdr
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_free_evnt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_free
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_delete
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_delete_node
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_SendAclDataToLL
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_AllocateACLDataInLL
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_done
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_adv_done
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_data_packet
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_free_handle
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_manage_connection_ctx_allocation
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[6a6]"></a>os_process_isr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_wrapper.o(.text.os_process_isr))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_hg_isr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_lw_prio_isr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_isr
</UL>

<P><STRONG><a name="[4c9]"></a>os_rcrsv_mutex_release</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, scheduling_intf.o(.text.os_rcrsv_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_process_event
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_dequeue
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_insert_frst
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stp_dtm
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_add_ctrl_pkt
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_send_pndng_data_pkt
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_enqueue
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_add_data_pkt
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_get_event
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_reset
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_insert_empty_frst
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_init
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_controller_activity
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_get_frst_pkt
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_dequeue
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerHandler
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer_to_List
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stopped_and_expired_timers
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_delete
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_search_node
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_scan
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schdlr_nxt_cycle
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_intrvl_to_evnt_time_stamp
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_event
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recheck_conflicting
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_conflict_queue
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_start_stop_runtime_rco_clbr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_os_timer_activity
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[45a]"></a>os_rcrsv_mutex_wait</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, scheduling_intf.o(.text.os_rcrsv_mutex_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_rcrsv_mutex_wait &rArr; LINKLAYER_PLAT_DisableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_DisableSpecificIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_process_event
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_insert_frst
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stp_dtm
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_get_event
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_reset
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_init
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerHandler
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer_to_List
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stopped_and_expired_timers
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_delete
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_intrvl_to_evnt_time_stamp
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_start_stop_runtime_rco_clbr
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[61a]"></a>os_semaphore_create</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scheduling_intf.o(.text.os_semaphore_create))
<BR><BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_init
</UL>

<P><STRONG><a name="[616]"></a>os_semaphore_release</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, scheduling_intf.o(.text.os_semaphore_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_semaphore_release
</UL>
<BR>[Calls]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_schedule_bg_process
</UL>
<BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_set_event_handle_busy
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_handle_event
</UL>

<P><STRONG><a name="[61f]"></a>os_semaphore_release_isr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, scheduling_intf.o(.text.os_semaphore_release_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_semaphore_release_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_schedule_bg_process_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event_first
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
</UL>

<P><STRONG><a name="[613]"></a>os_semaphore_wait</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scheduling_intf.o(.text.os_semaphore_wait))
<BR><BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_handle_all_events
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_handle_event
</UL>

<P><STRONG><a name="[5a4]"></a>os_shrd_mem_alloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_mem_intf.o(.text.os_shrd_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = os_shrd_mem_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pool_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_alloc_ll_pkt
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_enable
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_set_adv_data
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_data_packet
</UL>

<P><STRONG><a name="[4b7]"></a>os_timer_create</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ll_sw_timer.o(.text.os_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = os_timer_create &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_alloc
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_ll_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_dp_slp_init
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_clr_fw_reslvng_list
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_evnt
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_alloc_handle
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_instant_ctrl_init
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_init
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_start_stop_runtime_rco_clbr
</UL>

<P><STRONG><a name="[74a]"></a>os_timer_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ll_sw_timer.o(.text.os_timer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = os_timer_free &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop_free
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset_rco_clbr
</UL>

<P><STRONG><a name="[753]"></a>os_timer_get_active_sw_timers_number</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ll_sw_timer.o(.text.os_timer_get_active_sw_timers_number))
<BR><BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerHandler
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_start_stop_runtime_rco_clbr
</UL>

<P><STRONG><a name="[7a7]"></a>os_timer_get_earliest_hw_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_ll_timer.o(.text.os_timer_get_earliest_hw_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = os_timer_get_earliest_hw_time &rArr; llhwc_cmn_get_actual_sw_set_point &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_get_actual_sw_set_point
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_get_earliest_time
</UL>

<P><STRONG><a name="[659]"></a>os_timer_get_earliest_time</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ll_sw_timer.o(.text.os_timer_get_earliest_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_timer_get_earliest_time &rArr; os_timer_get_current_time &rArr; get_current_time &rArr; llhwc_slptmr_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_get_earliest_hw_time
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_get_current_time
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_get_remaining_time_for_next_event
</UL>

<P><STRONG><a name="[7a8]"></a>os_timer_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ll_sw_timer.o(.text.os_timer_init))
<BR><BR>[Calls]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intr_hndlr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_wrapper_init
</UL>

<P><STRONG><a name="[6a4]"></a>os_timer_is_any_near_sw_timer_hg_prio</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ll_sw_timer.o(.text.os_timer_is_any_near_sw_timer_hg_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_timer_is_any_near_sw_timer_hg_prio &rArr; os_timer_get_current_time &rArr; get_current_time &rArr; llhwc_slptmr_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_get_current_time
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_hg_isr
</UL>

<P><STRONG><a name="[743]"></a>os_timer_rgstr_timer_activity_cbk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_sw_timer.o(.text.os_timer_rgstr_timer_activity_cbk))
<BR><BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_initial_rco_clbr
</UL>

<P><STRONG><a name="[5f7]"></a>os_timer_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ll_sw_timer.o(.text.os_timer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = os_timer_set &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_specific_irq
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_specific_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_strtd
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_start_connection
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_sprvsn_timer_custom_set
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_sprvsn_timer_set
</UL>

<P><STRONG><a name="[675]"></a>os_timer_set_prio</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ll_sw_timer.o(.text.os_timer_set_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_timer_set_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_dp_slp_init
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_evnt
</UL>

<P><STRONG><a name="[4f3]"></a>os_timer_start</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ll_sw_timer.o(.text.os_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_ll_timer_start
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer_to_List
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stopped_and_expired_timers
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_clr_fw_reslvng_list
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_process_evnt_clbk
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_chnl_map_received
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_conn_param_received
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_received
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_init
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_check_update_prcdur
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_recalculate_instant
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_start_stop_runtime_rco_clbr
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_update_rco_timer
</UL>

<P><STRONG><a name="[5e0]"></a>os_timer_stop</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ll_sw_timer.o(.text.os_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_ll_timer_stop
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_get_active_sw_timers_number
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_ll_timer_start
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_stopped_and_expired_timers
</UL>
<BR>[Called By]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_dp_slp_exit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_sys_dp_slp_wakeup_evt_clbk
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_clr_fw_reslvng_list
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_encryption_req
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stp_dtm
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop_free
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_reset
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_exec
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_process_evnt_clbk
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_received
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_req_received
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_recalculate_instant
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset_rco_clbr
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_start_stop_runtime_rco_clbr
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_update_rco_timer
</UL>

<P><STRONG><a name="[451]"></a>os_timer_stop_free</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ll_sw_timer.o(.text.os_timer_stop_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_free
</UL>
<BR>[Called By]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pram_ngtv_rply
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pram_pstv_rply
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_reset
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_free_all_timers
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_process_evnt_clbk
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_conn_param_received
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_conn_param
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_clk_acc_rsp_recieved
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ll_phy_update_ind
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_process_pkt
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_free_tmr
</UL>

<P><STRONG><a name="[7a9]"></a>os_wrapper_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_wrapper.o(.text.os_wrapper_init))
<BR><BR>[Calls]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_shared_init
</UL>

<P><STRONG><a name="[6a3]"></a>os_wrapper_is_rtos_used</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_wrapper.o(.text.os_wrapper_is_rtos_used))
<BR><BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_sys_configure_ll_ctx
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_hg_isr
</UL>

<P><STRONG><a name="[628]"></a>packet_dequeue</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, evnt_utils.o(.text.packet_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = packet_dequeue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_add_data_pkt
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_free_evnt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
</UL>

<P><STRONG><a name="[627]"></a>packet_enqueue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, evnt_utils.o(.text.packet_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_add_ctrl_pkt
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_send_pndng_data_pkt
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_add_data_pkt
</UL>

<P><STRONG><a name="[5ce]"></a>packet_get_frst_pkt</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, evnt_utils.o(.text.packet_get_frst_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = packet_get_frst_pkt &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_max_pkts_to_send
</UL>

<P><STRONG><a name="[668]"></a>packet_insert_empty_frst</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, evnt_utils.o(.text.packet_insert_empty_frst))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = packet_insert_empty_frst &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
</UL>

<P><STRONG><a name="[6f7]"></a>pdu_trnsprt_hndlr_form_cntrl_pdu</STRONG> (Thumb, 884 bytes, Stack size 24 bytes, pdu_trnsprt_hndlr.o(.text.pdu_trnsprt_hndlr_form_cntrl_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pdu_trnsprt_hndlr_form_cntrl_pdu &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
</UL>

<P><STRONG><a name="[5ee]"></a>pdu_trnsprt_hndlr_form_data_pdu</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, pdu_trnsprt_hndlr.o(.text.pdu_trnsprt_hndlr_form_data_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pdu_trnsprt_hndlr_form_data_pdu &rArr; ble_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_send_pkt
</UL>

<P><STRONG><a name="[799]"></a>pdu_trnsprt_hndlr_form_nconn_adv</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, pdu_trnsprt_hndlr.o(.text.pdu_trnsprt_hndlr_form_nconn_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pdu_trnsprt_hndlr_form_nconn_adv &rArr; pdu_trnsprt_hndlr_form_adv_PDU_Hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_form_adv_PDU_Hdr
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_set_adv_data
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
</UL>

<P><STRONG><a name="[79a]"></a>pdu_trnsprt_hndlr_form_nconn_scan</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, pdu_trnsprt_hndlr.o(.text.pdu_trnsprt_hndlr_form_nconn_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pdu_trnsprt_hndlr_form_nconn_scan &rArr; pdu_trnsprt_hndlr_form_adv_PDU_Hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_form_adv_PDU_Hdr
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_enable
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
</UL>

<P><STRONG><a name="[685]"></a>pdu_trnsprt_hndlr_get_payload_lngth</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pdu_trnsprt_hndlr.o(.text.pdu_trnsprt_hndlr_get_payload_lngth))
<BR><BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_master_conn_params
</UL>

<P><STRONG><a name="[78c]"></a>pdu_trnsprt_hndlr_get_pdu_type</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pdu_trnsprt_hndlr.o(.text.pdu_trnsprt_hndlr_get_pdu_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pdu_trnsprt_hndlr_get_pdu_type
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
</UL>

<P><STRONG><a name="[64a]"></a>pdu_trnsprt_hndlr_nconn_init_patch</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, pdu_trnsprt_hndlr.o(.text.pdu_trnsprt_hndlr_nconn_init_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pdu_trnsprt_hndlr_nconn_init_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[78f]"></a>pdu_trnsprt_hndlr_parse_conn_req</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, pdu_trnsprt_hndlr.o(.text.pdu_trnsprt_hndlr_parse_conn_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pdu_trnsprt_hndlr_parse_conn_req &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
</UL>

<P><STRONG><a name="[70f]"></a>pdu_trnsprt_hndlr_parse_data_cntrl</STRONG> (Thumb, 784 bytes, Stack size 24 bytes, pdu_trnsprt_hndlr.o(.text.pdu_trnsprt_hndlr_parse_data_cntrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pdu_trnsprt_hndlr_parse_data_cntrl &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[79f]"></a>pdu_trnsprt_hndlr_parse_nconn_adv</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, pdu_trnsprt_hndlr.o(.text.pdu_trnsprt_hndlr_parse_nconn_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pdu_trnsprt_hndlr_parse_nconn_adv &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_cbk
</UL>

<P><STRONG><a name="[4f6]"></a>prvcy_mngr_RPA_Regeneration</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, prvcy_mngr.o(.text.prvcy_mngr_RPA_Regeneration))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = prvcy_mngr_RPA_Regeneration &rArr; prvcy_mngr_addr_gen &rArr; llhwc_128_encrypt &rArr; llhwc_cmn_crypto &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_srch_fw_reslvng_list
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_set_adv_data
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>

<P><STRONG><a name="[7ad]"></a>prvcy_mngr_add_rmv_clr_fw_reslvng_list</STRONG> (Thumb, 524 bytes, Stack size 72 bytes, prvcy_mngr.o(.text.prvcy_mngr_add_rmv_clr_fw_reslvng_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = prvcy_mngr_add_rmv_clr_fw_reslvng_list &rArr; prvcy_mngr_free_tmr &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_clr
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_free_tmr
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_remove_from_associated_lists
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_event_status_check
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_reset
</UL>

<P><STRONG><a name="[7b0]"></a>prvcy_mngr_add_rmv_hw_reslvng_list</STRONG> (Thumb, 468 bytes, Stack size 48 bytes, prvcy_mngr.o(.text.prvcy_mngr_add_rmv_hw_reslvng_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvcy_mngr_add_rmv_hw_reslvng_list &rArr; llhwc_lst_search &rArr; llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_rmv_by_loc
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_edit_indicators
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_remove_random_addr_list
</UL>
<BR>[Called By]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_hndlr
</UL>

<P><STRONG><a name="[798]"></a>prvcy_mngr_addr_gen</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, prvcy_mngr.o(.text.prvcy_mngr_addr_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvcy_mngr_addr_gen &rArr; llhwc_128_encrypt &rArr; llhwc_cmn_crypto &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_128_encrypt
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_gen_rnd_num
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_clr_fw_reslvng_list
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_post_timer_evnt_clbk
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_update_rpa_src_addr
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_RPA_Regeneration
</UL>

<P><STRONG><a name="[78e]"></a>prvcy_mngr_addr_hndlr</STRONG> (Thumb, 724 bytes, Stack size 48 bytes, prvcy_mngr.o(.text.prvcy_mngr_addr_hndlr))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = prvcy_mngr_addr_hndlr &rArr; prvcy_mngr_addr_rsln &rArr; llhwc_128_encrypt &rArr; llhwc_cmn_crypto &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_read_indicators
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_srch_fw_reslvng_list
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_edit_indicators
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_hw_reslvng_list
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_rsln
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_remove_random_addr_list
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_cbk
</UL>

<P><STRONG><a name="[47e]"></a>prvcy_mngr_addr_rsln</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, prvcy_mngr.o(.text.prvcy_mngr_addr_rsln))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvcy_mngr_addr_rsln &rArr; llhwc_128_encrypt &rArr; llhwc_cmn_crypto &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_128_encrypt
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_hndlr
</UL>

<P><STRONG><a name="[792]"></a>prvcy_mngr_chck_dev_prvcy_mode</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, prvcy_mngr.o(.text.prvcy_mngr_chck_dev_prvcy_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = prvcy_mngr_chck_dev_prvcy_mode &rArr; prvcy_mngr_srch_fw_reslvng_list &rArr; ble_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_srch_fw_reslvng_list
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
</UL>

<P><STRONG><a name="[791]"></a>prvcy_mngr_chck_rpa</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, prvcy_mngr.o(.text.prvcy_mngr_chck_rpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = prvcy_mngr_chck_rpa &rArr; OUTLINED_FUNCTION_10 &rArr; prvcy_mngr_addr_rsln &rArr; llhwc_128_encrypt &rArr; llhwc_cmn_crypto &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_srch_fw_reslvng_list
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
</UL>

<P><STRONG><a name="[79e]"></a>prvcy_mngr_clean_hwpostn_fw_lst</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, prvcy_mngr.o(.text.prvcy_mngr_clean_hwpostn_fw_lst))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = prvcy_mngr_clean_hwpostn_fw_lst &rArr; prvcy_mngr_srch_fw_reslvng_list &rArr; ble_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_srch_fw_reslvng_list
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_remove_random_addr_list
</UL>

<P><STRONG><a name="[7a1]"></a>prvcy_mngr_clear_hw_pstns</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, prvcy_mngr.o(.text.prvcy_mngr_clear_hw_pstns))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvcy_mngr_clear_hw_pstns
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_enable
</UL>

<P><STRONG><a name="[78b]"></a>prvcy_mngr_clear_resolving_lst_indicator_bits</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, prvcy_mngr.o(.text.prvcy_mngr_clear_resolving_lst_indicator_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvcy_mngr_clear_resolving_lst_indicator_bits &rArr; llhwc_lst_edit_indicators
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_edit_indicators
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_add_rmv_clr_device_white_list
</UL>

<P><STRONG><a name="[797]"></a>prvcy_mngr_get_local_rpa</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, prvcy_mngr.o(.text.prvcy_mngr_get_local_rpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = prvcy_mngr_get_local_rpa &rArr; prvcy_mngr_srch_fw_reslvng_list &rArr; ble_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_srch_fw_reslvng_list
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
</UL>
<BR>[Called By]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_interrupt
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_update_rpa_src_addr
</UL>

<P><STRONG><a name="[6bf]"></a>prvcy_mngr_reset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, prvcy_mngr.o(.text.prvcy_mngr_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = prvcy_mngr_reset &rArr; prvcy_mngr_add_rmv_clr_fw_reslvng_list &rArr; prvcy_mngr_free_tmr &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_clr_fw_reslvng_list
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_init
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_reset
</UL>

<P><STRONG><a name="[6c3]"></a>prvcy_mngr_set_addr_rsln_enble</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, prvcy_mngr.o(.text.prvcy_mngr_set_addr_rsln_enble))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvcy_mngr_set_addr_rsln_enble &rArr; non_conn_mngr_event_status_check
</UL>
<BR>[Calls]<UL><LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_addr_rsln_en
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_event_status_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_set_addr_rsln_enble
</UL>

<P><STRONG><a name="[501]"></a>prvcy_mngr_srch_fw_reslvng_list</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, prvcy_mngr.o(.text.prvcy_mngr_srch_fw_reslvng_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvcy_mngr_srch_fw_reslvng_list &rArr; ble_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_add_rmv_clr_device_white_list
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_interrupt
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_update_rpa_src_addr
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_chck_dev_prvcy_mode
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_chck_rpa
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_RPA_Regeneration
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_hndlr
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_get_local_rpa
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_clean_hwpostn_fw_lst
</UL>

<P><STRONG><a name="[78a]"></a>prvcy_mngr_update_resolving_lst_indicator_bits</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, prvcy_mngr.o(.text.prvcy_mngr_update_resolving_lst_indicator_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = prvcy_mngr_update_resolving_lst_indicator_bits &rArr; OUTLINED_FUNCTION_4 &rArr; ble_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_edit_indicators
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_add_rmv_clr_device_white_list
</UL>

<P><STRONG><a name="[784]"></a>pta_ble_event_complete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pta.o(.text.pta_ble_event_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pta_ble_event_complete
</UL>
<BR>[Calls]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_pta_get_rx_reject_counter
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_pta_get_tx_reject_counter
</UL>
<BR>[Called By]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_sm_done_isr
</UL>

<P><STRONG><a name="[652]"></a>pta_configure_acl_params</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, pta.o(.text.pta_configure_acl_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pta_configure_acl_params &rArr; llhwc_cmn_pta_set_params
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_pta_set_params
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[650]"></a>pta_configure_adv_params</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pta.o(.text.pta_configure_adv_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pta_configure_adv_params &rArr; llhwc_cmn_pta_set_params
</UL>
<BR>[Calls]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_pta_set_params
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[64b]"></a>pta_configure_init_params</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pta.o(.text.pta_configure_init_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pta_configure_init_params &rArr; llhwc_cmn_pta_set_params
</UL>
<BR>[Calls]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_pta_set_params
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[646]"></a>pta_configure_non_prdc_scan_params</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pta.o(.text.pta_configure_non_prdc_scan_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pta_configure_non_prdc_scan_params &rArr; llhwc_cmn_pta_set_params
</UL>
<BR>[Calls]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_pta_set_params
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[5fa]"></a>pta_init_acl</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, pta.o(.text.pta_init_acl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pta_init_acl &rArr; ble_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_start_connection
</UL>

<P><STRONG><a name="[741]"></a>pta_init_context</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pta.o(.text.pta_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pta_init_context &rArr; ble_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_init
</UL>

<P><STRONG><a name="[74f]"></a>pta_recover_from_deep_sleep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pta.o(.text.pta_recover_from_deep_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pta_recover_from_deep_sleep &rArr; llhwc_cmn_pta_set_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_pta_set_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_dp_slp_mode
</UL>

<P><STRONG><a name="[5dc]"></a>pta_remove_pta_params</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pta.o(.text.pta_remove_pta_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pta_remove_pta_params
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_free_handle
</UL>

<P><STRONG><a name="[463]"></a>queue_delete</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ll_queue.o(.text.queue_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = queue_delete &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[60f]"></a>queue_delete_node</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ll_queue.o(.text.queue_delete_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_del_event
</UL>

<P><STRONG><a name="[611]"></a>queue_dequeue</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ll_queue.o(.text.queue_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = queue_dequeue &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_get_event
</UL>

<P><STRONG><a name="[61c]"></a>queue_enqueue</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ll_queue.o(.text.queue_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = queue_enqueue &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_alloc
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
</UL>

<P><STRONG><a name="[617]"></a>queue_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ll_queue.o(.text.queue_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = queue_free &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_reset
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_handle_remove
</UL>

<P><STRONG><a name="[621]"></a>queue_insert_frst</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ll_queue.o(.text.queue_insert_frst))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = queue_insert_frst &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_alloc
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event_first
</UL>

<P><STRONG><a name="[ba]"></a>queue_search_node</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ll_queue.o(.text.queue_search_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = queue_search_node &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_manager.o(.text.emngr_del_event)
</UL>
<P><STRONG><a name="[511]"></a>scm_hserdy_isr</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, scm.o(.text.scm_hserdy_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RAMCFG_ConfigWaitState
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_HSI_CLK_OFF
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_DEBUG_SIGNAL_RESET
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_DEBUG_SIGNAL_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_HSE_SW_HSERDY_isr
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_HSE_WaitUntilReady
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setup
</UL>

<P><STRONG><a name="[437]"></a>scm_init</STRONG> (Thumb, 452 bytes, Stack size 48 bytes, scm.o(.text.scm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = scm_init &rArr; scm_setup &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RAMCFG_GetWaitState
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_APPE_Init
</UL>

<P><STRONG><a name="[427]"></a>scm_notifyradiostate</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, scm.o(.text.scm_notifyradiostate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = scm_notifyradiostate &rArr; scm_setsystemclock &rArr; SwitchHse16toHse32 &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setsystemclock
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_StopRadioEvt
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_StartRadioEvt
</UL>

<P><STRONG><a name="[50a]"></a>scm_pllrdy_isr</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, scm.o(.text.scm_pllrdy_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = scm_pllrdy_isr &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_pllready
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_IRQHandler
</UL>

<P><STRONG><a name="[7be]"></a>scm_pllready</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, scm.o(.text.scm_pllready))
<BR><BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_pllrdy_isr
</UL>

<P><STRONG><a name="[420]"></a>scm_setsystemclock</STRONG> (Thumb, 1100 bytes, Stack size 32 bytes, scm.o(.text.scm_setsystemclock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = scm_setsystemclock &rArr; SwitchHse16toHse32 &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RAMCFG_ConfigWaitState
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_HSE_WaitUntilReady
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_HSI_SwithSystemClock_Exit
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_HSI_SwithSystemClock_Entry
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_HSI_CLK_OFF
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_HSI_CLK_ON
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchHse16toHse32
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_DEBUG_SIGNAL_RESET
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_DEBUG_SIGNAL_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_RCOStopClbr
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINKLAYER_PLAT_RCOStartClbr
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_notifyradiostate
</UL>

<P><STRONG><a name="[7bd]"></a>scm_setup</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, scm.o(.text.scm_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = scm_setup &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RAMCFG_ConfigWaitState
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_hserdy_isr
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_HSI_CLK_OFF
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_DEBUG_SIGNAL_RESET
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_DEBUG_SIGNAL_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_init
</UL>

<P><STRONG><a name="[795]"></a>state_mngr_alloc_state_mchn</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, state_mngr.o(.text.state_mngr_alloc_state_mchn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = state_mngr_alloc_state_mchn
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_enable
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
</UL>

<P><STRONG><a name="[604]"></a>state_mngr_get_num_concurrent_states</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, state_mngr.o(.text.state_mngr_get_num_concurrent_states))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_param_req
</UL>

<P><STRONG><a name="[5d3]"></a>state_mngr_get_state_type</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, state_mngr.o(.text.state_mngr_get_state_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = state_mngr_get_state_type
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_disconnect
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_error_cbk
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_slave_start_connection
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
</UL>

<P><STRONG><a name="[6d3]"></a>state_mngr_reset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, state_mngr.o(.text.state_mngr_reset))
<BR><BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_reset
</UL>

<P><STRONG><a name="[4f9]"></a>state_mngr_update_state</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, state_mngr.o(.text.state_mngr_update_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = state_mngr_update_state
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_process_evnt_clbk
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
</UL>

<P><STRONG><a name="[6ba]"></a>sys_shared_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sys.o(.text.sys_shared_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = sys_shared_init &rArr; llhwc_cmn_init &rArr; llhwc_cmn_reset &rArr; llhwc_cmn_reset_rco_clbr &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_init
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_wrapper_init
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_mem_init
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_init
</UL>

<P><STRONG><a name="[4bb]"></a>utils_calc_num_of_used_data_chnls</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, utils.o(.text.utils_calc_num_of_used_data_chnls))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = utils_calc_num_of_used_data_chnls &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_process_evnt_clbk
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_check_conn_params
</UL>

<P><STRONG><a name="[188]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7c1]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[7c0]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[7c2]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[7c3]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[189]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[18a]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7c4]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[18c]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[176]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[166]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[59]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[7c7]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[2eb]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Notification
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_Notification
</UL>

<P><STRONG><a name="[7c5]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[7c6]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[161]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[7fa]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[7fb]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[143]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[147]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5b]"></a>AMM_WrapperInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_entry.o(.text.AMM_WrapperInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AMM_WrapperInit &rArr; UTIL_MM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MM_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.AMM_RegisterBasicMemoryManager)
</UL>
<P><STRONG><a name="[5c]"></a>AMM_WrapperAllocate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_entry.o(.text.AMM_WrapperAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AMM_WrapperAllocate &rArr; UTIL_MM_GetBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MM_GetBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.AMM_RegisterBasicMemoryManager)
</UL>
<P><STRONG><a name="[5d]"></a>AMM_WrapperFree</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_entry.o(.text.AMM_WrapperFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AMM_WrapperFree &rArr; UTIL_MM_ReleaseBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MM_ReleaseBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_entry.o(.text.AMM_RegisterBasicMemoryManager)
</UL>
<P><STRONG><a name="[64]"></a>Button_TriggerActions</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, app_bsp.o(.text.Button_TriggerActions))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Button_TriggerActions &rArr; UTIL_TIMER_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_bsp.o(.text.APP_BSP_ButtonInit)
</UL>
<P><STRONG><a name="[5f]"></a>BleStack_Process_BG</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_ble.o(.text.BleStack_Process_BG))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728 + Unknown Stack Size
<LI>Call Chain = BleStack_Process_BG &rArr; BleStack_Process &rArr; GATT_Process &rArr; GATT_Reset_To_Closed_State &rArr; GATT_Store_Server_Database &rArr; SMP_Save_GATT_Data &rArr; SDB_Write_Gatt_Data &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStack_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.APP_BLE_Init)
</UL>
<P><STRONG><a name="[60]"></a>Ble_UserEvtRx</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, app_ble.o(.text.Ble_UserEvtRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = Ble_UserEvtRx &rArr; SVCCTL_UserEvtRx &rArr; SVCCTL_App_Notification &rArr; APP_BLE_Procedure_Gap_Peripheral &rArr; aci_gap_set_discoverable &rArr; ACI_GAP_SET_DISCOVERABLE &rArr; OUTLINED_FUNCTION_3 &rArr; GAP_Adv_Legacy_Start &rArr; HCI_LE_SET_ADVERTISING_ENABLE &rArr; ll_intf_le_set_adv_enable &rArr; non_conn_mngr_adv_enable &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_insert_head
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_is_empty
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_Free
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCCTL_UserEvtRx
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_head
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.APP_BLE_Init)
</UL>
<P><STRONG><a name="[61]"></a>Adv_Cancel</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, app_ble.o(.text.Adv_Cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = Adv_Cancel &rArr; aci_gap_set_non_discoverable &rArr; BleStackCB_Process &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.APP_BLE_Init)
</UL>
<P><STRONG><a name="[62]"></a>Adv_Cancel_Req</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_ble.o(.text.Adv_Cancel_Req))
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.APP_BLE_Init)
</UL>
<P><STRONG><a name="[63]"></a>Switch_OFF_GPIO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_ble.o(.text.Switch_OFF_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Switch_OFF_GPIO &rArr; BSP_LED_Off &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.APP_BLE_Init)
</UL>
<P><STRONG><a name="[5e]"></a>BLE_NvmCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_ble.o(.text.BLE_NvmCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = BLE_NvmCallback &rArr; SNVMA_Write &rArr; StartFlashWrite &rArr; FM_Write &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_Write
</UL>
<BR>[Address Reference Count : 2]<UL><LI> app_ble.o(.text.APP_BLE_HostNvmStore)
<LI> app_ble.o(.text.BLE_NvmCallback)
</UL>
<P><STRONG><a name="[65]"></a>BLE_ResumeFlowProcessCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_ble.o(.text.BLE_ResumeFlowProcessCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BLE_ResumeFlowProcessCallback &rArr; ll_intf_chng_evnt_hndlr_state &rArr; emngr_set_event_handle_busy &rArr; os_semaphore_release
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_chng_evnt_hndlr_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.text.BLECB_Indication)
</UL>
<P><STRONG><a name="[a0]"></a>P2P_SERVER_EventHandler</STRONG> (Thumb, 520 bytes, Stack size 40 bytes, p2p_server.o(.text.P2P_SERVER_EventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = P2P_SERVER_EventHandler &rArr; aci_gatt_allow_read &rArr; ACI_GATT_ALLOW_READ &rArr; GATT_Read_Permit_Resp &rArr; ATT_Build_Read_By_Type_Rsp &rArr; GATT_Read_Multi_Permit_Req_Event &rArr; EVT_aci_gatt_read_multi_permit_req &rArr; ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_allow_read
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_confirm_indication
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P2P_SERVER_Notification
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p2p_server.o(.text.P2P_SERVER_Init)
</UL>
<P><STRONG><a name="[7e]"></a>CUPS_ER_BLE_EventHandler</STRONG> (Thumb, 996 bytes, Stack size 40 bytes, cups_er_ble.o(.text.CUPS_ER_BLE_EventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = CUPS_ER_BLE_EventHandler &rArr; aci_gatt_allow_read &rArr; ACI_GATT_ALLOW_READ &rArr; GATT_Read_Permit_Resp &rArr; ATT_Build_Read_By_Type_Rsp &rArr; GATT_Read_Multi_Permit_Req_Event &rArr; EVT_aci_gatt_read_multi_permit_req &rArr; ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_Notification
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_allow_read
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cups_er_ble.o(.text.CUPS_ER_BLE_Init)
</UL>
<P><STRONG><a name="[7d]"></a>CUPS_ER_BLE_Cups_setpoint_p2_rw_SendNotification</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, cups_er_ble_app.o(.text.CUPS_ER_BLE_Cups_setpoint_p2_rw_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CUPS_ER_BLE_Cups_setpoint_p2_rw_SendNotification &rArr; CUPS_ER_BLE_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUPS_ER_BLE_UpdateValue
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_float_to_byte_array
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cups_er_ble_app.o(.text.CUPS_ER_BLE_APP_Init)
</UL>
<P><STRONG><a name="[6e]"></a>CSP_ER_BLE_EventHandler</STRONG> (Thumb, 960 bytes, Stack size 40 bytes, csp_er_ble.o(.text.CSP_ER_BLE_EventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = CSP_ER_BLE_EventHandler &rArr; aci_gatt_allow_read &rArr; ACI_GATT_ALLOW_READ &rArr; GATT_Read_Permit_Resp &rArr; ATT_Build_Read_By_Type_Rsp &rArr; GATT_Read_Multi_Permit_Req_Event &rArr; EVT_aci_gatt_read_multi_permit_req &rArr; ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_allow_read
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSP_ER_BLE_Notification
</UL>
<BR>[Address Reference Count : 1]<UL><LI> csp_er_ble.o(.text.CSP_ER_BLE_Init)
</UL>
<P><STRONG><a name="[a9]"></a>TS_EventHandler</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, ts.o(.text.TS_EventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = TS_EventHandler &rArr; aci_gatt_allow_read &rArr; ACI_GATT_ALLOW_READ &rArr; GATT_Read_Permit_Resp &rArr; ATT_Build_Read_By_Type_Rsp &rArr; GATT_Read_Multi_Permit_Req_Event &rArr; EVT_aci_gatt_read_multi_permit_req &rArr; ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_allow_read
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_Notification
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ts.o(.text.TS_Init)
</UL>
<P><STRONG><a name="[a7]"></a>TS_Ts_test_status_SendNotification</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ts_app.o(.text.TS_Ts_test_status_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = TS_Ts_test_status_SendNotification &rArr; TS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_UpdateValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ts_app.o(.text.TS_APP_Init)
</UL>
<P><STRONG><a name="[a8]"></a>TS_Ts_test_resp_code_SendNotification</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ts_app.o(.text.TS_Ts_test_resp_code_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = TS_Ts_test_resp_code_SendNotification &rArr; TS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_UpdateValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ts_app.o(.text.TS_APP_Init)
</UL>
<P><STRONG><a name="[7c]"></a>CS_EventHandler</STRONG> (Thumb, 1236 bytes, Stack size 40 bytes, cs.o(.text.CS_EventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = CS_EventHandler &rArr; aci_gatt_allow_read &rArr; ACI_GATT_ALLOW_READ &rArr; GATT_Read_Permit_Resp &rArr; ATT_Build_Read_By_Type_Rsp &rArr; GATT_Read_Multi_Permit_Req_Event &rArr; EVT_aci_gatt_read_multi_permit_req &rArr; ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_allow_read
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs.o(.text.CS_Init)
</UL>
<P><STRONG><a name="[133]"></a>CS_Cs_totalizer_SendNotification</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, cs_app.o(.text.CS_Cs_totalizer_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = CS_Cs_totalizer_SendNotification &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Notification
</UL>

<P><STRONG><a name="[6f]"></a>CS_Cs_flowtemp_SendNotification</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cs_app.o(.text.CS_Cs_flowtemp_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CS_Cs_flowtemp_SendNotification &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_float_to_byte_array
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs_app.o(.text.CS_APP_Init)
</UL>
<P><STRONG><a name="[70]"></a>CS_Cs_p2t2_SendNotification</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cs_app.o(.text.CS_Cs_p2t2_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CS_Cs_p2t2_SendNotification &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_float_to_byte_array
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs_app.o(.text.CS_APP_Init)
</UL>
<P><STRONG><a name="[71]"></a>CS_Cs_p1t1_SendNotification</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cs_app.o(.text.CS_Cs_p1t1_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CS_Cs_p1t1_SendNotification &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_float_to_byte_array
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs_app.o(.text.CS_APP_Init)
</UL>
<P><STRONG><a name="[72]"></a>CS_Cs_unit_p2t2_SendNotification</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, cs_app.o(.text.CS_Cs_unit_p2t2_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = CS_Cs_unit_p2t2_SendNotification &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs_app.o(.text.CS_APP_Init)
</UL>
<P><STRONG><a name="[73]"></a>CS_Cs_unit_p1t1_SendNotification</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, cs_app.o(.text.CS_Cs_unit_p1t1_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = CS_Cs_unit_p1t1_SendNotification &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs_app.o(.text.CS_APP_Init)
</UL>
<P><STRONG><a name="[74]"></a>CS_Cs_mod_com_error_SendNotification</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, cs_app.o(.text.CS_Cs_mod_com_error_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = CS_Cs_mod_com_error_SendNotification &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs_app.o(.text.CS_APP_Init)
</UL>
<P><STRONG><a name="[75]"></a>CS_Cs_diag_error_SendNotification</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, cs_app.o(.text.CS_Cs_diag_error_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = CS_Cs_diag_error_SendNotification &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs_app.o(.text.CS_APP_Init)
</UL>
<P><STRONG><a name="[76]"></a>CS_Cs_diag_warn_SendNotification</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, cs_app.o(.text.CS_Cs_diag_warn_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = CS_Cs_diag_warn_SendNotification &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs_app.o(.text.CS_APP_Init)
</UL>
<P><STRONG><a name="[77]"></a>CS_Cs_inlet_pres_pd1_SendNotification</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, cs_app.o(.text.CS_Cs_inlet_pres_pd1_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CS_Cs_inlet_pres_pd1_SendNotification &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_float_to_byte_array
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs_app.o(.text.CS_APP_Init)
</UL>
<P><STRONG><a name="[78]"></a>CS_Cs_outlet_pres_pd2_SendNotification</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, cs_app.o(.text.CS_Cs_outlet_pres_pd2_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CS_Cs_outlet_pres_pd2_SendNotification &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_float_to_byte_array
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs_app.o(.text.CS_APP_Init)
</UL>
<P><STRONG><a name="[79]"></a>CS_Cs_opening_per_SendNotification</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, cs_app.o(.text.CS_Cs_opening_per_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = CS_Cs_opening_per_SendNotification &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_float_to_byte_array
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs_app.o(.text.CS_APP_Init)
</UL>
<P><STRONG><a name="[7a]"></a>CS_Cs_operation_mode_SendNotification</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, cs_app.o(.text.CS_Cs_operation_mode_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = CS_Cs_operation_mode_SendNotification &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs_app.o(.text.CS_APP_Init)
</UL>
<P><STRONG><a name="[7b]"></a>CS_Cs_lvdt_amp_SendNotification</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, cs_app.o(.text.CS_Cs_lvdt_amp_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = CS_Cs_lvdt_amp_SendNotification &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cs_app.o(.text.CS_APP_Init)
</UL>
<P><STRONG><a name="[136]"></a>CS_Cs_time_stamp_hhmm_SendNotification</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, cs_app.o(.text.CS_Cs_time_stamp_hhmm_SendNotification), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = CS_Cs_time_stamp_hhmm_SendNotification &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>

<P><STRONG><a name="[137]"></a>CS_Cs_time_stamp_ddmm_SendNotification</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, cs_app.o(.text.CS_Cs_time_stamp_ddmm_SendNotification), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = CS_Cs_time_stamp_ddmm_SendNotification &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>

<P><STRONG><a name="[138]"></a>CS_Cs_year_stamp_yyyy_SendNotification</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, cs_app.o(.text.CS_Cs_year_stamp_yyyy_SendNotification), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = CS_Cs_year_stamp_yyyy_SendNotification &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>

<P><STRONG><a name="[139]"></a>CS_Cs_totalizer_last_val_SendNotification</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, cs_app.o(.text.CS_Cs_totalizer_last_val_SendNotification), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = CS_Cs_totalizer_last_val_SendNotification &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>

<P><STRONG><a name="[13a]"></a>CS_Cs_totalizer_unit_SendNotification</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, cs_app.o(.text.CS_Cs_totalizer_unit_SendNotification), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = CS_Cs_totalizer_unit_SendNotification &rArr; CS_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_UpdateValue
</UL>

<P><STRONG><a name="[6d]"></a>CAL_EventHandler</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, cal.o(.text.CAL_EventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = CAL_EventHandler &rArr; aci_gatt_allow_read &rArr; ACI_GATT_ALLOW_READ &rArr; GATT_Read_Permit_Resp &rArr; ATT_Build_Read_By_Type_Rsp &rArr; GATT_Read_Multi_Permit_Req_Event &rArr; EVT_aci_gatt_read_multi_permit_req &rArr; ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_allow_read
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_Notification
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cal.o(.text.CAL_Init)
</UL>
<P><STRONG><a name="[6b]"></a>CAL_Cs_calib_status_SendNotification</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, cal_app.o(.text.CAL_Cs_calib_status_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = CAL_Cs_calib_status_SendNotification &rArr; CAL_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_UpdateValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cal_app.o(.text.CAL_APP_Init)
</UL>
<P><STRONG><a name="[6c]"></a>CAL_Cs_calib_resp_code_SendNotification</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, cal_app.o(.text.CAL_Cs_calib_resp_code_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = CAL_Cs_calib_resp_code_SendNotification &rArr; CAL_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_UpdateValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cal_app.o(.text.CAL_APP_Init)
</UL>
<P><STRONG><a name="[135]"></a>CAL_Cs_calib_reserved_SendNotification</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, cal_app.o(.text.CAL_Cs_calib_reserved_SendNotification), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = CAL_Cs_calib_reserved_SendNotification &rArr; CAL_UpdateValue &rArr; aci_gatt_update_char_value &rArr; ACI_GATT_UPDATE_CHAR_VALUE &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAL_UpdateValue
</UL>

<P><STRONG><a name="[68]"></a>B1_EXTI_Callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbaxx_nucleo.o(.text.B1_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = B1_EXTI_Callback &rArr; BSP_PB_Callback &rArr; UTIL_TIMER_StartWithPeriod &rArr; UTIL_TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_nucleo.o(.text.BSP_PB_Init)
</UL>
<P><STRONG><a name="[69]"></a>B2_EXTI_Callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbaxx_nucleo.o(.text.B2_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = B2_EXTI_Callback &rArr; BSP_PB_Callback &rArr; UTIL_TIMER_StartWithPeriod &rArr; UTIL_TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_nucleo.o(.text.BSP_PB_Init)
</UL>
<P><STRONG><a name="[6a]"></a>B3_EXTI_Callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wbaxx_nucleo.o(.text.B3_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = B3_EXTI_Callback &rArr; BSP_PB_Callback &rArr; UTIL_TIMER_StartWithPeriod &rArr; UTIL_TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_nucleo.o(.text.BSP_PB_Init)
</UL>
<P><STRONG><a name="[329]"></a>FLASH_Program_Burst</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, stm32wbaxx_hal_flash.o(.text.FLASH_Program_Burst))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_Program_Burst
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[97]"></a>UART_TxISR_8BIT_FIFOEN</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.UART_TxISR_8BIT_FIFOEN))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[98]"></a>UART_TxISR_8BIT</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.UART_TxISR_8BIT))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[99]"></a>UART_TxISR_16BIT_FIFOEN</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.UART_TxISR_16BIT_FIFOEN))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[9a]"></a>UART_TxISR_16BIT</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.UART_TxISR_16BIT))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[ac]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 434 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.UART_RxISR_8BIT))
<BR>[Address Reference Count : 2]<UL><LI> stm32wbaxx_hal_uart.o(.text.UART_Start_Receive_IT)
<LI> stm32wbaxx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN)
</UL>
<P><STRONG><a name="[ae]"></a>UART_RxISR_8BIT_FIFOEN</STRONG> (Thumb, 798 bytes, Stack size 40 bytes, stm32wbaxx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_RxISR_8BIT_FIFOEN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[ab]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 430 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.UART_RxISR_16BIT))
<BR>[Address Reference Count : 2]<UL><LI> stm32wbaxx_hal_uart.o(.text.UART_Start_Receive_IT)
<LI> stm32wbaxx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN)
</UL>
<P><STRONG><a name="[af]"></a>UART_RxISR_16BIT_FIFOEN</STRONG> (Thumb, 794 bytes, Stack size 40 bytes, stm32wbaxx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_RxISR_16BIT_FIFOEN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[94]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.UART_DMATransmitCplt))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[95]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.UART_DMATxHalfCplt))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[96]"></a>UART_DMAError</STRONG> (Thumb, 476 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.UART_DMAError))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[87]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wbaxx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR>[Address Reference Count : 1]<UL><LI> stm32wbaxx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[b0]"></a>TRACE_TxCpltCallback</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, stm32_adv_trace.o(.text.TRACE_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TRACE_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_PostSendHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_adv_trace.o(.text.UTIL_ADV_TRACE_Init)
</UL>
<P><STRONG><a name="[57c]"></a>TRACE_Send</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32_adv_trace.o(.text.TRACE_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TRACE_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_PreSendHook
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_Send
</UL>

<P><STRONG><a name="[66]"></a>BLE_TIMER_Background</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ble_timer.o(.text.BLE_TIMER_Background))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = BLE_TIMER_Background &rArr; BLEPLATCB_TimerExpiry &rArr; L2C_Timeout_Cb &rArr; EVT_aci_l2cap_proc_timeout &rArr; ACI_L2CAP_PROC_TIMEOUT_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMM_Free
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleStackCB_Process
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LST_remove_node
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLATCB_TimerExpiry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_timer.o(.text.BLE_TIMER_Init)
</UL>
<P><STRONG><a name="[67]"></a>BLE_TIMER_Callback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_timer.o(.text.BLE_TIMER_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_timer.o(.text.BLE_TIMER_Start)
</UL>
<P><STRONG><a name="[aa]"></a>UsartIf_TxCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adv_trace_usart_if.o(.text.UsartIf_TxCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> adv_trace_usart_if.o(.text.UART_Init)
</UL>
<P><STRONG><a name="[ad]"></a>UsartIf_RxCpltCallback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, adv_trace_usart_if.o(.text.UsartIf_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UsartIf_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adv_trace_usart_if.o(.text.UART_StartRx)
</UL>
<P><STRONG><a name="[3eb]"></a>HW_RNG_Run</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, hw_rng.o(.text.HW_RNG_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_RNG_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_KERNEL_CLK_OFF
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_DEBUG_SIGNAL_RESET
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_DEBUG_SIGNAL_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_Process
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RNG_Start
</UL>

<P><STRONG><a name="[21b]"></a>AdcConfigure</STRONG> (Thumb, 386 bytes, Stack size 64 bytes, adc_ctrl.o(.text.AdcConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AdcConfigure &rArr; LL_ADC_REG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_RequestTemperature
</UL>

<P><STRONG><a name="[21c]"></a>AdcReadRaw</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, adc_ctrl.o(.text.AdcReadRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AdcReadRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCCTRL_RequestTemperature
</UL>

<P><STRONG><a name="[571]"></a>SwitchHse16toHse32</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, scm.o(.text.SwitchHse16toHse32))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SwitchHse16toHse32 &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RAMCFG_ConfigWaitState
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_HSE_WaitUntilReady
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_HSI_SwithSystemClock_Exit
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_HSI_SwithSystemClock_Entry
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_HSI_CLK_OFF
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCM_HSI_CLK_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scm_setsystemclock
</UL>

<P><STRONG><a name="[81]"></a>FM_WindowAllowed_Callback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, flash_manager.o(.text.FM_WindowAllowed_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = FM_WindowAllowed_Callback &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_ProcessRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_manager.o(.text.FM_BackgroundProcess)
</UL>
<P><STRONG><a name="[a1]"></a>event_started_callback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rf_timing_synchro.o(.text.event_started_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = event_started_callback &rArr; UTIL_TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_SetStatus
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf_timing_synchro.o(.text.RFTS_ReqWindow)
</UL>
<P><STRONG><a name="[a2]"></a>RFTS_Timeout_Callback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rf_timing_synchro.o(.text.RFTS_Timeout_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RFTS_Timeout_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FD_SetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf_timing_synchro.o(.text.RFTS_ReqWindow)
</UL>
<P><STRONG><a name="[3ef]"></a>IsCrcOk</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, simple_nvm_arbiter.o(.text.IsCrcOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = IsCrcOk &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_Accumulate
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_Calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_Restore
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_FlashManagerCallback
</UL>

<P><STRONG><a name="[3ee]"></a>InvokeBufferCallback</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, simple_nvm_arbiter.o(.text.InvokeBufferCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = InvokeBufferCallback &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Module_Print
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_FlashManagerCallback
</UL>

<P><STRONG><a name="[562]"></a>StartFlashWrite</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, simple_nvm_arbiter.o(.text.StartFlashWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = StartFlashWrite &rArr; FM_Write &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Write
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_Accumulate
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCTRL_Calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_Write
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNVMA_FlashManagerCallback
</UL>

<P><STRONG><a name="[a6]"></a>UART_Rx_Callback</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, serial_cmd_interpreter.o(.text.UART_Rx_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = UART_Rx_Callback &rArr; Serial_CMD_Interpreter_CmdExecute &rArr; APP_BSP_SerialCmdExecute &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_CMD_Interpreter_CmdExecute
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_cmd_interpreter.o(.text.Serial_CMD_Interpreter_Init)
</UL>
<P><STRONG><a name="[c9]"></a>ll_sys_event_missed_cb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ll_sys_startup.o(.text.ll_sys_event_missed_cb))
<BR>[Address Reference Count : 1]<UL><LI> ll_sys_startup.o(.text.ll_sys_ble_cntrl_init)
</UL>
<P><STRONG><a name="[45f]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_updt_clbr_evnt_when_temp_rcvd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_phy_clbr_done_clbk
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_strtd
</UL>

<P><STRONG><a name="[445]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_scn_chnl_phy_arbitrate
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_gnrc_evnt_cmplt
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_gnrc_evnt
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_error_cbk_evnt_cmplt
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_wait_for_evnt_cmplt
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_conn_params_updtd
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_add_ctrl_pkt
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_send_pndng_data_pkt
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_add_data_pkt
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_reset
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_evnt_updtd
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_init
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_evnt
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_set_prdc_clbr_exce_state
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_near_evnts
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_evnt_clbk
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_phy_clbr_done_clbk
</UL>

<P><STRONG><a name="[65f]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
</UL>

<P><STRONG><a name="[661]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
</UL>

<P><STRONG><a name="[4f0]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_cmp_raw_reading
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
</UL>

<P><STRONG><a name="[663]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
</UL>

<P><STRONG><a name="[639]"></a>evnt_schdlr_exec</STRONG> (Thumb, 2444 bytes, Stack size 96 bytes, evnt_schdlr.o(.text.evnt_schdlr_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_scn_chnl_phy_arbitrate
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_16
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_gnrc_evnt_cmplt
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_enable_augment_event
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_is_in_augmented_mode
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_reset_evnt_hndl
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_conn_evnt_en_encry
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_conn_evnt_param
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_configure_acl_params
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_adv_param
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_configure_adv_params
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_mngr_get_state_type
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_get_frst_pkt
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_dequeue
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_access_adrs_time
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_control_aclk
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_set
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_skip_hw_cmp_unit_enable
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_init_param
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_configure_init_params
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_nconn_init_patch
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_get_master_conn_anchor_point
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_choose_suitable_intrv
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_ch_idx_algo_2
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_ordered_diff_us
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_hw_setup_time
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_gen_rnd_num
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_configure_non_prdc_scan_params
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_tx_power_value
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_count_adv_channels
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt_data
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_evnt_hndl
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_pwr_switch
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_does_ble_evnt_require_ccm
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_request_temperature
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_slptmr_hw_enable
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_nxt_seq_from_queue
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_is_phy_driver_busy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_evnt_notify
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_near_evnts
</UL>

<P><STRONG><a name="[4b2]"></a>OUTLINED_FUNCTION_21</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_21))
<BR><BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_cmp_raw_reading
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_evnt_clbk
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_phy_clbr_done_clbk
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_strtd
</UL>

<P><STRONG><a name="[47f]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_strtd
</UL>

<P><STRONG><a name="[638]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_evnt_updtd
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_evnt
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
</UL>

<P><STRONG><a name="[63a]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[644]"></a>evnt_schdlr_scn_chnl_phy_arbitrate</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, evnt_schdlr.o(.text.evnt_schdlr_scn_chnl_phy_arbitrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = evnt_schdlr_scn_chnl_phy_arbitrate &rArr; llhwc_gen_rnd_num &rArr; gen_rnd_num &rArr; ll_sys_get_rng &rArr; LINKLAYER_PLAT_GetRNG &rArr; HW_RNG_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_gen_rnd_num
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[654]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
</UL>

<P><STRONG><a name="[c1]"></a>evnt_schdlr_prdc_clbr_abortd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, evnt_schdlr.o(.text.evnt_schdlr_prdc_clbr_abortd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = evnt_schdlr_prdc_clbr_abortd
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evnt_schdlr.o(.text.evnt_schdlr_rgstr_prdc_clbr_evnt)
</UL>
<P><STRONG><a name="[c2]"></a>evnt_schdlr_prdc_clbr_strtd</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, evnt_schdlr.o(.text.evnt_schdlr_prdc_clbr_strtd))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = evnt_schdlr_prdc_clbr_strtd &rArr; evnt_schdlr_prdc_clbr_exec &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_get_handle_events
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_notify_phy_clbr_state
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_phy_clbr_state
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_overflow_diff
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_specific_irq
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv_uint
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evnt_schdlr.o(.text.evnt_schdlr_rgstr_prdc_clbr_evnt)
</UL>
<P><STRONG><a name="[c3]"></a>evnt_schdlr_phy_clbr_done_clbk</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, evnt_schdlr.o(.text.evnt_schdlr_phy_clbr_done_clbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = evnt_schdlr_phy_clbr_done_clbk &rArr; llhwc_prdc_clbr_deinit &rArr; evnt_schdlr_unrgstr_evnt &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_gnrc_evnt_cmplt
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_prdc_clbr_deinit
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_handle_remove
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_notify_phy_clbr_state
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_pwr_switch
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_phy_clbr_state
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evnt_schdlr.o(.text.evnt_schdlr_rgstr_prdc_clbr_evnt)
</UL>
<P><STRONG><a name="[c4]"></a>evnt_schdlr_get_nxt_event_chnl</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, evnt_schdlr.o(.text.evnt_schdlr_get_nxt_event_chnl))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = evnt_schdlr_get_nxt_event_chnl &rArr; llhwc_get_ch_idx_algo_2 &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_ch_idx_algo_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evnt_schdlr.o(.text.evnt_schdlr_rgstr_prdc_clbr_evnt)
</UL>
<P><STRONG><a name="[670]"></a>evnt_schdlr_prdc_clbr_exec</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, evnt_schdlr.o(.text.evnt_schdlr_prdc_clbr_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = evnt_schdlr_prdc_clbr_exec &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_prdc_clbr_exec
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_pwr_switch
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_evnt_notify
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_evnt_clbk
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_strtd
</UL>

<P><STRONG><a name="[65c]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_get_remaining_time_for_next_event
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_evnt_clbk
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_strtd
</UL>

<P><STRONG><a name="[c0]"></a>evnt_schdlr_timer_callback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, evnt_schdlr.o(.text.evnt_schdlr_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = evnt_schdlr_timer_callback &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_set_prdc_clbr_exce_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evnt_schdlr.o(.text.evnt_schdlr_rgstr_evnt)
</UL>
<P><STRONG><a name="[bb]"></a>evnt_schdlr_hw_evnt_cmplt</STRONG> (Thumb, 1212 bytes, Stack size 56 bytes, evnt_schdlr.o(.text.evnt_schdlr_hw_evnt_cmplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = evnt_schdlr_hw_evnt_cmplt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_call_end_of_activity_callback
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_update_ststic
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_set
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_insert_empty_frst
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buff_hdr
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_calc_rssi_compensated_value
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_evnt_updtd
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_get_frst_pkt
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_dequeue
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hndl_next_evnt
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evnt_schdlr.o(.text.evnt_schdlr_init)
</UL>
<P><STRONG><a name="[bc]"></a>evnt_schdlr_prdc_clbr_evnt_clbk</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, evnt_schdlr.o(.text.evnt_schdlr_prdc_clbr_evnt_clbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = evnt_schdlr_prdc_clbr_evnt_clbk &rArr; evnt_schdlr_prdc_clbr_exec &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_21
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_notify_phy_clbr_state
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_overflow_diff
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv_uint
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_prdc_clbr_exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evnt_schdlr.o(.text.evnt_schdlr_init)
</UL>
<P><STRONG><a name="[bd]"></a>evnt_schdlr_hndl_near_evnts</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, evnt_schdlr.o(.text.evnt_schdlr_hndl_near_evnts))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = evnt_schdlr_hndl_near_evnts &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_exec
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_goto_sleep
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_ordered_diff_us
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_overflow_diff
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_cmp_raw_reading
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> evnt_schdlr.o(.text.evnt_schdlr_init)
</UL>
<P><STRONG><a name="[474]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OUTLINED_FUNCTION_10 &rArr; free_buff_hdr &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buff_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
</UL>

<P><STRONG><a name="[667]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
</UL>

<P><STRONG><a name="[4b5]"></a>OUTLINED_FUNCTION_22</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_22))
<BR><BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_set
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
</UL>

<P><STRONG><a name="[48e]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_set
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
</UL>

<P><STRONG><a name="[669]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_hw_evnt_cmplt
</UL>

<P><STRONG><a name="[487]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_13 &rArr; enable_specific_irq &rArr; ll_sys_enable_specific_irq &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_specific_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_config_schdling_time
</UL>

<P><STRONG><a name="[493]"></a>OUTLINED_FUNCTION_18</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_18))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OUTLINED_FUNCTION_18 &rArr; llhwc_cmn_evnt_notify &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_evnt_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_reset
</UL>

<P><STRONG><a name="[498]"></a>OUTLINED_FUNCTION_19</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_19))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_19 &rArr; os_rcrsv_mutex_wait &rArr; LINKLAYER_PLAT_DisableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_send_pndng_data_pkt
</UL>

<P><STRONG><a name="[635]"></a>evnt_schdlr_get_evnt_on_air_time</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, evnt_schdlr.o(.text.evnt_schdlr_get_evnt_on_air_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = evnt_schdlr_get_evnt_on_air_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_event_on_air_polling
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
</UL>

<P><STRONG><a name="[632]"></a>evnt_schdlr_count_rem_hw_steps</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, evnt_schdlr.o(.text.evnt_schdlr_count_rem_hw_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = evnt_schdlr_count_rem_hw_steps &rArr; llhwc_get_current_hw_steps &rArr; bsp_wait_for_busclkrdy &rArr; ll_sys_radio_wait_for_busclkrdy &rArr; LINKLAYER_PLAT_WaitHclkRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_current_hw_steps
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_event_on_air_polling
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
</UL>

<P><STRONG><a name="[683]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
</UL>

<P><STRONG><a name="[4af]"></a>OUTLINED_FUNCTION_20</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_20))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_20 &rArr; os_rcrsv_mutex_wait &rArr; LINKLAYER_PLAT_DisableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_add_ctrl_pkt
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_add_data_pkt
</UL>

<P><STRONG><a name="[4d1]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, evnt_schdlr.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_evnt
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_gnrc_evnt
</UL>

<P><STRONG><a name="[691]"></a>get_hci_buffer</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hci.o(.text.get_hci_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_del_event
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_peak_frst_event
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_alloc
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_get_handle_events
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_end_of_activity_evnt
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_energy_dctn_cmplt_evnt
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_update_clock_accuracy_cmp_evnt
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_chnl_sel_algo_evnt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_trm_key_rqst_evnt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_authn_pyld_tout_exprd_evnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encrpt_key_rfrsh_cmplt_evnt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encrpt_chng_evnt
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_phy_update_complete_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_data_length_chg_event
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_conn_param_req_event
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_conn_update_cmplt_event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_le_dir_adv_report_pkt
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_le_adv_report_pkt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_num_of_cmpltd_pckts_cmplt_evnt
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_data_buff_ovrflw_event
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_rmt_used_page_0_features_cmplt_evnt
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_rmt_ver_info_cmplt_evnt
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_conn_cmplt_evnt
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconn_cmplt_evnt
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_req_peer_sca_cpmlt_evnt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_construct_hw_err_evnt
</UL>

<P><STRONG><a name="[460]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hci.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; hci_form_hdr &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_form_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_end_of_activity_evnt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_data_length_chg_event
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_conn_update_cmplt_event
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_rmt_ver_info_cmplt_evnt
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_conn_cmplt_evnt
</UL>

<P><STRONG><a name="[480]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hci.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_acl_data_from_cntrlr_to_host
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>

<P><STRONG><a name="[447]"></a>hci_form_hdr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hci.o(.text.hci_form_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hci_form_hdr &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_alloc
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_trm_key_rqst_evnt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_authn_pyld_tout_exprd_evnt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_conn_param_req_event
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_num_of_cmpltd_pckts_cmplt_evnt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_rmt_used_page_0_features_cmplt_evnt
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_req_peer_sca_cpmlt_evnt
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[476]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hci.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_post_event_cbk
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_queue_send_pckt
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event_get_queue_id
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_form_hdr
</UL>

<P><STRONG><a name="[698]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hci.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_ll_set_event_mask_page2
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_ll_set_le_event_mask
</UL>

<P><STRONG><a name="[696]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hci.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_ll_set_event_mask_page2
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_ll_set_event_mask
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_ll_set_le_event_mask
</UL>

<P><STRONG><a name="[699]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hci.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_ll_set_event_mask_page2
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_ll_set_le_event_mask
</UL>

<P><STRONG><a name="[f3]"></a>hci_construct_hw_err_evnt</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hci.o(.text.hci_construct_hw_err_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = hci_construct_hw_err_evnt &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[4c0]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hci.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; hci_form_hdr &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_form_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_data_buff_ovrflw_event
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_construct_hw_err_evnt
</UL>

<P><STRONG><a name="[f4]"></a>hci_le_req_peer_sca_cpmlt_evnt</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, hci.o(.text.hci_le_req_peer_sca_cpmlt_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = hci_le_req_peer_sca_cpmlt_evnt &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_form_hdr
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[f5]"></a>hci_disconn_cmplt_evnt</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hci.o(.text.hci_disconn_cmplt_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = hci_disconn_cmplt_evnt &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[446]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hci.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; hci_form_hdr &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_form_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encrpt_chng_evnt
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconn_cmplt_evnt
</UL>

<P><STRONG><a name="[f6]"></a>hci_le_enhanced_conn_cmplt_evnt</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, hci.o(.text.hci_le_enhanced_conn_cmplt_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = hci_le_enhanced_conn_cmplt_evnt &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[4f1]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hci.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_conn_cmplt_evnt
</UL>

<P><STRONG><a name="[4e7]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hci.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; ble_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_conn_cmplt_evnt
</UL>

<P><STRONG><a name="[4de]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hci.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; hci_form_hdr &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_form_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_energy_dctn_cmplt_evnt
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_update_clock_accuracy_cmp_evnt
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_chnl_sel_algo_evnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encrpt_key_rfrsh_cmplt_evnt
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_conn_cmplt_evnt
</UL>

<P><STRONG><a name="[f7]"></a>hci_read_rmt_ver_info_cmplt_evnt</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, hci.o(.text.hci_read_rmt_ver_info_cmplt_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = hci_read_rmt_ver_info_cmplt_evnt &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[f8]"></a>hci_le_read_rmt_used_page_0_features_cmplt_evnt</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, hci.o(.text.hci_le_read_rmt_used_page_0_features_cmplt_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = hci_le_read_rmt_used_page_0_features_cmplt_evnt &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_form_hdr
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[f9]"></a>hci_le_data_buff_ovrflw_event</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hci.o(.text.hci_le_data_buff_ovrflw_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = hci_le_data_buff_ovrflw_event &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[fa]"></a>hci_send_acl_data_from_cntrlr_to_host</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, hci.o(.text.hci_send_acl_data_from_cntrlr_to_host))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hci_send_acl_data_from_cntrlr_to_host
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[fb]"></a>hci_num_of_cmpltd_pckts_cmplt_evnt</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, hci.o(.text.hci_num_of_cmpltd_pckts_cmplt_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = hci_num_of_cmpltd_pckts_cmplt_evnt &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_form_hdr
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[fc]"></a>hci_send_le_adv_report_pkt</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, hci.o(.text.hci_send_le_adv_report_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = hci_send_le_adv_report_pkt &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[4d3]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hci.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; hci_form_hdr &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_form_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_phy_update_complete_event
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_le_dir_adv_report_pkt
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_le_adv_report_pkt
</UL>

<P><STRONG><a name="[fd]"></a>hci_send_le_dir_adv_report_pkt</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, hci.o(.text.hci_send_le_dir_adv_report_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = hci_send_le_dir_adv_report_pkt &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[fe]"></a>hci_le_conn_update_cmplt_event</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, hci.o(.text.hci_le_conn_update_cmplt_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = hci_le_conn_update_cmplt_event &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[ff]"></a>hci_le_rem_conn_param_req_event</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, hci.o(.text.hci_le_rem_conn_param_req_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = hci_le_rem_conn_param_req_event &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_form_hdr
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[100]"></a>hci_le_data_length_chg_event</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, hci.o(.text.hci_le_data_length_chg_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = hci_le_data_length_chg_event &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[101]"></a>hci_le_phy_update_complete_event</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, hci.o(.text.hci_le_phy_update_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = hci_le_phy_update_complete_event &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[102]"></a>hci_encrpt_chng_evnt</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hci.o(.text.hci_encrpt_chng_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = hci_encrpt_chng_evnt &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[103]"></a>hci_encrpt_key_rfrsh_cmplt_evnt</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, hci.o(.text.hci_encrpt_key_rfrsh_cmplt_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = hci_encrpt_key_rfrsh_cmplt_evnt &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[104]"></a>hci_authn_pyld_tout_exprd_evnt</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hci.o(.text.hci_authn_pyld_tout_exprd_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = hci_authn_pyld_tout_exprd_evnt &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_form_hdr
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[105]"></a>hci_le_long_trm_key_rqst_evnt</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, hci.o(.text.hci_le_long_trm_key_rqst_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = hci_le_long_trm_key_rqst_evnt &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_form_hdr
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[106]"></a>hci_le_chnl_sel_algo_evnt</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, hci.o(.text.hci_le_chnl_sel_algo_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = hci_le_chnl_sel_algo_evnt &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[107]"></a>hci_le_update_clock_accuracy_cmp_evnt</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, hci.o(.text.hci_le_update_clock_accuracy_cmp_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = hci_le_update_clock_accuracy_cmp_evnt &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[108]"></a>hci_le_energy_dctn_cmplt_evnt</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, hci.o(.text.hci_le_energy_dctn_cmplt_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = hci_le_energy_dctn_cmplt_evnt &rArr; get_hci_buffer &rArr; emngr_del_event &rArr; queue_delete_node &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hci_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.rodata.hci_dis_tbl)
</UL>
<P><STRONG><a name="[461]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_intf.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_init
</UL>

<P><STRONG><a name="[4d4]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ll_intf.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_radiative_tx_pwr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_le_read_adv_channel_tx_power
</UL>

<P><STRONG><a name="[49b]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_intf.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_radiative_tx_pwr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_set_conn_tx_power_level
</UL>

<P><STRONG><a name="[4df]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_intf.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_rgstr_hst_cbk_ll_queue_full
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_rgstr_hst_cbk
</UL>

<P><STRONG><a name="[49d]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, event_manager.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event_first
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
</UL>

<P><STRONG><a name="[61d]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, event_manager.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event_first
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
</UL>

<P><STRONG><a name="[448]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, event_manager.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; disable_specific_irq &rArr; ll_sys_disable_specific_irq &rArr; LINKLAYER_PLAT_DisableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_specific_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_remove_conditional_event
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_process_conditional_event
</UL>

<P><STRONG><a name="[623]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, event_manager.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_remove_conditional_event
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_process_conditional_event
</UL>

<P><STRONG><a name="[462]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, event_manager.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; queue_delete &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_remove_conditional_event
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_process_conditional_event
</UL>

<P><STRONG><a name="[5a3]"></a>os_timer_get_current_time</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ll_sw_timer.o(.text.os_timer_get_current_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = os_timer_get_current_time &rArr; get_current_time &rArr; llhwc_slptmr_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_get_earliest_time
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_is_any_near_sw_timer_hg_prio
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerHandler
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer_to_List
</UL>

<P><STRONG><a name="[7a4]"></a>remove_stopped_and_expired_timers</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ll_sw_timer.o(.text.remove_stopped_and_expired_timers))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = remove_stopped_and_expired_timers &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerHandler
</UL>

<P><STRONG><a name="[5a2]"></a>add_timer_to_List</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ll_sw_timer.o(.text.add_timer_to_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = add_timer_to_List &rArr; os_timer_get_current_time &rArr; get_current_time &rArr; llhwc_slptmr_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_get_current_time
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerHandler
</UL>

<P><STRONG><a name="[5a5]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mem_utils.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
</UL>

<P><STRONG><a name="[3ab]"></a>OUTLINED_FUNCTION_45</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_45))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ENCRYPTION_CHANGE_EVENT
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DISCONNECTION_COMPLETE_EVENT
</UL>

<P><STRONG><a name="[1ae]"></a>hci_event</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, api.o(.text.hci_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECB_Indication
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_HARDWARE_ERROR_EVENT
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_READ_PERMIT_REQ_EVENT
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_LIMITED_DISCOVERABLE_EVENT
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_HAL_END_OF_RADIO_ACTIVITY_EVENT
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_CHANNEL_SELECTION_ALGORITHM_EVENT
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_PHY_UPDATE_COMPLETE_EVENT
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_DIRECTED_ADVERTISING_REPORT_EVENT
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ENHANCED_CONNECTION_COMPLETE_EVENT
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LONG_TERM_KEY_REQUEST_EVENT
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_CONNECTION_UPDATE_COMPLETE_EVENT
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ADVERTISING_REPORT_EVENT
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_CONNECTION_COMPLETE_EVENT
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ENCRYPTION_KEY_REFRESH_COMPLETE_EVENT
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_READ_REMOTE_VERSION_INFORMATION_COMPLETE_EVENT
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ENCRYPTION_CHANGE_EVENT
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DISCONNECTION_COMPLETE_EVENT
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_50
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_28
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_34
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_48
</UL>

<P><STRONG><a name="[3b3]"></a>OUTLINED_FUNCTION_53</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_53))
<BR><BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ENHANCED_CONNECTION_COMPLETE_EVENT
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_CONNECTION_COMPLETE_EVENT
</UL>

<P><STRONG><a name="[3bf]"></a>OUTLINED_FUNCTION_48</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_48))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_48 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_GENERATE_DHKEY_COMPLETE_EVENT
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_READ_LOCAL_P256_PUBLIC_KEY_COMPLETE_EVENT
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_READ_REMOTE_FEATURES_PAGE_0_COMPLETE_EVENT
</UL>

<P><STRONG><a name="[3b6]"></a>OUTLINED_FUNCTION_21</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_21))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_DATA_LENGTH_CHANGE_EVENT
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_REMOTE_CONNECTION_PARAMETER_REQUEST_EVENT
</UL>

<P><STRONG><a name="[3b7]"></a>OUTLINED_FUNCTION_26</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_26))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_26 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_DATA_LENGTH_CHANGE_EVENT
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_REMOTE_CONNECTION_PARAMETER_REQUEST_EVENT
</UL>

<P><STRONG><a name="[1b7]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_NOTIFICATION_EXT_EVENT
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_INDICATION_EXT_EVENT
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_PREPARE_WRITE_PERMIT_REQ_EVENT
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_WRITE_PERMIT_REQ_EVENT
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ATTRIBUTE_MODIFIED_EVENT
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_L2CAP_COMMAND_REJECT_EVENT
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_L2CAP_PROC_TIMEOUT_EVENT
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_PROC_COMPLETE_EVENT
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_WARNING_EVENT
</UL>

<P><STRONG><a name="[1b2]"></a>OUTLINED_FUNCTION_43</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_43))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_PAIRING_REQUEST_EVENT
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_PAIRING_COMPLETE_EVENT
</UL>

<P><STRONG><a name="[1ac]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_NOTIFICATION_COMPLETE_EVENT
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_SERVER_CONFIRMATION_EVENT
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_PROC_COMPLETE_EVENT
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_PROC_TIMEOUT_EVENT
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_PAIRING_REQUEST_EVENT
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_PAIRING_COMPLETE_EVENT
</UL>

<P><STRONG><a name="[19a]"></a>OUTLINED_FUNCTION_31</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_31))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_L2CAP_COMMAND_REJECT_EVENT
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_L2CAP_PROC_TIMEOUT_EVENT
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_ADDR_NOT_RESOLVED_EVENT
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_BOND_LOST_EVENT
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_AUTHORIZATION_REQ_EVENT
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_PASS_KEY_REQ_EVENT
</UL>

<P><STRONG><a name="[19b]"></a>OUTLINED_FUNCTION_29</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_29))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_ADDR_NOT_RESOLVED_EVENT
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_BOND_LOST_EVENT
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_AUTHORIZATION_REQ_EVENT
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_PASS_KEY_REQ_EVENT
</UL>

<P><STRONG><a name="[19c]"></a>OUTLINED_FUNCTION_34</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_34))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_34 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_ADDR_NOT_RESOLVED_EVENT
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_BOND_LOST_EVENT
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_AUTHORIZATION_REQ_EVENT
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_PASS_KEY_REQ_EVENT
</UL>

<P><STRONG><a name="[196]"></a>OUTLINED_FUNCTION_30</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_30))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_TX_POOL_AVAILABLE_EVENT
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_ATT_EXCHANGE_MTU_RESP_EVENT
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_L2CAP_CONNECTION_UPDATE_RESP_EVENT
</UL>

<P><STRONG><a name="[197]"></a>OUTLINED_FUNCTION_40</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_40))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_TX_POOL_AVAILABLE_EVENT
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_READ_PERMIT_REQ_EVENT
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_ATT_EXCHANGE_MTU_RESP_EVENT
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_L2CAP_CONNECTION_UPDATE_RESP_EVENT
</UL>

<P><STRONG><a name="[198]"></a>OUTLINED_FUNCTION_28</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_28))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_28 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_TX_POOL_AVAILABLE_EVENT
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_ATT_EXCHANGE_MTU_RESP_EVENT
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_L2CAP_CONNECTION_UPDATE_RESP_EVENT
</UL>

<P><STRONG><a name="[1fe]"></a>OUTLINED_FUNCTION_47</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_47))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_L2CAP_CONNECTION_UPDATE_REQ_EVENT
</UL>

<P><STRONG><a name="[1ff]"></a>OUTLINED_FUNCTION_50</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_50))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_50 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_L2CAP_CONNECTION_UPDATE_REQ_EVENT
</UL>

<P><STRONG><a name="[1d0]"></a>OUTLINED_FUNCTION_23</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_23))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_NOTIFICATION_EXT_EVENT
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_INDICATION_EXT_EVENT
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ATTRIBUTE_MODIFIED_EVENT
</UL>

<P><STRONG><a name="[1d1]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_NOTIFICATION_EXT_EVENT
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_INDICATION_EXT_EVENT
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ATTRIBUTE_MODIFIED_EVENT
</UL>

<P><STRONG><a name="[1d2]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_NOTIFICATION_EXT_EVENT
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_INDICATION_EXT_EVENT
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_PREPARE_WRITE_PERMIT_REQ_EVENT
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_WRITE_PERMIT_REQ_EVENT
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_NOTIFICATION_EVENT
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_INDICATION_EVENT
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ATTRIBUTE_MODIFIED_EVENT
</UL>

<P><STRONG><a name="[1df]"></a>OUTLINED_FUNCTION_22</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_22))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_NOTIFICATION_COMPLETE_EVENT
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_SERVER_CONFIRMATION_EVENT
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_PROC_COMPLETE_EVENT
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_PROC_TIMEOUT_EVENT
</UL>

<P><STRONG><a name="[1da]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_event
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_NOTIFICATION_EVENT
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_INDICATION_EVENT
</UL>

<P><STRONG><a name="[1e2]"></a>OUTLINED_FUNCTION_24</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_24))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_PREPARE_WRITE_PERMIT_REQ_EVENT
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_READ_PERMIT_REQ_EVENT
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_WRITE_PERMIT_REQ_EVENT
</UL>

<P><STRONG><a name="[1e3]"></a>OUTLINED_FUNCTION_25</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_25))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_25 &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_PREPARE_WRITE_PERMIT_REQ_EVENT
</UL>

<P><STRONG><a name="[1d7]"></a>OUTLINED_FUNCTION_44</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_44))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_NOTIFICATION_EVENT
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_INDICATION_EVENT
</UL>

<P><STRONG><a name="[1d8]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_13 &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_NOTIFICATION_EVENT
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_INDICATION_EVENT
</UL>

<P><STRONG><a name="[1d9]"></a>OUTLINED_FUNCTION_61</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, api.o(.text.OUTLINED_FUNCTION_61))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_NOTIFICATION_EVENT
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_INDICATION_EVENT
</UL>

<P><STRONG><a name="[30b]"></a>EVT_GATT_Notif_Generic</STRONG> (Thumb, 208 bytes, Stack size 304 bytes, host_srv_events.o(.text.EVT_GATT_Notif_Generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = EVT_GATT_Notif_Generic &rArr; ACI_GATT_NOTIFICATION_EXT_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Get_Data
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_NOTIFICATION_EXT_EVENT
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_INDICATION_EXT_EVENT
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_GATT_Notification
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_GATT_Indication
</UL>

<P><STRONG><a name="[30c]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, host_srv_events.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_GATT_Notif_Generic
</UL>

<P><STRONG><a name="[3fd]"></a>LECTRL_AllocateACLDataInLL</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, le_ctrl.o(.text.LECTRL_AllocateACLDataInLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LECTRL_AllocateACLDataInLL &rArr; ll_intf_alloc_ll_pkt &rArr; os_shrd_mem_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_alloc_ll_pkt
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_alloc
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_Process
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_SendAclDataFromHostToController
</UL>

<P><STRONG><a name="[40a]"></a>LECTRL_SendAclDataToLL</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, le_ctrl.o(.text.LECTRL_SendAclDataToLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LECTRL_SendAclDataToLL &rArr; ll_intf_acl_data_from_host_to_cntrlr &rArr; conn_mngr_send_pkt &rArr; evnt_schdlr_add_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_acl_data_from_host_to_cntrlr
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Get_Data
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_List_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_Process
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_SendAclDataFromHostToController
</UL>

<P><STRONG><a name="[336]"></a>GAP_Adv_Legacy_Start</STRONG> (Thumb, 536 bytes, Stack size 96 bytes, gap_adv.o(.text.GAP_Adv_Legacy_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = GAP_Adv_Legacy_Start &rArr; HCI_LE_SET_ADVERTISING_ENABLE &rArr; ll_intf_le_set_adv_enable &rArr; non_conn_mngr_adv_enable &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Own_Address
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Legacy_SetData
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_READ_ADVERTISING_PHYSICAL_CHANNEL_TX_POWER
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SET_ADVERTISING_ENABLE
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SET_ADVERTISING_PARAMETERS
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[1a6]"></a>GAP_Adv_Legacy_SetData</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, gap_adv.o(.text.GAP_Adv_Legacy_SetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = GAP_Adv_Legacy_SetData &rArr; HCI_LE_SET_ADVERTISING_DATA &rArr; ll_intf_le_set_adv_data &rArr; non_conn_mngr_set_adv_data &rArr; prvcy_mngr_RPA_Regeneration &rArr; prvcy_mngr_addr_gen &rArr; llhwc_128_encrypt &rArr; llhwc_cmn_crypto &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SET_ADVERTISING_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_DELETE_AD_TYPE
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_UPDATE_ADV_DATA
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Legacy_Start
</UL>

<P><STRONG><a name="[1bb]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gap_adv.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_2
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_DiscParamsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_SET_DISCOVERABLE
</UL>

<P><STRONG><a name="[1bc]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gap_adv.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_SET_DISCOVERABLE
</UL>

<P><STRONG><a name="[1bd]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gap_adv.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; GAP_Adv_Legacy_Start &rArr; HCI_LE_SET_ADVERTISING_ENABLE &rArr; ll_intf_le_set_adv_enable &rArr; non_conn_mngr_adv_enable &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Legacy_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_SET_DISCOVERABLE
</UL>

<P><STRONG><a name="[49f]"></a>GAP_Adv_DiscParamsCheck</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, gap_adv.o(.text.GAP_Adv_DiscParamsCheck))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[1c0]"></a>GAP_Adv_Legacy_Reset_State</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gap_adv.o(.text.GAP_Adv_Legacy_Reset_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GAP_Adv_Legacy_Reset_State &rArr; BLEPLAT_TimerStop &rArr; BLE_TIMER_Stop &rArr; AMM_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GAP_SET_NON_DISCOVERABLE
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Adv_Connection_Complete_Handler
</UL>

<P><STRONG><a name="[344]"></a>GAP_Stop_Scan</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gap_proc.o(.text.GAP_Stop_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = GAP_Stop_Scan &rArr; HCI_LE_SET_SCAN_ENABLE &rArr; ll_intf_le_set_scan_enable &rArr; non_conn_mngr_scan_enable &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SET_SCAN_ENABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Scan_Disc_Proc_Timeout_Cb
</UL>

<P><STRONG><a name="[1cb]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gatt_server.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_Insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ADD_SERVICE
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Db_MemAlloc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Core
</UL>

<P><STRONG><a name="[34b]"></a>GATT_Val_Index</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gatt_server.o(.text.GATT_Val_Index))
<BR><BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Bearer_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Attr_Val
</UL>

<P><STRONG><a name="[1c6]"></a>GATT_Server_Db_Check</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gatt_server.o(.text.GATT_Server_Db_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATT_Server_Db_Check &rArr; ACL_Tx_Pool_Size &rArr; ACL_Available_Blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Tx_Pool_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ADD_SERVICE
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Core
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Desc_Core
</UL>

<P><STRONG><a name="[1cc]"></a>GATT_Notify_Service_Change</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gatt_server.o(.text.GATT_Notify_Service_Change))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Update_For_Service_Change
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ADD_SERVICE
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Core
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Desc_Core
</UL>

<P><STRONG><a name="[1ea]"></a>GATT_Search_Service_Handle</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gatt_server.o(.text.GATT_Search_Service_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GATT_Search_Service_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_UPDATE_CHAR_VALUE
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Core
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Update_Char_Value_Core
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Desc_Core
</UL>

<P><STRONG><a name="[349]"></a>GATT_New_Value</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gatt_server.o(.text.GATT_New_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GATT_New_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Core
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Desc_Core
</UL>

<P><STRONG><a name="[34a]"></a>GATT_Add_Char_Desc_Core</STRONG> (Thumb, 608 bytes, Stack size 128 bytes, gatt_server.o(.text.GATT_Add_Char_Desc_Core))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = GATT_Add_Char_Desc_Core &rArr; GATT_Notify_Service_Change &rArr; GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Search_Handle
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_Remove
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_Size
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIST_Insert
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_New_Value
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Search_Service_Handle
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notify_Service_Change
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Server_Db_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Add_Char_Core
</UL>

<P><STRONG><a name="[1ec]"></a>GATT_Update_Char_Value_Core</STRONG> (Thumb, 824 bytes, Stack size 112 bytes, gatt_server.o(.text.GATT_Update_Char_Value_Core))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Check_Perm
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Notif_Or_Ind
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Notif_Or_Ind
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Search_Handle
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Bearer_Index
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Notification_Complete_Event
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Search_Service_Handle
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Release
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Get_Bearer
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_UPDATE_CHAR_VALUE
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Update_For_Service_Change
</UL>

<P><STRONG><a name="[34e]"></a>GATT_Update_For_Service_Change</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gatt_server.o(.text.GATT_Update_For_Service_Change))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = GATT_Update_For_Service_Change &rArr; GATT_Update_Char_Value_Core &rArr; GATT_Send_Notif_Or_Ind &rArr; GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Update_Char_Value_Core
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Check_For_Service_Change
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notify_Service_Change
</UL>

<P><STRONG><a name="[1c3]"></a>GATT_Set_UUID</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gatt_server.o(.text.GATT_Set_UUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GATT_Set_UUID &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ADD_CHAR
</UL>

<P><STRONG><a name="[36a]"></a>GATT_Send_Notification_Complete_Event</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gatt_server.o(.text.GATT_Send_Notification_Complete_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = GATT_Send_Notification_Complete_Event &rArr; EVT_aci_gatt_notification_complete &rArr; ACI_GATT_NOTIFICATION_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gatt_notification_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Notif_Or_Ind
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Update_Char_Value_Core
</UL>

<P><STRONG><a name="[370]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gatt_server.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GATT_New_PDU &rArr; ACL_New &rArr; ACL_Alloc &rArr; ACL_Available_Blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_New_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Update_Char_Value_Core
</UL>

<P><STRONG><a name="[365]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gatt_server.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Permit_Resp
</UL>

<P><STRONG><a name="[1ce]"></a>GATT_Read_Permit_Resp</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, gatt_server.o(.text.GATT_Read_Permit_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = GATT_Read_Permit_Resp &rArr; ATT_Build_Read_By_Type_Rsp &rArr; GATT_Read_Multi_Permit_Req_Event &rArr; EVT_aci_gatt_read_multi_permit_req &rArr; ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Multi_Rsp
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Blob_Rsp
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Rsp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_By_Type_Rsp
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Error_Rsp
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Release
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_New_PDU
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Get_Bearer
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_List_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACI_GATT_ALLOW_READ
</UL>

<P><STRONG><a name="[351]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gatt_server_sdb.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Compute_Database_Hash
</UL>

<P><STRONG><a name="[352]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gatt_server_sdb.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; GATT_Store &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Store
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Compute_Database_Hash
</UL>

<P><STRONG><a name="[82]"></a>GATT_Store</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gatt_server_sdb.o(.text.GATT_Store))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GATT_Store &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Store_Server_Database
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gatt_server_sdb.o(.text.GATT_Store_Server_Database)
<LI> gatt_server_sdb.o(.text.GATT_Compute_Database_Hash)
</UL>
<P><STRONG><a name="[357]"></a>GATT_Fetch_Handle</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, gatt_server_sdb.o(.text.GATT_Fetch_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GATT_Fetch_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Get_Change_Vs_Server_Database
</UL>

<P><STRONG><a name="[36c]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gatt_server_sdb.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Store_Server_Database
</UL>

<P><STRONG><a name="[36d]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gatt_server_sdb.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Store_Server_Database
</UL>

<P><STRONG><a name="[464]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdb.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; NVM_Discard &rArr; NVMCB_Store &rArr; BLEPLAT_NvmStore &rArr; APP_BLE_HostNvmStore &rArr; SNVMA_Write &rArr; StartFlashWrite &rArr; FM_Write &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Discard
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Write_Gatt_Data
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Write_Sec_Record
</UL>

<P><STRONG><a name="[512]"></a>SDB_Find_Gatt_Record</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, sdb.o(.text.SDB_Find_Gatt_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDB_Find_Gatt_Record &rArr; NVM_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Get
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Read_Gatt_Data
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Write_Gatt_Data
</UL>

<P><STRONG><a name="[44a]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdb.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; NVM_Add &rArr; NVMCB_Store &rArr; BLEPLAT_NvmStore &rArr; APP_BLE_HostNvmStore &rArr; SNVMA_Write &rArr; StartFlashWrite &rArr; FM_Write &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVM_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Write_Sec_Record
</UL>

<P><STRONG><a name="[516]"></a>SDB_Warning_Event</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sdb.o(.text.SDB_Warning_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_warning
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Write_Gatt_Data
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Write_Sec_Record
</UL>

<P><STRONG><a name="[44b]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, smp.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Get_Remote_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_L2cap_Data_Handler
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Forget_Device
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Save_GATT_Data
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Retrieve_GATT_Data
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Get_Sec_Status
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Disconnection_Complete_Handler
</UL>

<P><STRONG><a name="[537]"></a>SMP_Is_Bonded</STRONG> (Thumb, 44 bytes, Stack size 88 bytes, smp.o(.text.SMP_Is_Bonded))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SMP_Is_Bonded &rArr; SDB_Read_Sec_Record &rArr; RndAddr_Check_Resolvable_Address &rArr; RndAddr_Calculate_Address_Hash &rArr; BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Read_Sec_Record
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Save_GATT_Data
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Retrieve_GATT_Data
</UL>

<P><STRONG><a name="[532]"></a>SMP_Generate_Local_OOB_SC_Random</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, smp_oob.o(.text.SMP_Generate_Local_OOB_SC_Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SMP_Generate_Local_OOB_SC_Random &rArr; BLEPLAT_RngGet &rArr; HW_RNG_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_RngGet
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Init_OOB_SC
</UL>

<P><STRONG><a name="[54d]"></a>SMP_Reset_Remote_Device</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, smp_pair.o(.text.SMP_Reset_Remote_Device))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SMP_Reset_Remote_Device &rArr; SMP_Flush_Rx_Packets &rArr; ACL_Release &rArr; ACL_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Flush_Rx_Packets
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[52d]"></a>SMP_Stop_Timer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, smp_pair.o(.text.SMP_Stop_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SMP_Stop_Timer &rArr; BLEPLAT_TimerStop &rArr; BLE_TIMER_Stop &rArr; AMM_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Encryption_Update_Handler
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Failed
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Success
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Disconnect
</UL>

<P><STRONG><a name="[52b]"></a>SMP_Crop_Key</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, smp_pair.o(.text.SMP_Crop_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SMP_Crop_Key &rArr; ble_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Start_Encryption
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[4c1]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, smp_pair.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Success
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[4e0]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, smp_pair.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; SMP_New_PDU &rArr; ACL_New &rArr; ACL_Alloc &rArr; ACL_Available_Blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_New_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Send_Pairing_Failed
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Request
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Random
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SR_Send_Pairing_Confirm
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Confirm
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[541]"></a>SMP_MI_Enable_Encryption</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, smp_pair.o(.text.SMP_MI_Enable_Encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = SMP_MI_Enable_Encryption &rArr; SMP_Send_Pairing_Failed &rArr; SMP_Pairing_Failed &rArr; EVT_aci_gap_pairing_complete &rArr; ACI_GAP_PAIRING_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Send_Pairing_Failed
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Loop
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ENABLE_ENCRYPTION
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Start_Encryption
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Request
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[538]"></a>SMP_Key_Dist_Start</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, smp_pair.o(.text.SMP_Key_Dist_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = SMP_Key_Dist_Start &rArr; SMP_Pairing_Success &rArr; SDB_Write_Sec_Record &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Success
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Key_Dist_Peer_Keys_To_receive
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Loop
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[4a0]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, smp_pair.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; SMP_Send_PDU &rArr; L2C_Send_Data &rArr; LECTRL_SendAclDataFromHostToController &rArr; LECTRL_SendAclDataToLL &rArr; ll_intf_acl_data_from_host_to_cntrlr &rArr; conn_mngr_send_pkt &rArr; evnt_schdlr_add_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Send_PDU
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Request
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Random
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SR_Send_Pairing_Confirm
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Confirm
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[542]"></a>SMP_MI_Send_Pairing_Confirm</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, smp_pair.o(.text.SMP_MI_Send_Pairing_Confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SMP_MI_Send_Pairing_Confirm &rArr; SMP_SC_Compute_Confirm_Value &rArr; SMA_SC_Gen_f4_Confirm &rArr; SMA_Cmac &rArr; BLEPLAT_AesCmacCompute &rArr; BAES_CmacCompute
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Compute_Confirm_Value
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_LP_Compute_Confirm_Value
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[54f]"></a>SMP_SR_Send_Pairing_Confirm</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, smp_pair.o(.text.SMP_SR_Send_Pairing_Confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SMP_SR_Send_Pairing_Confirm &rArr; SMP_SC_Compute_Confirm_Value &rArr; SMA_SC_Gen_f4_Confirm &rArr; SMA_Cmac &rArr; BLEPLAT_AesCmacCompute &rArr; BAES_CmacCompute
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Compute_Confirm_Value
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_LP_Compute_Confirm_Value
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[544]"></a>SMP_MI_Send_Pairing_Random</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, smp_pair.o(.text.SMP_MI_Send_Pairing_Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SMP_MI_Send_Pairing_Random &rArr; OUTLINED_FUNCTION_2 &rArr; SMP_Send_PDU &rArr; L2C_Send_Data &rArr; LECTRL_SendAclDataFromHostToController &rArr; LECTRL_SendAclDataToLL &rArr; ll_intf_acl_data_from_host_to_cntrlr &rArr; conn_mngr_send_pkt &rArr; evnt_schdlr_add_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Process
</UL>

<P><STRONG><a name="[539]"></a>SMP_Key_Dist_Peer_Keys_To_receive</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, smp_pair.o(.text.SMP_Key_Dist_Peer_Keys_To_receive))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Key_Dist_Start
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Key_Dist_Tx_Complete_Handler
</UL>

<P><STRONG><a name="[53b]"></a>SMP_Pairing_Success</STRONG> (Thumb, 352 bytes, Stack size 96 bytes, smp_pair.o(.text.SMP_Pairing_Success))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = SMP_Pairing_Success &rArr; SDB_Write_Sec_Record &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Clear_Rep_Attempts_Timeout_Status
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Update_Pairing_Stats
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Stop_Timer
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Clear_Remote_OOB_Data
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Loop
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Write_Sec_Record
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Key_Dist_Start
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Key_Dist_Tx_Complete_Handler
</UL>

<P><STRONG><a name="[52f]"></a>SMP_Flush_Rx_Packets</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, smp_pair.o(.text.SMP_Flush_Rx_Packets))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SMP_Flush_Rx_Packets &rArr; ACL_Release &rArr; ACL_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Release
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_List_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Failed
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Reset_Remote_Device
</UL>

<P><STRONG><a name="[553]"></a>SMP_Check_Rx_Pairing_Parameters</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, smp_pair.o(.text.SMP_Check_Rx_Pairing_Parameters))
<BR><BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[554]"></a>SMP_Get_Rx_Pairing_Parameters</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, smp_pair.o(.text.SMP_Get_Rx_Pairing_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SMP_Get_Rx_Pairing_Parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[555]"></a>SMP_Set_Key_Generation_Method</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, smp_pair.o(.text.SMP_Set_Key_Generation_Method))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SMP_Set_Key_Generation_Method &rArr; SMP_Init_OOB_SC &rArr; SMP_Generate_Local_OOB_SC_Random &rArr; BLEPLAT_RngGet &rArr; HW_RNG_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Init_OOB_SC
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[533]"></a>SMP_Generate_Pass_Key_Req_Event</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smp_pair.o(.text.SMP_Generate_Pass_Key_Req_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = SMP_Generate_Pass_Key_Req_Event &rArr; EVT_aci_gap_pass_key_req &rArr; ACI_GAP_PASS_KEY_REQ_EVENT &rArr; OUTLINED_FUNCTION_34 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_pass_key_req
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[535]"></a>SMP_Handle_Pairing_Request_Event</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, smp_pair.o(.text.SMP_Handle_Pairing_Request_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = SMP_Handle_Pairing_Request_Event &rArr; EVT_aci_gap_pairing_request &rArr; ACI_GAP_PAIRING_REQUEST_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_pairing_request
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Request
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[44c]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, smp_pair.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; ACL_Get_Data &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Get_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[53e]"></a>SMP_LP_Compute_Confirm_Value</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, smp_pair.o(.text.SMP_LP_Compute_Confirm_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SMP_LP_Compute_Confirm_Value &rArr; SMA_Compute_Confirm_Value &rArr; BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Compute_Confirm_Value
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_LP_Get_TK
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SR_Send_Pairing_Confirm
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Confirm
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[4d5]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, smp_pair.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; ble_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[548]"></a>SMP_Reset_Timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, smp_pair.o(.text.SMP_Reset_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SMP_Reset_Timer &rArr; BLEPLAT_TimerStart &rArr; BLE_TIMER_Start &rArr; AMM_Alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_TimerStop
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_TimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Send_PDU
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Start_Encryption
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[545]"></a>SMP_MI_Send_Pairing_Request</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, smp_pair.o(.text.SMP_MI_Send_Pairing_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = SMP_MI_Send_Pairing_Request &rArr; SMP_MI_Enable_Encryption &rArr; SMP_Send_Pairing_Failed &rArr; SMP_Pairing_Failed &rArr; EVT_aci_gap_pairing_complete &rArr; ACI_GAP_PAIRING_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Build_Pairing_Packet
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Handle_Pairing_Request_Event
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Enable_Encryption
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Check_Remote_OOB_Data_Presence
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Get_Remote_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[54a]"></a>SMP_Pairing_Failed</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, smp_pair.o(.text.SMP_Pairing_Failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = SMP_Pairing_Failed &rArr; EVT_aci_gap_pairing_complete &rArr; ACI_GAP_PAIRING_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gap_pairing_complete
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Rep_Attempts_Protection
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Update_Pairing_Stats
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Flush_Rx_Packets
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Stop_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Send_Pairing_Failed
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[540]"></a>SMP_LP_Generate_STK</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, smp_pair.o(.text.SMP_LP_Generate_STK))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SMP_LP_Generate_STK &rArr; SMA_Generate_STK &rArr; BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_STK
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_LP_Get_TK
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[546]"></a>SMP_Build_Pairing_Packet</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, smp_pair.o(.text.SMP_Build_Pairing_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SMP_Build_Pairing_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Request
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Rx_Packet
</UL>

<P><STRONG><a name="[52e]"></a>SMP_Update_Pairing_Stats</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, smp_pair.o(.text.SMP_Update_Pairing_Stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SMP_Update_Pairing_Stats &rArr; SMP_SC_Pairing_End &rArr; ble_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Pairing_End
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Timeout_Cb
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Encryption_Update_Handler
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Failed
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Success
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Pairing_Disconnect
</UL>

<P><STRONG><a name="[465]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, smp_pair.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; ACL_Set_Data &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Set_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Random
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SR_Send_Pairing_Confirm
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_Send_Pairing_Confirm
</UL>

<P><STRONG><a name="[53f]"></a>SMP_LP_Get_TK</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, smp_pair.o(.text.SMP_LP_Get_TK))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SMP_LP_Get_TK &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_LP_Generate_STK
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_LP_Compute_Confirm_Value
</UL>

<P><STRONG><a name="[560]"></a>SMP_Is_Another_SC_Pairing_Ongoing</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, smp_sc.o(.text.SMP_Is_Another_SC_Pairing_Ongoing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SMP_Is_Another_SC_Pairing_Ongoing
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Pairing_End
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Pairing_Start
</UL>

<P><STRONG><a name="[561]"></a>SMP_SC_Send_Pairing_Public_Key</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, smp_sc.o(.text.SMP_SC_Send_Pairing_Public_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SMP_SC_Send_Pairing_Public_Key &rArr; SMP_Send_PDU &rArr; L2C_Send_Data &rArr; LECTRL_SendAclDataFromHostToController &rArr; LECTRL_SendAclDataToLL &rArr; ll_intf_acl_data_from_host_to_cntrlr &rArr; conn_mngr_send_pkt &rArr; evnt_schdlr_add_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Send_PDU
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_New_PDU
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Set_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Public_Key_Exchanged
</UL>

<P><STRONG><a name="[55b]"></a>SMP_SC_Compute_DHKey_Check</STRONG> (Thumb, 252 bytes, Stack size 88 bytes, smp_sc.o(.text.SMP_SC_Compute_DHKey_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SMP_SC_Compute_DHKey_Check &rArr; SMA_SC_Gen_f6_Check_Val &rArr; SMA_Cmac &rArr; BLEPLAT_AesCmacCompute &rArr; BAES_CmacCompute
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f6_Check_Val
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Phase_2AS2_Set_Addresses
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Get_OOB_SC_Random
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Pairing_DHKey_Check_Rx_Handler
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Phase_2_Process
</UL>

<P><STRONG><a name="[55e]"></a>SMP_SC_Send_Pairing_DHKey_Check</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, smp_sc.o(.text.SMP_SC_Send_Pairing_DHKey_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SMP_SC_Send_Pairing_DHKey_Check &rArr; SMP_Send_PDU &rArr; L2C_Send_Data &rArr; LECTRL_SendAclDataFromHostToController &rArr; LECTRL_SendAclDataToLL &rArr; ll_intf_acl_data_from_host_to_cntrlr &rArr; conn_mngr_send_pkt &rArr; evnt_schdlr_add_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Send_PDU
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_New_PDU
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Set_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Pairing_DHKey_Check_Rx_Handler
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Phase_2_Process
</UL>

<P><STRONG><a name="[55c]"></a>SMP_SC_Phase_2AS2_Set_Addresses</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, smp_sc.o(.text.SMP_SC_Phase_2AS2_Set_Addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SMP_SC_Phase_2AS2_Set_Addresses &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Compute_DHKey_Check
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_SC_Phase_2_Process
</UL>

<P><STRONG><a name="[44d]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, conn_mngr.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_get_link_status
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_set_conn_tx_power_level
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_send_pkt
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_update_ststic
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_start_connection
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_alloc_handle
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_process_evnt_clbk
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_slave_start_connection
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_sprvsn_timer_custom_set
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_sprvsn_timer_set
</UL>

<P><STRONG><a name="[b6]"></a>conn_mngr_process_evnt_clbk</STRONG> (Thumb, 836 bytes, Stack size 56 bytes, conn_mngr.o(.text.conn_mngr_process_evnt_clbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = conn_mngr_process_evnt_clbk &rArr; conn_mngr_disconnect &rArr; conn_mngr_free_handle &rArr; evnt_schdlr_unrgstr_evnt &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_updt_conn_evnt_durn
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop_free
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_chnl_map_per_connection
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_calc_num_of_used_data_chnls
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_mngr_update_state
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_req
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_get_ping_timeout_value
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_send_le_phy_update_complete_event
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_util_is_connect_setup
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_recalculate_instant
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mngr.o(.text.conn_mngr_init)
</UL>
<P><STRONG><a name="[b7]"></a>conn_mngr_updt_conn_param_evnt_clbk</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, conn_mngr.o(.text.conn_mngr_updt_conn_param_evnt_clbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = conn_mngr_updt_conn_param_evnt_clbk &rArr; llcp_update_param_req &rArr; llcp_update_conn_param &rArr; OUTLINED_FUNCTION_5 &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_param_req
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_calc_win_offset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mngr.o(.text.conn_mngr_init)
</UL>
<P><STRONG><a name="[4d6]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, conn_mngr.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; conn_mngr_sprvsn_timer_set &rArr; os_timer_set &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_sprvsn_timer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_error_cbk
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_process_evnt_clbk
</UL>

<P><STRONG><a name="[5e9]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, conn_mngr.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_process_evnt_clbk
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_send_inst_cntrl_hci_evnt
</UL>

<P><STRONG><a name="[5d5]"></a>conn_mngr_free_all_timers</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, conn_mngr.o(.text.conn_mngr_free_all_timers))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = conn_mngr_free_all_timers &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_reset
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_free_handle
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
</UL>

<P><STRONG><a name="[5d0]"></a>conn_mngr_alloc_handle</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, conn_mngr.o(.text.conn_mngr_alloc_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = conn_mngr_alloc_handle &rArr; os_timer_create &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_le_feature_info
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_alloc
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_slave_start_connection
</UL>

<P><STRONG><a name="[4e2]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, conn_mngr.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_slave_start_connection
</UL>

<P><STRONG><a name="[b2]"></a>conn_mngr_post_timer_evnt_clbk</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, conn_mngr.o(.text.conn_mngr_post_timer_evnt_clbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = conn_mngr_post_timer_evnt_clbk &rArr; emngr_post_event &rArr; queue_enqueue &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mngr.o(.text.conn_mngr_alloc_handle)
</UL>
<P><STRONG><a name="[5f4]"></a>conn_mngr_start_connection</STRONG> (Thumb, 368 bytes, Stack size 88 bytes, conn_mngr.o(.text.conn_mngr_start_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = conn_mngr_start_connection &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_error_cbk_evnt_cmplt
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_rgstr_evnt
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_is_in_augmented_mode
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_set
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_init_acl
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_edit_indicators
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_ch_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_slave_start_connection
</UL>

<P><STRONG><a name="[500]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, conn_mngr.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; prvcy_mngr_srch_fw_reslvng_list &rArr; ble_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_srch_fw_reslvng_list
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_start_connection
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
</UL>

<P><STRONG><a name="[4e8]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, conn_mngr.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; llhwc_lst_search &rArr; llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_start_connection
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
</UL>

<P><STRONG><a name="[b8]"></a>conn_mngr_pkt_transmited_received_cbk</STRONG> (Thumb, 788 bytes, Stack size 56 bytes, conn_mngr.o(.text.conn_mngr_pkt_transmited_received_cbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = conn_mngr_pkt_transmited_received_cbk &rArr; llcp_process_pkt &rArr; llcp_pkt_received &rArr;  llcp_pkt_received (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_clock_accuracy_req
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_version
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_set
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buff_hdr
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_evnt_updtd
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_mngr_get_state_type
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_re_exec_host_control
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_process_pkt
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_check_update_prcdur
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_chnl_map_per_connection
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_get_ping_timeout_value
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_send_inst_cntrl_hci_evnt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mngr.o(.text.conn_mngr_start_connection)
</UL>
<P><STRONG><a name="[b9]"></a>conn_mngr_error_cbk</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, conn_mngr.o(.text.conn_mngr_error_cbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = conn_mngr_error_cbk &rArr; OUTLINED_FUNCTION_3 &rArr; evnt_schdlr_conn_params_updtd &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_set
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_evnt_updtd
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_mngr_get_state_type
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_send_inst_cntrl_hci_evnt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conn_mngr.o(.text.conn_mngr_start_connection)
</UL>
<P><STRONG><a name="[4f2]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, conn_mngr.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
</UL>

<P><STRONG><a name="[5da]"></a>conn_mngr_send_inst_cntrl_hci_evnt</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, conn_mngr.o(.text.conn_mngr_send_inst_cntrl_hci_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = conn_mngr_send_inst_cntrl_hci_evnt &rArr; OUTLINED_FUNCTION_1 &rArr; conn_mngr_send_le_phy_update_complete_event
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_error_cbk
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
</UL>

<P><STRONG><a name="[477]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, conn_mngr.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = OUTLINED_FUNCTION_10 &rArr; llcp_process_pkt &rArr; llcp_pkt_received &rArr;  llcp_pkt_received (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_process_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
</UL>

<P><STRONG><a name="[4f8]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, conn_mngr.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; state_mngr_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_mngr_update_state
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_error_cbk
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
</UL>

<P><STRONG><a name="[4c2]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, conn_mngr.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; evnt_schdlr_conn_params_updtd &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_conn_params_updtd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_error_cbk
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_pkt_transmited_received_cbk
</UL>

<P><STRONG><a name="[466]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, conn_mngr.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; conn_mngr_send_le_phy_update_complete_event
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_send_le_phy_update_complete_event
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_send_inst_cntrl_hci_evnt
</UL>

<P><STRONG><a name="[44e]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, database.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_advertising_channel_tx_power
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_set_bd_address
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_set_random_address
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_src_address
</UL>

<P><STRONG><a name="[468]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, database.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_slp_clk_accuracy
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_local_chnl_classification
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_le_feature_info
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_local_vrsn_info
</UL>

<P><STRONG><a name="[4a2]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, database.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_le_feature_info
</UL>

<P><STRONG><a name="[4c4]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, evnt_utils.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; os_rcrsv_mutex_wait &rArr; LINKLAYER_PLAT_DisableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_enqueue
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_dequeue
</UL>

<P><STRONG><a name="[4a3]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, evnt_utils.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_dequeue
</UL>

<P><STRONG><a name="[44f]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, evnt_utils.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pkt_data
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_reset_sw_overflow
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_master_conn_timers
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_slave_conn_timers
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_validate_and_update_swto_remaining_time
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_cal_conn_eff_rx_time
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_set_slave_conn_timers
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_util_is_connect_setup
</UL>

<P><STRONG><a name="[469]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, evnt_utils.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; llhwc_get_hw_setup_time &rArr; llhwc_get_hw_phy_latency
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_hw_setup_time
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_slave_conn_timers
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_set_slave_conn_timers
</UL>

<P><STRONG><a name="[4e3]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, evnt_utils.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_calc_adv_max_dur
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_calc_conn_tx_rx_durn_per_pkt
</UL>

<P><STRONG><a name="[4d8]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, evnt_utils.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; os_rcrsv_mutex_wait &rArr; LINKLAYER_PLAT_DisableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_insert_empty_frst
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_get_frst_pkt
</UL>

<P><STRONG><a name="[4ba]"></a>OUTLINED_FUNCTION_26</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_26))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OUTLINED_FUNCTION_26 &rArr; utils_calc_num_of_used_data_chnls &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_calc_num_of_used_data_chnls
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_chnl_map_received
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_set_req_chnls_in_min_chnls_prcdr
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_check_update_prcdur
</UL>

<P><STRONG><a name="[6f5]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_clock_accuracy_req
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_le_set_phy_cmd
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_param_req
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_features
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_encryption_req
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_chnl_map_per_connection
</UL>

<P><STRONG><a name="[70a]"></a>OUTLINED_FUNCTION_24</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_24))
<BR><BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_le_set_phy_cmd
</UL>

<P><STRONG><a name="[47a]"></a>llcp_cntrl_pkt_init</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, llcp_mngr.o(.text.llcp_cntrl_pkt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_add_ctrl_pkt
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop_free
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_form_cntrl_pdu
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_data_packet
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_clock_accuracy_req
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_le_set_phy_cmd
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_param_req
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pram_ngtv_rply
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_encryption_req
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_disconnect
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_req_received
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feature_exchange_init
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_version_exchange_init
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_data_length_init
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_check_update_prcdur
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_req
</UL>

<P><STRONG><a name="[46b]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_instant_ctrl_init
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_init
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
</UL>

<P><STRONG><a name="[4d9]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_init
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_re_exec_host_control
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_process_pkt
</UL>

<P><STRONG><a name="[6f8]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Called By]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pram_ngtv_rply
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pram_pstv_rply
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_conn_param_received
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
</UL>

<P><STRONG><a name="[499]"></a>OUTLINED_FUNCTION_19</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_19))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_rsp_received
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
</UL>

<P><STRONG><a name="[cc]"></a>llcp_post_timer_evnt_clbk</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, llcp_mngr.o(.text.llcp_post_timer_evnt_clbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = llcp_post_timer_evnt_clbk &rArr; emngr_post_event &rArr; queue_enqueue &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
</UL>
<BR>[Address Reference Count : 3]<UL><LI> llcp_mngr.o(.text.llcp_cntrl_pkt_init)
<LI> llcp_mngr.o(.text.llcp_instant_ctrl_init)
<LI> llcp_mngr.o(.text.llcp_pkt_received)
</UL>
<P><STRONG><a name="[6f9]"></a>llcp_data_length_init</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, llcp_mngr.o(.text.llcp_data_length_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = llcp_data_length_init &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_data_length_update
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_data_length_update_received
</UL>

<P><STRONG><a name="[4fa]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop_free
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_features_received
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_version_received
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_received
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_data_length_update_received
</UL>

<P><STRONG><a name="[6fc]"></a>OUTLINED_FUNCTION_27</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_27))
<BR><BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_conn_param
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_version_received
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_data_length_update_received
</UL>

<P><STRONG><a name="[705]"></a>OUTLINED_FUNCTION_21</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_21))
<BR><BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_features
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pram_pstv_rply
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_encryption_req
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_conn_param
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_features_received
</UL>

<P><STRONG><a name="[481]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_11 &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_encryption_req
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_features_received
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_received
</UL>

<P><STRONG><a name="[483]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_12 &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_encryption_req
</UL>

<P><STRONG><a name="[490]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_15 &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_param_req
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pram_pstv_rply
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_encryption_req
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_encryption
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ll_phy_update_ind
</UL>

<P><STRONG><a name="[502]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_encryption_req
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_received
</UL>

<P><STRONG><a name="[495]"></a>OUTLINED_FUNCTION_18</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_18))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_18 &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_received
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_rsp_received
</UL>

<P><STRONG><a name="[6f6]"></a>llcp_cntrl_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llcp_mngr.o(.text.llcp_cntrl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = llcp_cntrl_init &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_param_req_received
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_received
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[4e4]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pram_pstv_rply
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_encryption
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_conn_param
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_received
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_received
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ll_phy_update_ind
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[479]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = OUTLINED_FUNCTION_10 &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_req_lng_trm_key
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_check_update_prcdur
</UL>

<P><STRONG><a name="[723]"></a>llcp_version_exchange_init</STRONG> (Thumb, 46 bytes, Stack size 72 bytes, llcp_mngr.o(.text.llcp_version_exchange_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = llcp_version_exchange_init &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_local_vrsn_info
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_version
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_version_received
</UL>

<P><STRONG><a name="[4a4]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; emngr_post_event &rArr; queue_enqueue &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_features
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_features_received
</UL>

<P><STRONG><a name="[707]"></a>llcp_feature_exchange_init</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, llcp_mngr.o(.text.llcp_feature_exchange_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = llcp_feature_exchange_init &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_le_feature_info
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_features
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_features_received
</UL>

<P><STRONG><a name="[cd]"></a>llcp_mngr_termination_recevied_clbk</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, llcp_mngr.o(.text.llcp_mngr_termination_recevied_clbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = llcp_mngr_termination_recevied_clbk &rArr; conn_mngr_disconnect &rArr; conn_mngr_free_handle &rArr; evnt_schdlr_unrgstr_evnt &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buff_hdr
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llcp_mngr.o(.text.llcp_disconnect_received)
</UL>
<P><STRONG><a name="[6f1]"></a>llcp_get_instant_time</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, llcp_mngr.o(.text.llcp_get_instant_time))
<BR><BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_chnl_map_received
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_conn_param_received
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_check_update_prcdur
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_recalculate_instant
</UL>

<P><STRONG><a name="[4b1]"></a>llcp_update_eff_max_tx_time</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, llcp_mngr.o(.text.llcp_update_eff_max_tx_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llcp_update_eff_max_tx_time
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_conn_param
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_20
</UL>

<P><STRONG><a name="[708]"></a>llcp_instant_ctrl_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, llcp_mngr.o(.text.llcp_instant_ctrl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = llcp_instant_ctrl_init &rArr; os_timer_create &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_chnl_map_received
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_conn_param_received
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_conn_param
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ll_phy_update_ind
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_chnl_map_per_connection
</UL>

<P><STRONG><a name="[4b0]"></a>OUTLINED_FUNCTION_20</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_20))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_20 &rArr; llcp_update_eff_max_tx_time
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_eff_max_tx_time
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_param_req
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pram_pstv_rply
</UL>

<P><STRONG><a name="[720]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_process_pkt
</UL>

<P><STRONG><a name="[70e]"></a>llcp_pkt_received</STRONG> (Thumb, 2552 bytes, Stack size 128 bytes, llcp_mngr.o(.text.llcp_pkt_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + In Cycle
<LI>Call Chain = llcp_pkt_received &rArr;  llcp_pkt_received (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_get_slp_clk_accuracy
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pram_pstv_rply
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_send_pndng_data_pkt
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop_free
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buff_hdr
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_parse_data_cntrl
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_chnl_map_received
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_param_req_received
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_conn_param_received
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_conn_param
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_disconnect_received
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_features_received
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_read_remote_version_received
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_received
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_req_received
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_received
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_rsp_received
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_data_length_update_received
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_25
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_clk_acc_rsp_recieved
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_clk_acc_updt_notification
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ll_phy_update_ind
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_phy_selection
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_instant_ctrl_init
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_get_instant_time
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_init
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_17
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_cntrl_pkt_init
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_26
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_le_get_default_phy_cmd
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_update_chnl_map_per_connection
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_get_ping_timeout_value
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_send_le_phy_update_complete_event
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_disconnect
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_recalculate_instant
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_process_pkt
</UL>

<P><STRONG><a name="[711]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[713]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[714]"></a>llcp_phy_selection</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, llcp_mngr.o(.text.llcp_phy_selection))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llcp_phy_selection
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[70b]"></a>llcp_ll_phy_update_ind</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, llcp_mngr.o(.text.llcp_ll_phy_update_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = llcp_ll_phy_update_ind &rArr; OUTLINED_FUNCTION_5 &rArr; llcp_cntrl_pkt_init &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop_free
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_instant_ctrl_init
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_send_le_phy_update_complete_event
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[450]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop_free
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[717]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[6f4]"></a>llcp_clk_acc_updt_notification</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, llcp_mngr.o(.text.llcp_clk_acc_updt_notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llcp_clk_acc_updt_notification
</UL>
<BR>[Called By]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_clk_acc_rsp_recieved
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[6f3]"></a>llcp_clk_acc_rsp_recieved</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, llcp_mngr.o(.text.llcp_clk_acc_rsp_recieved))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = llcp_clk_acc_rsp_recieved &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop_free
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_clk_acc_updt_notification
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_update_local_clk_acc
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[71b]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[71c]"></a>OUTLINED_FUNCTION_25</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_25))
<BR><BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[4b6]"></a>OUTLINED_FUNCTION_23</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_23))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OUTLINED_FUNCTION_23 &rArr; os_timer_create &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[71d]"></a>OUTLINED_FUNCTION_22</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llcp_mngr.o(.text.OUTLINED_FUNCTION_22))
<BR><BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pkt_received
</UL>

<P><STRONG><a name="[728]"></a>OUTLINED_FUNCTION_22</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_22))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_ble_wait_for_evnt_on_air
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
</UL>

<P><STRONG><a name="[4be]"></a>OUTLINED_FUNCTION_29</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_29))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_29 &rArr; llhwc_polling
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stp_dtm
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_ble_wait_for_evnt_on_air
</UL>

<P><STRONG><a name="[d4]"></a>llhwc_hg_isr</STRONG> (Thumb, 596 bytes, Stack size 72 bytes, llhwc.o(.text.llhwc_hg_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = llhwc_hg_isr &rArr; non_conn_mngr_interrupt &rArr; llhwc_lst_search &rArr; llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_delay_us
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_deactivate_scan_req
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_interrupt
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_master_conn_params
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_sm_done_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_ble_wait_for_evnt_on_air
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llhwc.o(.text.llhwc_init)
</UL>
<P><STRONG><a name="[d5]"></a>llhwc_lw_isr</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, llhwc.o(.text.llhwc_lw_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = llhwc_lw_isr &rArr; llhwc_sm_done_isr &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_handle_event
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_get_handle_events
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_control_aclk
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_cmp_raw_reading
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_set_prdc_clbr_exce_state
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_strt_stp
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_sm_done_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stp_dtm
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_ble_wait_for_evnt_on_air
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llhwc.o(.text.llhwc_init)
</UL>
<P><STRONG><a name="[759]"></a>llhwc_sm_done_isr</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, llhwc.o(.text.llhwc_sm_done_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = llhwc_sm_done_isr &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_control_aclk
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pta_ble_event_complete
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_strt_stp
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lw_isr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_hg_isr
</UL>

<P><STRONG><a name="[4a6]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stp_dtm
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_dtm_curr_mode
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_done
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_adv_done
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_sm_done_isr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lw_isr
</UL>

<P><STRONG><a name="[761]"></a>llhwc_updt_lst_ofsts</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, llhwc.o(.text.llhwc_updt_lst_ofsts))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_control_aclk
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_is_dp_slp_enabled
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
</UL>
<BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_reset
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_recover_from_dp_slp
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
</UL>

<P><STRONG><a name="[496]"></a>OUTLINED_FUNCTION_18</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_18))
<BR><BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stp_dtm
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_updt_lst_ofsts
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
</UL>

<P><STRONG><a name="[503]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; llhwc_polling
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_ch_idx_algo_2
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
</UL>

<P><STRONG><a name="[452]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_prdc_clbr_deinit
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
</UL>

<P><STRONG><a name="[4b8]"></a>OUTLINED_FUNCTION_23</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_23))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_23 &rArr; llhwc_cmn_set_phy &rArr; OUTLINED_FUNCTION_2 &rArr; llhwc_phy_get_ltncy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_phy
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_switch_rate
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
</UL>

<P><STRONG><a name="[760]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
</UL>

<P><STRONG><a name="[4bc]"></a>OUTLINED_FUNCTION_26</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_26))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OUTLINED_FUNCTION_26 &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_control_aclk
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
</UL>

<P><STRONG><a name="[762]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
</UL>

<P><STRONG><a name="[4ea]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_adv_param
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_init_param
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
</UL>

<P><STRONG><a name="[75e]"></a>llhwc_init_conn_empty_pkts</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, llhwc.o(.text.llhwc_init_conn_empty_pkts))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = llhwc_init_conn_empty_pkts &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_19
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_stp_dtm
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_conn_evnt_param
</UL>

<P><STRONG><a name="[d7]"></a>llhwc_recover_from_dp_slp</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, llhwc.o(.text.llhwc_recover_from_dp_slp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = llhwc_recover_from_dp_slp &rArr; llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_updt_lst_ofsts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llhwc.o(.text.llhwc_init)
</UL>
<P><STRONG><a name="[4fc]"></a>llhwc_switch_rate</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, llhwc.o(.text.llhwc_switch_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = llhwc_switch_rate &rArr; OUTLINED_FUNCTION_23 &rArr; llhwc_cmn_set_phy &rArr; OUTLINED_FUNCTION_2 &rArr; llhwc_phy_get_ltncy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_23
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_conn_evnt_param
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>

<P><STRONG><a name="[47b]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OUTLINED_FUNCTION_10 &rArr; ll_tx_pwr_if_tx_pwr_params_config &rArr; llhwc_phy_set_tx_pwr &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_tx_pwr_if_tx_pwr_params_config
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_conn_evnt_param
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_init_param
</UL>

<P><STRONG><a name="[4cf]"></a>OUTLINED_FUNCTION_35</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_35))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_35 &rArr; llhwc_cmn_alloc_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_alloc_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_conn_evnt_param
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_init_param
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
</UL>

<P><STRONG><a name="[46c]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_adv_param
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_init_param
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
</UL>

<P><STRONG><a name="[758]"></a>llhwc_get_sm_mode_from_event_type</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, llhwc.o(.text.llhwc_get_sm_mode_from_event_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llhwc_get_sm_mode_from_event_type
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_conn_evnt_param
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_adv_param
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_init_param
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
</UL>

<P><STRONG><a name="[4fb]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; llhwc_switch_rate &rArr; OUTLINED_FUNCTION_23 &rArr; llhwc_cmn_set_phy &rArr; OUTLINED_FUNCTION_2 &rArr; llhwc_phy_get_ltncy
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_switch_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_adv_param
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_init_param
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
</UL>

<P><STRONG><a name="[779]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_adv_param
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_init_param
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
</UL>

<P><STRONG><a name="[77a]"></a>OUTLINED_FUNCTION_32</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_32))
<BR><BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_adv_param
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
</UL>

<P><STRONG><a name="[77b]"></a>OUTLINED_FUNCTION_30</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_30))
<BR><BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_adv_param
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_init_param
</UL>

<P><STRONG><a name="[49a]"></a>OUTLINED_FUNCTION_19</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_19))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_19 &rArr; ble_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_adv_param
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_conn_empty_pkts
</UL>

<P><STRONG><a name="[77c]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_adv_param
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
</UL>

<P><STRONG><a name="[489]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OUTLINED_FUNCTION_13 &rArr; llhwc_phy_set_ch_config &rArr; llhwc_phy_stop_modulation_mode &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_ch_config
</UL>
<BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
</UL>

<P><STRONG><a name="[4cd]"></a>OUTLINED_FUNCTION_33</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_33))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OUTLINED_FUNCTION_33 &rArr; allocate_data_packet &rArr; os_shrd_mem_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_data_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_conn_evnt_param
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_init_param
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
</UL>

<P><STRONG><a name="[77f]"></a>OUTLINED_FUNCTION_28</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_28))
<BR><BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
</UL>

<P><STRONG><a name="[4b4]"></a>OUTLINED_FUNCTION_21</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_21))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_21 &rArr; ble_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_init_param
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
</UL>

<P><STRONG><a name="[780]"></a>OUTLINED_FUNCTION_24</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_24))
<BR><BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
</UL>

<P><STRONG><a name="[77e]"></a>OUTLINED_FUNCTION_34</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_34))
<BR><BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_init_param
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
</UL>

<P><STRONG><a name="[781]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
</UL>

<P><STRONG><a name="[782]"></a>OUTLINED_FUNCTION_17</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_17))
<BR><BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
</UL>

<P><STRONG><a name="[783]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_scan_param
</UL>

<P><STRONG><a name="[492]"></a>OUTLINED_FUNCTION_16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_16 &rArr; ble_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_init_param
</UL>

<P><STRONG><a name="[77d]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_init_param
</UL>

<P><STRONG><a name="[4bd]"></a>OUTLINED_FUNCTION_27</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_27))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_27 &rArr; ble_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_conn_evnt_param
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_set_init_param
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
</UL>

<P><STRONG><a name="[754]"></a>OUTLINED_FUNCTION_25</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_25))
<BR><BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_conn_evnt_en_encry
</UL>

<P><STRONG><a name="[785]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_sm_done_isr
</UL>

<P><STRONG><a name="[ee]"></a>llhwc_adv_done</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, llhwc.o(.text.llhwc_adv_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = llhwc_adv_done &rArr; emngr_post_event &rArr; queue_enqueue &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_alloc
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buff_hdr
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_free_desc
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_evnt_done
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llhwc.o(.rodata.callbacks)
</UL>
<P><STRONG><a name="[726]"></a>llhwc_evnt_done</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, llhwc.o(.text.llhwc_evnt_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = llhwc_evnt_done &rArr; ble_time_add_uint &rArr; ble_time_add
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_conn_evnt_done
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_done
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_adv_done
</UL>

<P><STRONG><a name="[4cb]"></a>OUTLINED_FUNCTION_31</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llhwc.o(.text.OUTLINED_FUNCTION_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_31 &rArr; llhwc_pwr_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_pwr_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_dtm_done
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_done
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_adv_done
</UL>

<P><STRONG><a name="[ef]"></a>llhwc_scan_done</STRONG> (Thumb, 1212 bytes, Stack size 120 bytes, llhwc.o(.text.llhwc_scan_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = llhwc_scan_done &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_alloc
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buff_hdr
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_overflow_diff
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_cmp_raw_reading
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_activate_scan_req
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_free_desc
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_get_desc
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_calc_num_rx_pkts
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_evnt_done
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_27
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_sm_mode_from_event_type
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_22
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_data_packet
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_backoff_prcdr
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llhwc.o(.rodata.callbacks)
</UL>
<P><STRONG><a name="[72a]"></a>llhwc_calc_num_rx_pkts</STRONG> (Thumb, 412 bytes, Stack size 72 bytes, llhwc.o(.text.llhwc_calc_num_rx_pkts))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = llhwc_calc_num_rx_pkts &rArr; llhwc_phy_get_rssi_value &rArr; llhwc_phy_get_num_rssi_octets
</UL>
<BR>[Calls]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_num_rssi_octets
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_rssi_value
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_conn_evnt_done
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_init_done
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_scan_done
</UL>

<P><STRONG><a name="[f0]"></a>llhwc_init_done</STRONG> (Thumb, 576 bytes, Stack size 88 bytes, llhwc.o(.text.llhwc_init_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = llhwc_init_done &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_alloc
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buff_hdr
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_set
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_overflow_diff
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_cmp_raw_reading
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_free_desc
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_get_desc
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_calc_num_rx_pkts
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_evnt_done
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llhwc.o(.rodata.callbacks)
</UL>
<P><STRONG><a name="[f1]"></a>llhwc_conn_evnt_done</STRONG> (Thumb, 612 bytes, Stack size 40 bytes, llhwc.o(.text.llhwc_conn_evnt_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = llhwc_conn_evnt_done &rArr; llhwc_calc_num_rx_pkts &rArr; llhwc_phy_get_rssi_value &rArr; llhwc_phy_get_num_rssi_octets
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_alloc
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_goto_sleep
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buff_hdr
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto_aes_done
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_free_desc
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_get_desc
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_calc_num_rx_pkts
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_evnt_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llhwc.o(.rodata.callbacks)
</UL>
<P><STRONG><a name="[f2]"></a>llhwc_dtm_done</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, llhwc.o(.text.llhwc_dtm_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = llhwc_dtm_done &rArr; llhwc_phy_read_rssi &rArr; llhwc_phy_write_cfg_fifo_batch &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_read_rssi
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_free_desc
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_31
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llhwc.o(.rodata.callbacks)
</UL>
<P><STRONG><a name="[68c]"></a>get_priority</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, multi_role_greedy.o(.text.get_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_priority &rArr; ble_time_diff_us &rArr; ble_time_ordered_diff_us_overflow
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_diff_us
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_gnrc_evnt_durn_chk
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nxt_when_idle_evnt
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_event
</UL>

<P><STRONG><a name="[590]"></a>add_conflict_queue</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, multi_role_greedy.o(.text.add_conflict_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = add_conflict_queue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_gnrc_evnt_durn_chk
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_event
</UL>

<P><STRONG><a name="[46d]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, multi_role_greedy.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_gnrc_evnt_durn_chk
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schdlr_nxt_cycle
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
</UL>

<P><STRONG><a name="[59e]"></a>recheck_conflicting</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, multi_role_greedy.o(.text.recheck_conflicting))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = recheck_conflicting &rArr; OUTLINED_FUNCTION_6 &rArr; add_intrvl_to_evnt_time_stamp &rArr; evnt_schdlr_update_slave_conn_timers &rArr; evnt_utils_validate_and_update_swto_remaining_time &rArr; conn_mngr_sprvsn_timer_custom_set &rArr; os_timer_set &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_event
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_gnrc_evnt_durn_chk
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schdlr_nxt_cycle
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hndl_missed_evnt
</UL>

<P><STRONG><a name="[4f4]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, multi_role_greedy.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; os_rcrsv_mutex_wait &rArr; LINKLAYER_PLAT_DisableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schdlr_nxt_cycle
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_conflict_queue
</UL>

<P><STRONG><a name="[4da]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, multi_role_greedy.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; os_rcrsv_mutex_wait &rArr; LINKLAYER_PLAT_DisableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recheck_conflicting
</UL>

<P><STRONG><a name="[59d]"></a>schedule_event</STRONG> (Thumb, 708 bytes, Stack size 64 bytes, multi_role_greedy.o(.text.schedule_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = schedule_event &rArr; emngr_post_event &rArr; queue_enqueue &rArr; os_mem_pool_alloc &rArr; mem_pool_alloc &rArr; mem_pool_recover_corruption
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emngr_post_event
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_comp
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_is_evnt_starved
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_events_table
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_actual_event_slot_dur
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_offset
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_conflict_queue
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schdlr_nxt_cycle
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hndl_missed_evnt
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recheck_conflicting
</UL>

<P><STRONG><a name="[4eb]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, multi_role_greedy.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; add_intrvl_to_evnt_time_stamp &rArr; evnt_schdlr_update_slave_conn_timers &rArr; evnt_utils_validate_and_update_swto_remaining_time &rArr; conn_mngr_sprvsn_timer_custom_set &rArr; os_timer_set &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_intrvl_to_evnt_time_stamp
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hndl_missed_evnt
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recheck_conflicting
</UL>

<P><STRONG><a name="[599]"></a>get_slot_offset</STRONG> (Thumb, 428 bytes, Stack size 36 bytes, multi_role_greedy.o(.text.get_slot_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_slot_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_get_master_conn_anchor_point
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_param_req
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_event
</UL>

<P><STRONG><a name="[598]"></a>get_intrv_slot_period</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, multi_role_greedy.o(.text.get_intrv_slot_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = get_intrv_slot_period &rArr; update_slot_period &rArr; sort_events_table
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_slot_period
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optm_conn_param
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_period_after_rmv_evnt
</UL>

<P><STRONG><a name="[693]"></a>update_slot_period</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, multi_role_greedy.o(.text.update_slot_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = update_slot_period &rArr; sort_events_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_events_table
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updt_radio_period
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_intrv_slot_period
</UL>

<P><STRONG><a name="[453]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, multi_role_greedy.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_master_conn_params
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_win_offset
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_max_pkts_to_send
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schdlr_nxt_cycle
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_evnt_intrvl
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nxt_when_idle_evnt
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_event
</UL>

<P><STRONG><a name="[4fd]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, multi_role_greedy.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; os_rcrsv_mutex_wait &rArr; LINKLAYER_PLAT_DisableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_scan
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_event
</UL>

<P><STRONG><a name="[7ba]"></a>calc_actual_event_slot_dur</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, multi_role_greedy.o(.text.calc_actual_event_slot_dur))
<BR><BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_event
</UL>

<P><STRONG><a name="[7bc]"></a>sort_events_table</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, multi_role_greedy.o(.text.sort_events_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sort_events_table
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updt_radio_period
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_period_after_rmv_evnt
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_slot_period
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_event
</UL>

<P><STRONG><a name="[4ec]"></a>add_intrvl_to_evnt_time_stamp</STRONG> (Thumb, 572 bytes, Stack size 40 bytes, multi_role_greedy.o(.text.add_intrvl_to_evnt_time_stamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = add_intrvl_to_evnt_time_stamp &rArr; evnt_schdlr_update_slave_conn_timers &rArr; evnt_utils_validate_and_update_swto_remaining_time &rArr; conn_mngr_sprvsn_timer_custom_set &rArr; os_timer_set &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_set
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_free_evnt
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_gen_rnd_num
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_master_conn_timers
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_update_slave_conn_timers
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmv_evnt
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_scan
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schdlr_nxt_cycle
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>

<P><STRONG><a name="[4e5]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, multi_role_greedy.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; ble_time_add_uint &rArr; ble_time_add
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_intrvl_to_evnt_time_stamp
</UL>

<P><STRONG><a name="[4c5]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, multi_role_greedy.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_scan
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_intrvl_to_evnt_time_stamp
</UL>

<P><STRONG><a name="[125]"></a>rmv_evnt</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, multi_role_greedy.o(.text.rmv_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = rmv_evnt &rArr; update_radio_period_after_rmv_evnt &rArr; get_intrv_slot_period &rArr; update_slot_period &rArr; sort_events_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_period_after_rmv_evnt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multi_reset
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rem_from_evnts_list
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_intrvl_to_evnt_time_stamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[7b8]"></a>rem_from_evnts_list</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, multi_role_greedy.o(.text.rem_from_evnts_list))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_scan
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmv_evnt
</UL>

<P><STRONG><a name="[11e]"></a>multi_reset</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, multi_role_greedy.o(.text.multi_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = multi_reset &rArr; evnt_schdlr_free_evnt &rArr; free_buff_hdr &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_free_evnt
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmv_evnt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[7b9]"></a>update_radio_period_after_rmv_evnt</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, multi_role_greedy.o(.text.update_radio_period_after_rmv_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = update_radio_period_after_rmv_evnt &rArr; get_intrv_slot_period &rArr; update_slot_period &rArr; sort_events_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_events_table
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_intrv_slot_period
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updt_radio_period
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmv_evnt
</UL>

<P><STRONG><a name="[11d]"></a>multi_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, multi_role_greedy.o(.text.multi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = multi_init &rArr; ble_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[11f]"></a>get_nxt_evnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, multi_role_greedy.o(.text.get_nxt_evnt))
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[120]"></a>get_nxt_when_idle_evnt</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, multi_role_greedy.o(.text.get_nxt_when_idle_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_nxt_when_idle_evnt &rArr; llhwc_slptmr_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_overflow_diff
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_cmp_raw_reading
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_num_of_prdc_clbr_chnls
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_priority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[121]"></a>get_clbr_when_idle_evnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, multi_role_greedy.o(.text.get_clbr_when_idle_evnt))
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[122]"></a>evnt_on_air</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, multi_role_greedy.o(.text.evnt_on_air))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = evnt_on_air
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[123]"></a>hndl_missed_evnt</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, multi_role_greedy.o(.text.hndl_missed_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = hndl_missed_evnt &rArr; recheck_conflicting &rArr; OUTLINED_FUNCTION_6 &rArr; add_intrvl_to_evnt_time_stamp &rArr; evnt_schdlr_update_slave_conn_timers &rArr; evnt_utils_validate_and_update_swto_remaining_time &rArr; conn_mngr_sprvsn_timer_custom_set &rArr; os_timer_set &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_hw_setup_time
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_overflow_diff
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_cmp_raw_reading
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv_uint
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_evnt_intrvl
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_event
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recheck_conflicting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[690]"></a>get_evnt_intrvl</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, multi_role_greedy.o(.text.get_evnt_intrvl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_evnt_intrvl &rArr; llhwc_gen_rnd_num &rArr; gen_rnd_num &rArr; ll_sys_get_rng &rArr; LINKLAYER_PLAT_GetRNG &rArr; HW_RNG_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_gen_rnd_num
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_scan
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hndl_missed_evnt
</UL>

<P><STRONG><a name="[124]"></a>add_evnt</STRONG> (Thumb, 1160 bytes, Stack size 56 bytes, multi_role_greedy.o(.text.add_evnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = add_evnt &rArr; recheck_conflicting &rArr; OUTLINED_FUNCTION_6 &rArr; add_intrvl_to_evnt_time_stamp &rArr; evnt_schdlr_update_slave_conn_timers &rArr; evnt_utils_validate_and_update_swto_remaining_time &rArr; conn_mngr_sprvsn_timer_custom_set &rArr; os_timer_set &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_set
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_free_evnt
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_comp
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_num_of_prdc_clbr_chnls
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_get_prdc_clbr_evnt_cfg_time
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_calc_prim_adv_durn_on_air
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_calc_conn_duration
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_set_slave_conn_timers
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_evnt_start_time
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_intrv_slot_period
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_offset
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_event
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recheck_conflicting
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[595]"></a>set_evnt_start_time</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, multi_role_greedy.o(.text.set_evnt_start_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_evnt_start_time &rArr; llhwc_slptmr_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
</UL>

<P><STRONG><a name="[4a7]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, multi_role_greedy.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; ble_time_add_uint &rArr; ble_time_add
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_evnt
</UL>

<P><STRONG><a name="[126]"></a>update_slot_durations</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, multi_role_greedy.o(.text.update_slot_durations))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = update_slot_durations &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[127]"></a>events_count</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, multi_role_greedy.o(.text.events_count))
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[128]"></a>events_when_idle_count</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, multi_role_greedy.o(.text.events_when_idle_count))
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[129]"></a>schdlr_nxt_cycle</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, multi_role_greedy.o(.text.schdlr_nxt_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = schdlr_nxt_cycle &rArr; recheck_conflicting &rArr; OUTLINED_FUNCTION_6 &rArr; add_intrvl_to_evnt_time_stamp &rArr; evnt_schdlr_update_slave_conn_timers &rArr; evnt_utils_validate_and_update_swto_remaining_time &rArr; conn_mngr_sprvsn_timer_custom_set &rArr; os_timer_set &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_intrvl_to_evnt_time_stamp
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_event
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recheck_conflicting
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[12a]"></a>updt_conn_evnt_durn</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, multi_role_greedy.o(.text.updt_conn_evnt_durn))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = updt_conn_evnt_durn &rArr; evnt_schdlr_calc_conn_duration &rArr; evnt_utils_calc_conn_tx_rx_durn_per_pkt
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_calc_conn_duration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[12b]"></a>calculate_max_pkts_to_send</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, multi_role_greedy.o(.text.calculate_max_pkts_to_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = calculate_max_pkts_to_send &rArr; packet_get_frst_pkt &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_get_rx_dtp
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_get_frst_pkt
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_ordered_diff_us
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_utils_calc_conn_tx_rx_durn_per_pkt
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[12d]"></a>resume_scan</STRONG> (Thumb, 536 bytes, Stack size 80 bytes, multi_role_greedy.o(.text.resume_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = resume_scan &rArr; schdlr_nxt_cycle &rArr; recheck_conflicting &rArr; OUTLINED_FUNCTION_6 &rArr; add_intrvl_to_evnt_time_stamp &rArr; evnt_schdlr_update_slave_conn_timers &rArr; evnt_utils_validate_and_update_swto_remaining_time &rArr; conn_mngr_sprvsn_timer_custom_set &rArr; os_timer_set &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_set
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_comp
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_overflow_diff
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_cmp_raw_reading
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv_uint
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schdlr_nxt_cycle
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_evnt_intrvl
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rem_from_evnts_list
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_intrvl_to_evnt_time_stamp
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[12e]"></a>updt_radio_period</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, multi_role_greedy.o(.text.updt_radio_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = updt_radio_period &rArr; update_radio_period_after_rmv_evnt &rArr; get_intrv_slot_period &rArr; update_slot_period &rArr; sort_events_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_period_after_rmv_evnt
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_events_table
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_slot_period
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[130]"></a>conn_param_req</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, multi_role_greedy.o(.text.conn_param_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = conn_param_req &rArr; get_slot_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_choose_suitable_intrv
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_mngr_get_num_concurrent_states
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_win_offset
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_offset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[131]"></a>calc_win_offset</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, multi_role_greedy.o(.text.calc_win_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = calc_win_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_param_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multi_role_greedy.o(.rodata.schdlr_multi_role)
</UL>
<P><STRONG><a name="[4e6]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, non_conn_mngr.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; os_mem_pool_free &rArr; mem_pool_free &rArr; get_pool_index
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_pool_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_enable
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_reset
</UL>

<P><STRONG><a name="[4a9]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, non_conn_mngr.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_set_random_address
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_add_rmv_clr_device_white_list
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_set_adv_params
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_event_status_check
</UL>

<P><STRONG><a name="[4ed]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, non_conn_mngr.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; llhwc_lst_add_rmv_dev &rArr; llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_add_rmv_clr_device_white_list
</UL>

<P><STRONG><a name="[796]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, non_conn_mngr.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_set_adv_data
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_interrupt
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_update_rpa_src_addr
</UL>

<P><STRONG><a name="[4c6]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, non_conn_mngr.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_set_adv_params
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_interrupt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_cbk
</UL>

<P><STRONG><a name="[454]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, non_conn_mngr.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_get_link_status
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_enable
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_scan_cbk
</UL>

<P><STRONG><a name="[dd]"></a>non_conn_mngr_scan_cbk</STRONG> (Thumb, 1012 bytes, Stack size 144 bytes, non_conn_mngr.o(.text.non_conn_mngr_scan_cbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = non_conn_mngr_scan_cbk &rArr; prvcy_mngr_addr_hndlr &rArr; prvcy_mngr_addr_rsln &rArr; llhwc_128_encrypt &rArr; llhwc_cmn_crypto &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buff_hdr
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_evnt_updtd
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_gen_rnd_num
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_edit_indicators
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_hndlr
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nxt_data_packet
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_parse_nconn_adv
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_remove_random_addr_list
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> non_conn_mngr.o(.text.non_conn_mngr_scan_enable)
</UL>
<P><STRONG><a name="[48b]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, non_conn_mngr.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_13 &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_set_adv_data
</UL>

<P><STRONG><a name="[4f5]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, non_conn_mngr.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; prvcy_mngr_RPA_Regeneration &rArr; prvcy_mngr_addr_gen &rArr; llhwc_128_encrypt &rArr; llhwc_cmn_crypto &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_RPA_Regeneration
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_set_adv_data
</UL>

<P><STRONG><a name="[7a2]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, non_conn_mngr.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_set_adv_data
</UL>

<P><STRONG><a name="[504]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, non_conn_mngr.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; state_mngr_update_state
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_mngr_update_state
</UL>
<BR>[Called By]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_enable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
</UL>

<P><STRONG><a name="[dc]"></a>non_conn_mngr_adv_cbk</STRONG> (Thumb, 728 bytes, Stack size 144 bytes, non_conn_mngr.o(.text.non_conn_mngr_adv_cbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = non_conn_mngr_adv_cbk &rArr; conn_mngr_slave_start_connection &rArr; conn_mngr_start_connection &rArr; evnt_schdlr_rgstr_evnt &rArr; evnt_schdlr_hndl_next_evnt &rArr; evnt_schdlr_exec &rArr;  evnt_schdlr_hndl_next_evnt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_set_pndg_evnts
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_unrgstr_evnt
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_set
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_buff_hdr
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evnt_schdlr_evnt_updtd
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_mngr_slave_start_connection
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_edit_indicators
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_mngr_update_state
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_chck_dev_prvcy_mode
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_chck_rpa
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_check_conn_params
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_parse_conn_req
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_get_pdu_type
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_hndlr
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> non_conn_mngr.o(.text.non_conn_mngr_adv_enable)
</UL>
<P><STRONG><a name="[484]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, non_conn_mngr.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_12 &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
</UL>

<P><STRONG><a name="[78d]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, non_conn_mngr.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
</UL>

<P><STRONG><a name="[491]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, non_conn_mngr.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_adv_cbk
</UL>

<P><STRONG><a name="[79c]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, non_conn_mngr.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_get_link_status
</UL>

<P><STRONG><a name="[79d]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, non_conn_mngr.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_get_link_status
</UL>

<P><STRONG><a name="[455]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pdu_trnsprt_hndlr.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_nconn_init_patch
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_parse_data_cntrl
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_form_cntrl_pdu
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_form_data_pdu
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_parse_conn_req
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_get_pdu_type
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_form_nconn_adv
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_parse_nconn_adv
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_form_nconn_scan
</UL>

<P><STRONG><a name="[7aa]"></a>pdu_trnsprt_hndlr_form_adv_PDU_Hdr</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, pdu_trnsprt_hndlr.o(.text.pdu_trnsprt_hndlr_form_adv_PDU_Hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pdu_trnsprt_hndlr_form_adv_PDU_Hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_form_nconn_adv
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_form_nconn_scan
</UL>

<P><STRONG><a name="[7ab]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pdu_trnsprt_hndlr.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_parse_data_cntrl
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_parse_conn_req
</UL>

<P><STRONG><a name="[4aa]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pdu_trnsprt_hndlr.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_form_cntrl_pdu
</UL>

<P><STRONG><a name="[7ac]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pdu_trnsprt_hndlr.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdu_trnsprt_hndlr_parse_data_cntrl
</UL>

<P><STRONG><a name="[7ae]"></a>prvcy_mngr_remove_from_associated_lists</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, prvcy_mngr.o(.text.prvcy_mngr_remove_from_associated_lists))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvcy_mngr_remove_from_associated_lists &rArr; llhwc_lst_search &rArr; llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_rmv_by_loc
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_clr_fw_reslvng_list
</UL>

<P><STRONG><a name="[4db]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, prvcy_mngr.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; ble_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_clr_fw_reslvng_list
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_srch_fw_reslvng_list
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_hw_reslvng_list
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_update_resolving_lst_indicator_bits
</UL>

<P><STRONG><a name="[482]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, prvcy_mngr.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_11 &rArr; ble_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_clr_fw_reslvng_list
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_chck_rpa
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_RPA_Regeneration
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_get_local_rpa
</UL>

<P><STRONG><a name="[7af]"></a>prvcy_mngr_free_tmr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, prvcy_mngr.o(.text.prvcy_mngr_free_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = prvcy_mngr_free_tmr &rArr; os_timer_stop_free &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop_free
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_clr_fw_reslvng_list
</UL>

<P><STRONG><a name="[df]"></a>prvcy_post_timer_evnt_clbk</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, prvcy_mngr.o(.text.prvcy_post_timer_evnt_clbk))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = prvcy_post_timer_evnt_clbk &rArr; non_conn_mngr_update_rpa_src_addr &rArr; prvcy_mngr_addr_gen &rArr; llhwc_128_encrypt &rArr; llhwc_cmn_crypto &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_update_rpa_src_addr
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_gen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> prvcy_mngr.o(.text.prvcy_mngr_add_rmv_clr_fw_reslvng_list)
</UL>
<P><STRONG><a name="[456]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, prvcy_mngr.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; llhwc_lst_add_rmv_dev &rArr; llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_hndlr
</UL>

<P><STRONG><a name="[48c]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, prvcy_mngr.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OUTLINED_FUNCTION_13 &rArr; non_conn_mngr_remove_random_addr_list &rArr; llhwc_lst_rmv_rand_add &rArr; gen_rnd_num &rArr; ll_sys_get_rng &rArr; LINKLAYER_PLAT_GetRNG &rArr; HW_RNG_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non_conn_mngr_remove_random_addr_list
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_hw_reslvng_list
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_hndlr
</UL>

<P><STRONG><a name="[47d]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, prvcy_mngr.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = OUTLINED_FUNCTION_10 &rArr; prvcy_mngr_addr_rsln &rArr; llhwc_128_encrypt &rArr; llhwc_cmn_crypto &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_rsln
</UL>
<BR>[Called By]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_chck_rpa
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_hndlr
</UL>

<P><STRONG><a name="[4c7]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, prvcy_mngr.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; llhwc_lst_add_rmv_dev &rArr; llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_hndlr
</UL>

<P><STRONG><a name="[4ab]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, prvcy_mngr.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_srch_fw_reslvng_list
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_hw_reslvng_list
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_rsln
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_addr_hndlr
</UL>

<P><STRONG><a name="[46e]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, prvcy_mngr.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; llhwc_lst_add_rmv_dev &rArr; llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_add_rmv_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_hw_reslvng_list
</UL>

<P><STRONG><a name="[7b1]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, prvcy_mngr.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_hw_reslvng_list
</UL>

<P><STRONG><a name="[485]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, prvcy_mngr.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_12 &rArr; llhwc_lst_edit_indicators
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_edit_indicators
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_hw_reslvng_list
</UL>

<P><STRONG><a name="[505]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, prvcy_mngr.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; llhwc_lst_search &rArr; llhwc_updt_lst_ofsts &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_lst_search
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_add_rmv_hw_reslvng_list
</UL>

<P><STRONG><a name="[7b5]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, prvcy_mngr.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_srch_fw_reslvng_list
</UL>

<P><STRONG><a name="[4f7]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, prvcy_mngr.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; ble_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_srch_fw_reslvng_list
</UL>

<P><STRONG><a name="[4fe]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, prvcy_mngr.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; ble_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_srch_fw_reslvng_list
</UL>

<P><STRONG><a name="[7b3]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, prvcy_mngr.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_chck_rpa
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_get_local_rpa
</UL>

<P><STRONG><a name="[4ee]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, prvcy_mngr.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvcy_mngr_get_local_rpa
</UL>

<P><STRONG><a name="[458]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llhwc_phy.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_schdr_clbr_cbks
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_num_of_prdc_clbr_chnls
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_num_rssi_octets
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_read_rssi
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_prdc_clbr_cfg_time
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_strt_stp
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_stop_modulation_mode
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_init
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_seq_ram_init
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_write_cfg_fifo_batch
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_nxt_clbr_ch
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_trg_sequence_from_sequencer_ram
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_read_updt_vco_pll_clbr
</UL>

<P><STRONG><a name="[767]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, llhwc_phy.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_clbr_seq_done_isr
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_fifo_flush
</UL>

<P><STRONG><a name="[768]"></a>llhwc_phy_read_updt_vco_pll_clbr</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, llhwc_phy.o(.text.llhwc_phy_read_updt_vco_pll_clbr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = llhwc_phy_read_updt_vco_pll_clbr &rArr; llhwc_phy_write_cfg_fifo_batch &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_write_cfg_fifo_batch
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_init_clbr
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_clbr_seq_done_isr
</UL>

<P><STRONG><a name="[765]"></a>llhwc_phy_clbr_cmpltd_release_grant</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, llhwc_phy.o(.text.llhwc_phy_clbr_cmpltd_release_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llhwc_phy_clbr_cmpltd_release_grant &rArr; llhwc_phy_run_pre_post_phy_clbr &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_num_of_prdc_clbr_chnls
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_exec_clbr_done_clbk
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_run_pre_post_phy_clbr
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_hndl_runtime_clbr
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_clbr_seq_done_isr
</UL>

<P><STRONG><a name="[76a]"></a>llhwc_phy_strt_vco_pll_clbr</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, llhwc_phy.o(.text.llhwc_phy_strt_vco_pll_clbr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = llhwc_phy_strt_vco_pll_clbr &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_control_aclk
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_run_phy_sequence
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_fill_and_trigger_sequencer_ram
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_hndl_runtime_clbr
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_init_clbr
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_clbr_seq_done_isr
</UL>

<P><STRONG><a name="[775]"></a>llhwc_phy_trg_sequence_from_sequencer_ram</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, llhwc_phy.o(.text.llhwc_phy_trg_sequence_from_sequencer_ram))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_nxt_seq_from_queue
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_fill_and_trigger_sequencer_ram
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_ch_config_adv
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_run_phy_sequence
</UL>

<P><STRONG><a name="[46f]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llhwc_phy.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_control_aclk
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_hndl_runtime_clbr
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_init_clbr
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_read_and_stop_ed
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_strt_stp
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_write_cfg_fifo_batch
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_trg_sequence_from_sequencer_ram
</UL>

<P><STRONG><a name="[76b]"></a>llhwc_phy_fifo_flush</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, llhwc_phy.o(.text.llhwc_phy_fifo_flush))
<BR><BR>[Calls]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_write_cfg_fifo_batch
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_fill_and_trigger_sequencer_ram
</UL>

<P><STRONG><a name="[76c]"></a>llhwc_phy_fill_and_trigger_sequencer_ram</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, llhwc_phy.o(.text.llhwc_phy_fill_and_trigger_sequencer_ram))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_phy_driver_stop
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_fifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_nxt_seq_from_queue
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_trg_sequence_from_sequencer_ram
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_strt_vco_pll_clbr
</UL>

<P><STRONG><a name="[76d]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llhwc_phy.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_prdc_clbr_cfg_time
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_set_cfg_time
</UL>

<P><STRONG><a name="[772]"></a>llhwc_phy_set_phy_slp_regs</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, llhwc_phy.o(.text.llhwc_phy_set_phy_slp_regs))
<BR><BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_init
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_recover_from_ll_dp_slp
</UL>

<P><STRONG><a name="[766]"></a>llhwc_phy_run_pre_post_phy_clbr</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, llhwc_phy.o(.text.llhwc_phy_run_pre_post_phy_clbr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = llhwc_phy_run_pre_post_phy_clbr &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_control_aclk
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_run_phy_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_hndl_runtime_clbr
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_init_clbr
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_clbr_cmpltd_release_grant
</UL>

<P><STRONG><a name="[d9]"></a>llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, llhwc_phy.o(.text.llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llhwc_phy.o(.text.llhwc_phy_patch_tx_power_mode_phy_reg)
</UL>
<P><STRONG><a name="[5ac]"></a>ble_time_ordered_diff_us_overflow</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ble_time.o(.text.ble_time_ordered_diff_us_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_time_ordered_diff_us_overflow
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_ordered_diff_us
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_diff_us
</UL>

<P><STRONG><a name="[4ac]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_time.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv_uint
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv
</UL>

<P><STRONG><a name="[471]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_time.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add
</UL>

<P><STRONG><a name="[5a8]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_time.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv_uint
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
</UL>

<P><STRONG><a name="[5a9]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_time.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv_uint
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
</UL>

<P><STRONG><a name="[5aa]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_time.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv_uint
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_add_uint
</UL>

<P><STRONG><a name="[5af]"></a>ble_time_rmv_fine</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_time.o(.text.ble_time_rmv_fine))
<BR><BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time_rmv
</UL>

<P><STRONG><a name="[459]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ll_queue.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; os_rcrsv_mutex_wait &rArr; LINKLAYER_PLAT_DisableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_dequeue
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_search_node
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_delete_node
</UL>

<P><STRONG><a name="[4c8]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ll_queue.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_dequeue
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_delete_node
</UL>

<P><STRONG><a name="[45b]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_notify_phy_clbr_state
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_set
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_polling
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_free_desc
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_get_enc_desc
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_get_desc
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_wait_for_evnt_on_air
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_init
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset_rco_clbr
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_hw_rco_compnstn_enable
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_init
</UL>

<P><STRONG><a name="[749]"></a>llhwc_cmn_reset_slp_params</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.llhwc_cmn_reset_slp_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = llhwc_cmn_reset_slp_params &rArr; llhwc_phy_init &rArr; llhwc_phy_init_clbr &rArr; llhwc_phy_strt_vco_pll_clbr &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_pwr_switch
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_init
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_dp_slp_mode
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset
</UL>

<P><STRONG><a name="[472]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset_rco_clbr
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_start_stop_runtime_rco_clbr
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_update_rco_timer
</UL>

<P><STRONG><a name="[73a]"></a>llhwc_cmn_hw_rco_clbr_enable</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.llhwc_cmn_hw_rco_clbr_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = llhwc_cmn_hw_rco_clbr_enable &rArr; bsp_rco_clbr_not &rArr; ll_sys_rco_clbr_not &rArr; LINKLAYER_PLAT_RCOStartClbr &rArr; scm_setsystemclock &rArr; SwitchHse16toHse32 &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_rco_clbr_not
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_control_aclk
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_rco_isr
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset_rco_clbr
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_start_stop_runtime_rco_clbr
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_hw_rco_clbr
</UL>

<P><STRONG><a name="[4dc]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; llhwc_cmn_hw_rco_compnstn_enable &rArr; llhwc_slptmr_polling &rArr; llhwc_slptmr_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_hw_rco_compnstn_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_rco_isr
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset_rco_clbr
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_start_stop_runtime_rco_clbr
</UL>

<P><STRONG><a name="[ce]"></a>ll_isr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, llhwc_cmn.o(.text.ll_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ll_isr &rArr; ll_cmn_clr_isr &rArr; llhwc_phy_clbr_seq_done_isr &rArr; llhwc_phy_clbr_cmpltd_release_grant &rArr; llhwc_phy_run_pre_post_phy_clbr &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_cmn_clr_isr
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_process_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llhwc_cmn.o(.text.llhwc_cmn_init)
</UL>
<P><STRONG><a name="[cf]"></a>ll_lw_prio_isr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.ll_lw_prio_isr))
<BR><BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_process_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llhwc_cmn.o(.text.llhwc_cmn_init)
</UL>
<P><STRONG><a name="[739]"></a>llhwc_cmn_hw_rco_clbr</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, llhwc_cmn.o(.text.llhwc_cmn_hw_rco_clbr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = llhwc_cmn_hw_rco_clbr &rArr; llhwc_cmn_hw_rco_clbr_enable &rArr; bsp_rco_clbr_not &rArr; ll_sys_rco_clbr_not &rArr; LINKLAYER_PLAT_RCOStartClbr &rArr; scm_setsystemclock &rArr; SwitchHse16toHse32 &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_hw_rco_clbr_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_rco_clbr_timer_cbk
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_initial_rco_clbr
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_start_stop_runtime_rco_clbr
</UL>

<P><STRONG><a name="[d2]"></a>llhwc_cmn_set_os_timer_activity</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.llhwc_cmn_set_os_timer_activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = llhwc_cmn_set_os_timer_activity &rArr; llhwc_cmn_start_stop_runtime_rco_clbr &rArr; llhwc_cmn_reset_rco_clbr &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_start_stop_runtime_rco_clbr
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llhwc_cmn.o(.text.llhwc_cmn_initial_rco_clbr)
</UL>
<P><STRONG><a name="[73b]"></a>llhwc_slptmr_polling</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, llhwc_cmn.o(.text.llhwc_slptmr_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = llhwc_slptmr_polling &rArr; llhwc_slptmr_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_set
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_hw_rco_compnstn_enable
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_hw_rco_clbr_enable
</UL>

<P><STRONG><a name="[4dd]"></a>llhwc_cmn_hw_rco_compnstn_enable</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, llhwc_cmn.o(.text.llhwc_cmn_hw_rco_compnstn_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llhwc_cmn_hw_rco_compnstn_enable &rArr; llhwc_slptmr_polling &rArr; llhwc_slptmr_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enable_isr
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_disable_isr
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_slptmr_polling
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_rco_isr
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>

<P><STRONG><a name="[748]"></a>llhwc_cmn_update_rco_timer</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, llhwc_cmn.o(.text.llhwc_cmn_update_rco_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = llhwc_cmn_update_rco_timer &rArr; os_timer_start &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_rco_isr
</UL>

<P><STRONG><a name="[4ad]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; llhwc_phy_get_ltncy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_phy_get_ltncy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_phy
</UL>

<P><STRONG><a name="[751]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_phy
</UL>

<P><STRONG><a name="[4ff]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; ble_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto
</UL>

<P><STRONG><a name="[4ef]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; ble_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto
</UL>

<P><STRONG><a name="[730]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_crypto
</UL>

<P><STRONG><a name="[4ca]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llhwc_cmn.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; os_rcrsv_mutex_wait &rArr; LINKLAYER_PLAT_DisableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_controller_activity
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_os_timer_activity
</UL>

<P><STRONG><a name="[74d]"></a>llhwc_cmn_start_stop_runtime_rco_clbr</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, llhwc_cmn.o(.text.llhwc_cmn_start_stop_runtime_rco_clbr))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = llhwc_cmn_start_stop_runtime_rco_clbr &rArr; llhwc_cmn_reset_rco_clbr &rArr; os_timer_stop &rArr; hw_ll_timer_start &rArr; llhwc_slptmr_set &rArr; llhwc_phy_strt_stp &rArr; llhwc_phy_run_phy_sequence &rArr; llhwc_phy_trg_sequence_from_sequencer_ram &rArr; llhwc_phy_get_nxt_seq_from_queue &rArr; llhwc_phy_fill_and_trigger_sequencer_ram &rArr; llhwc_phy_phy_driver_stop &rArr; llhwc_cmn_control_aclk &rArr; bsp_control_aclk &rArr; ll_sys_radio_ack_ctrl &rArr; LINKLAYER_PLAT_AclkCtrl &rArr; SCM_HSE_WaitUntilReady &rArr; scm_hserdy_isr &rArr; HAL_RAMCFG_ConfigWaitState
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_start
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_stop
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_get_tmr_state
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_create
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_release
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rcrsv_mutex_wait
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_toggle
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_clear
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_debug_gpio_set
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_timer_get_active_sw_timers_number
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_initial_rco_clbr
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset_rco_clbr
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_reset_slptmr_src
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_hw_rco_clbr
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_hw_rco_clbr_enable
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_controller_activity
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llhwc_cmn_set_os_timer_activity
</UL>

<P><STRONG><a name="[112]"></a>LECTRL_LeConnectionCompleteEvent</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, le_ctrl_events.o(.text.LECTRL_LeConnectionCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = LECTRL_LeConnectionCompleteEvent &rArr; GAP_Connection_Complete_Handler &rArr; GAP_Proc_Connection_Complete_Handler &rArr; EVT_aci_gap_proc_complete &rArr; ACI_GAP_PROC_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_CONNECTION_COMPLETE_EVENT
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Connection_Complete_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_ctrl_events.o(.rodata.hci_subevent_table)
</UL>
<P><STRONG><a name="[113]"></a>LECTRL_LeAdvertisingReportEvent</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, le_ctrl_events.o(.text.LECTRL_LeAdvertisingReportEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = LECTRL_LeAdvertisingReportEvent &rArr; HCI_LE_ADVERTISING_REPORT_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ADVERTISING_REPORT_EVENT
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Advertising_Report_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_ctrl_events.o(.rodata.hci_subevent_table)
</UL>
<P><STRONG><a name="[114]"></a>LECTRL_LeConnectionUpdateCompleteEvent</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, le_ctrl_events.o(.text.LECTRL_LeConnectionUpdateCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = LECTRL_LeConnectionUpdateCompleteEvent &rArr; HCI_LE_CONNECTION_UPDATE_COMPLETE_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_CONNECTION_UPDATE_COMPLETE_EVENT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_ctrl_events.o(.rodata.hci_subevent_table)
</UL>
<P><STRONG><a name="[115]"></a>LECTRL_LeReadRemoteUsedFeaturesCompleteEvent</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, le_ctrl_events.o(.text.LECTRL_LeReadRemoteUsedFeaturesCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = LECTRL_LeReadRemoteUsedFeaturesCompleteEvent &rArr; HCI_LE_READ_REMOTE_FEATURES_PAGE_0_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_48 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_READ_REMOTE_FEATURES_PAGE_0_COMPLETE_EVENT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_ctrl_events.o(.rodata.hci_subevent_table)
</UL>
<P><STRONG><a name="[116]"></a>LECTRL_LeLongTermKeyRequestEvent</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, le_ctrl_events.o(.text.LECTRL_LeLongTermKeyRequestEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = LECTRL_LeLongTermKeyRequestEvent &rArr; HCI_LE_LONG_TERM_KEY_REQUEST_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_LONG_TERM_KEY_REQUEST_EVENT
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_LTK_Request_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_ctrl_events.o(.rodata.hci_subevent_table)
</UL>
<P><STRONG><a name="[117]"></a>LECTRL_LeRemoteConnParamReqEvent</STRONG> (Thumb, 12 bytes, Stack size 24 bytes, le_ctrl_events.o(.text.LECTRL_LeRemoteConnParamReqEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = LECTRL_LeRemoteConnParamReqEvent &rArr; HCI_LE_REMOTE_CONNECTION_PARAMETER_REQUEST_EVENT &rArr; OUTLINED_FUNCTION_26 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_REMOTE_CONNECTION_PARAMETER_REQUEST_EVENT
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_ctrl_events.o(.rodata.hci_subevent_table)
</UL>
<P><STRONG><a name="[406]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, le_ctrl_events.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeDataLengthChangeEvent
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_LeRemoteConnParamReqEvent
</UL>

<P><STRONG><a name="[118]"></a>LECTRL_LeDataLengthChangeEvent</STRONG> (Thumb, 12 bytes, Stack size 24 bytes, le_ctrl_events.o(.text.LECTRL_LeDataLengthChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = LECTRL_LeDataLengthChangeEvent &rArr; HCI_LE_DATA_LENGTH_CHANGE_EVENT &rArr; OUTLINED_FUNCTION_26 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_DATA_LENGTH_CHANGE_EVENT
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_ctrl_events.o(.rodata.hci_subevent_table)
</UL>
<P><STRONG><a name="[119]"></a>LECTRL_LeEnhancedConnectionCompleteEvent</STRONG> (Thumb, 156 bytes, Stack size 88 bytes, le_ctrl_events.o(.text.LECTRL_LeEnhancedConnectionCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = LECTRL_LeEnhancedConnectionCompleteEvent &rArr; GAP_Connection_Complete_Handler &rArr; GAP_Proc_Connection_Complete_Handler &rArr; EVT_aci_gap_proc_complete &rArr; ACI_GAP_PROC_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ENHANCED_CONNECTION_COMPLETE_EVENT
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Connection_Complete_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_ctrl_events.o(.rodata.hci_subevent_table)
</UL>
<P><STRONG><a name="[11a]"></a>LECTRL_LeDirectedAdvertisingReportEvent</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, le_ctrl_events.o(.text.LECTRL_LeDirectedAdvertisingReportEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = LECTRL_LeDirectedAdvertisingReportEvent &rArr; HCI_LE_DIRECTED_ADVERTISING_REPORT_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_DIRECTED_ADVERTISING_REPORT_EVENT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_ctrl_events.o(.rodata.hci_subevent_table)
</UL>
<P><STRONG><a name="[11b]"></a>LECTRL_LePhyUpdateCompleteEvent</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, le_ctrl_events.o(.text.LECTRL_LePhyUpdateCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = LECTRL_LePhyUpdateCompleteEvent &rArr; HCI_LE_PHY_UPDATE_COMPLETE_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_PHY_UPDATE_COMPLETE_EVENT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_ctrl_events.o(.rodata.hci_subevent_table)
</UL>
<P><STRONG><a name="[11c]"></a>LECTRL_LeChannelSelectionAlgorithmEvent</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, le_ctrl_events.o(.text.LECTRL_LeChannelSelectionAlgorithmEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = LECTRL_LeChannelSelectionAlgorithmEvent &rArr; HCI_LE_CHANNEL_SELECTION_ALGORITHM_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_CHANNEL_SELECTION_ALGORITHM_EVENT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_ctrl_events.o(.rodata.hci_subevent_table)
</UL>
<P><STRONG><a name="[10a]"></a>LECTRL_DisconnectionComplete</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, le_ctrl_events.o(.text.LECTRL_DisconnectionComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = LECTRL_DisconnectionComplete &rArr; LECTRL_AclPacketTransmitted &rArr; L2C_Tx_Data_Conplete_Handler &rArr; L2C_Mux_Acl_Packet &rArr; SMP_L2cap_Data_Handler &rArr; SMP_Key_Dist_Tx_Complete_Handler &rArr; SMP_Pairing_Success &rArr; SDB_Write_Sec_Record &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_intf_clear_event
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_DISCONNECTION_COMPLETE_EVENT
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Disconnection_Complete_Handler
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_AclPacketTransmitted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_ctrl_events.o(.rodata.hci_event_table)
</UL>
<P><STRONG><a name="[3fc]"></a>LECTRL_AclPacketTransmitted</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, le_ctrl_events.o(.text.LECTRL_AclPacketTransmitted))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = LECTRL_AclPacketTransmitted &rArr; L2C_Tx_Data_Conplete_Handler &rArr; L2C_Mux_Acl_Packet &rArr; SMP_L2cap_Data_Handler &rArr; SMP_Key_Dist_Tx_Complete_Handler &rArr; SMP_Pairing_Success &rArr; SDB_Write_Sec_Record &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_List_Remove
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Tx_Data_Conplete_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_NumberOfCompletedPacketsEvent
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_DisconnectionComplete
</UL>

<P><STRONG><a name="[10b]"></a>LECTRL_EncryptionChangeEvent</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, le_ctrl_events.o(.text.LECTRL_EncryptionChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = LECTRL_EncryptionChangeEvent &rArr; SMP_Encryption_Update_Handler &rArr; EVT_aci_gap_pairing_complete &rArr; ACI_GAP_PAIRING_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ENCRYPTION_CHANGE_EVENT
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Encryption_Update_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_ctrl_events.o(.rodata.hci_event_table)
</UL>
<P><STRONG><a name="[10c]"></a>LECTRL_ReadRemoteVersionInformationComplete</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, le_ctrl_events.o(.text.LECTRL_ReadRemoteVersionInformationComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = LECTRL_ReadRemoteVersionInformationComplete &rArr; HCI_READ_REMOTE_VERSION_INFORMATION_COMPLETE_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_READ_REMOTE_VERSION_INFORMATION_COMPLETE_EVENT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_ctrl_events.o(.rodata.hci_event_table)
</UL>
<P><STRONG><a name="[10d]"></a>LECTRL_HwErrorEvent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, le_ctrl_events.o(.text.LECTRL_HwErrorEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = LECTRL_HwErrorEvent &rArr; HCI_HARDWARE_ERROR_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_HARDWARE_ERROR_EVENT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_ctrl_events.o(.rodata.hci_event_table)
</UL>
<P><STRONG><a name="[10e]"></a>LECTRL_NumberOfCompletedPacketsEvent</STRONG> (Thumb, 120 bytes, Stack size 288 bytes, le_ctrl_events.o(.text.LECTRL_NumberOfCompletedPacketsEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296 + Unknown Stack Size
<LI>Call Chain = LECTRL_NumberOfCompletedPacketsEvent &rArr; LECTRL_AclPacketTransmitted &rArr; L2C_Tx_Data_Conplete_Handler &rArr; L2C_Mux_Acl_Packet &rArr; SMP_L2cap_Data_Handler &rArr; SMP_Key_Dist_Tx_Complete_Handler &rArr; SMP_Pairing_Success &rArr; SDB_Write_Sec_Record &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LECTRL_AclPacketTransmitted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_ctrl_events.o(.rodata.hci_event_table)
</UL>
<P><STRONG><a name="[10f]"></a>LECTRL_DataBufferOverflowEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, le_ctrl_events.o(.text.LECTRL_DataBufferOverflowEvent))
<BR>[Address Reference Count : 1]<UL><LI> le_ctrl_events.o(.rodata.hci_event_table)
</UL>
<P><STRONG><a name="[110]"></a>LECTRL_EncryptionKeyRefreshCompleteEvent</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, le_ctrl_events.o(.text.LECTRL_EncryptionKeyRefreshCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = LECTRL_EncryptionKeyRefreshCompleteEvent &rArr; SMP_Encryption_Update_Handler &rArr; EVT_aci_gap_pairing_complete &rArr; ACI_GAP_PAIRING_COMPLETE_EVENT &rArr; OUTLINED_FUNCTION_14 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ENCRYPTION_KEY_REFRESH_COMPLETE_EVENT
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Encryption_Update_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> le_ctrl_events.o(.rodata.hci_event_table)
</UL>
<P><STRONG><a name="[111]"></a>LECTRL_AutPayloadTimeoutEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, le_ctrl_events.o(.text.LECTRL_AutPayloadTimeoutEvent))
<BR>[Address Reference Count : 1]<UL><LI> le_ctrl_events.o(.rodata.hci_event_table)
</UL>
<P><STRONG><a name="[359]"></a>GATT_Get_Packet_Bearer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gatt.o(.text.GATT_Get_Packet_Bearer))
<BR><BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Get_Root_Bearer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_L2cap_Data_Handler
</UL>

<P><STRONG><a name="[35b]"></a>GATT_Start_Timer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gatt.o(.text.GATT_Start_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GATT_Start_Timer &rArr; BLEPLAT_TimerStart &rArr; BLE_TIMER_Start &rArr; AMM_Alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_TimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_L2cap_Data_Handler
</UL>

<P><STRONG><a name="[85]"></a>GATT_Stop_Timer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gatt.o(.text.GATT_Stop_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GATT_Stop_Timer &rArr; BLEPLAT_TimerStop &rArr; BLE_TIMER_Stop &rArr; AMM_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_L2cap_Data_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt.o(.text.GATT_Reset_Bearer)
</UL>
<P><STRONG><a name="[35d]"></a>GATT_Warning</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gatt.o(.text.GATT_Warning))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = GATT_Warning &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_warning
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_L2cap_Data_Handler
</UL>

<P><STRONG><a name="[360]"></a>GATT_Reset_To_Closed_State</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gatt.o(.text.GATT_Reset_To_Closed_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = GATT_Reset_To_Closed_State &rArr; GATT_Store_Server_Database &rArr; SMP_Save_GATT_Data &rArr; SDB_Write_Gatt_Data &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Forget_Device
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Store_Server_Database
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Reset_Bearer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
</UL>

<P><STRONG><a name="[361]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gatt.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
</UL>

<P><STRONG><a name="[362]"></a>GATT_Send_Packet_Once</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gatt.o(.text.GATT_Send_Packet_Once))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GATT_Send_Packet_Once &rArr; L2C_Send_Data &rArr; LECTRL_SendAclDataFromHostToController &rArr; LECTRL_SendAclDataToLL &rArr; ll_intf_acl_data_from_host_to_cntrlr &rArr; conn_mngr_send_pkt &rArr; evnt_schdlr_add_data_pkt &rArr; packet_enqueue &rArr; os_rcrsv_mutex_release &rArr; LINKLAYER_PLAT_EnableSpecificIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Process
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet
</UL>

<P><STRONG><a name="[84]"></a>GATT_Flush_Acl_List</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, gatt.o(.text.GATT_Flush_Acl_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GATT_Flush_Acl_List &rArr; ACL_Release &rArr; ACL_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Release
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_List_Remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt.o(.text.GATT_Reset_Bearer)
</UL>
<P><STRONG><a name="[263]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gatt_server_att.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; ACL_Cmp_Data &rArr; ble_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Cmp_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Find_By_Type_Val_Rsp
</UL>

<P><STRONG><a name="[264]"></a>ATT_fill_type_val_entry</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gatt_server_att.o(.text.ATT_fill_type_val_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ATT_fill_type_val_entry &rArr; ACL_Set_Data &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Set_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Find_By_Type_Val_Rsp
</UL>

<P><STRONG><a name="[265]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gatt_server_att.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; ATT_Check_Perm &rArr; SMP_Get_Sec_Status &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Check_Perm
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Multi_Rsp
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Blob_Rsp
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Rsp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_By_Type_Rsp
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Find_By_Type_Val_Rsp
</UL>

<P><STRONG><a name="[270]"></a>ATT_Get_UUID128_From_Read_By_Type_Req</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gatt_server_att.o(.text.ATT_Get_UUID128_From_Read_By_Type_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ATT_Get_UUID128_From_Read_By_Type_Req &rArr; ACL_Get_Data &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcpy
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Get_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_By_Type_Rsp
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_By_Grp_Type_Rsp
</UL>

<P><STRONG><a name="[267]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gatt_server_att.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; ATT_Build_Error_Rsp
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Error_Rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Blob_Rsp
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Rsp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_By_Type_Rsp
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Find_Info_Rsp
</UL>

<P><STRONG><a name="[272]"></a>GATT_Read_Multi_Permit_Req_Event</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gatt_server_att.o(.text.GATT_Read_Multi_Permit_Req_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = GATT_Read_Multi_Permit_Req_Event &rArr; EVT_aci_gatt_read_multi_permit_req &rArr; ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gatt_read_multi_permit_req
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Multi_Rsp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_By_Type_Rsp
</UL>

<P><STRONG><a name="[364]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gatt_server_att.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Evt_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Permit_Req_Event
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Read_Multi_Permit_Req_Event
</UL>

<P><STRONG><a name="[25d]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gatt_server_att.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Rsp
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Exec_Write_Rsp
</UL>

<P><STRONG><a name="[256]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gatt_server_att.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; ATT_Build_Error_Rsp
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Error_Rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Blob_Rsp
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Rsp
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Write_Rsp
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Exchg_Mtu_Rsp
</UL>

<P><STRONG><a name="[26e]"></a>GATT_Read_Permit_Req_Event</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gatt_server_att.o(.text.GATT_Read_Permit_Req_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = GATT_Read_Permit_Req_Event &rArr; EVT_aci_gatt_read_permit_req &rArr; ACI_GATT_READ_PERMIT_REQ_EVENT &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gatt_read_permit_req
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Blob_Rsp
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Read_Rsp
</UL>

<P><STRONG><a name="[26a]"></a>ATT_Find_Attribute_To_Write</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gatt_server_att.o(.text.ATT_Find_Attribute_To_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ATT_Find_Attribute_To_Write &rArr; ATT_Check_Perm &rArr; SMP_Get_Sec_Status &rArr; OUTLINED_FUNCTION_0
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Find_Srv_Owner_Of_Handle
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Check_Perm
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Search_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Prepare_Write_Rsp
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Write_Rsp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Handle_Write_Cmd
</UL>

<P><STRONG><a name="[276]"></a>GATT_Write_Permit_Req_Event</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, gatt_server_att.o(.text.GATT_Write_Permit_Req_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = GATT_Write_Permit_Req_Event &rArr; EVT_aci_gatt_write_permit_req &rArr; ACI_GATT_WRITE_PERMIT_REQ_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_gatt_write_permit_req
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Evt_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Write_Rsp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Handle_Write_Cmd
</UL>

<P><STRONG><a name="[260]"></a>GATT_Attribute_Modified_Event</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gatt_server_att.o(.text.GATT_Attribute_Modified_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = GATT_Attribute_Modified_Event &rArr; EVT_GATT_Attribute_Modified &rArr; ACI_GATT_ATTRIBUTE_MODIFIED_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_GATT_Attribute_Modified
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Evt_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Write_Rsp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Handle_Write_Cmd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Exec_Write_Rsp
</UL>

<P><STRONG><a name="[25e]"></a>GATT_Find_Char_Attribute</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, gatt_server_att.o(.text.GATT_Find_Char_Attribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GATT_Find_Char_Attribute &rArr; GATT_Find_Srv_Owner_Of_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Find_Srv_Owner_Of_Handle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Search_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Build_Exec_Write_Rsp
</UL>

<P><STRONG><a name="[3f5]"></a>L2C_Mux_Acl_Packet</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, l2cap.o(.text.L2C_Mux_Acl_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = L2C_Mux_Acl_Packet &rArr; SMP_L2cap_Data_Handler &rArr; SMP_Key_Dist_Tx_Complete_Handler &rArr; SMP_Pairing_Success &rArr; SDB_Write_Sec_Record &rArr; SDB_Warning_Event &rArr; EVT_aci_warning &rArr; ACI_WARNING_EVENT &rArr; OUTLINED_FUNCTION_8 &rArr; hci_event &rArr; BLECB_Indication &rArr; Log_Module_Print &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVT_aci_l2cap_command_reject
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_L2cap_Data_Handler
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_CPU_Req_Rx_Handler
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Stop_Timer
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Command_Reject
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_CPU_Rsp_Rx_Handler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Get_Connection
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Release
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_L2cap_Data_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Tx_Data_Conplete_Handler
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rx_Data_Handler
</UL>

<P><STRONG><a name="[3f4]"></a>L2C_Discard_Recomb_Data</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, l2cap.o(.text.L2C_Discard_Recomb_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = L2C_Discard_Recomb_Data &rArr; ACL_Release &rArr; ACL_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Release
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Disconnection_Complete_Handler
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rx_Data_Handler
</UL>

<P><STRONG><a name="[205]"></a>ACL_Alloc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, acl.o(.text.ACL_Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ACL_Alloc &rArr; ACL_Available_Blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Available_Blocks
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_New
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Resize
</UL>

<P><STRONG><a name="[206]"></a>ACL_Available_Blocks</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, acl.o(.text.ACL_Available_Blocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ACL_Available_Blocks
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Tx_Pool_Size
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Alloc
</UL>

<P><STRONG><a name="[208]"></a>ACL_Free</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, acl.o(.text.ACL_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ACL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Release
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Append
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Resize
</UL>

<P><STRONG><a name="[51d]"></a>SMA_Diversify</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, sm_algo.o(.text.SMA_Diversify))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SMA_Diversify &rArr; BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesEcbEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_CSRK
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_LTK
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Compute_EDIV
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_IRK
</UL>

<P><STRONG><a name="[a3]"></a>SMA_Cmac</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sm_algo.o(.text.SMA_Cmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SMA_Cmac &rArr; BLEPLAT_AesCmacCompute &rArr; BAES_CmacCompute
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesCmacCompute
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesCmacSetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_g2_NumComp_Val
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f6_Check_Val
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f4_Confirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sm_algo.o(.text.SMA_SC_Gen_f5_Keys)
</UL>
<P><STRONG><a name="[473]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sm_algo.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; BLEPLAT_AesEcbEncrypt &rArr; BAES_EcbCrypt &rArr; HW_AES_SetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_AesEcbEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_CMAC_Generate_Tag
</UL>

<P><STRONG><a name="[51a]"></a>SMA_left_shift</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sm_algo.o(.text.SMA_left_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SMA_left_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_CMAC_Generate_Tag
</UL>

<P><STRONG><a name="[45c]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sm_algo.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; ACL_Get_Data &rArr; ble_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_Get_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_CMAC_Generate_Tag
</UL>

<P><STRONG><a name="[529]"></a>SMP_Search_Rep_Attempts_List</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, smp_rep.o(.text.SMP_Search_Rep_Attempts_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SMP_Search_Rep_Attempts_List &rArr; BLEPLAT_TimerStop &rArr; BLE_TIMER_Stop &rArr; AMM_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_TimerStop
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memset
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Clear_Rep_Attempts_Timeout_Status
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Get_Rep_Attempts_Timeout_Status
</UL>

<P><STRONG><a name="[45d]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utils.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_calc_num_of_used_data_chnls
</UL>

<P><STRONG><a name="[45e]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem_manager.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pool_init
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_pool_alloc
</UL>

<P><STRONG><a name="[58]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[186]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
